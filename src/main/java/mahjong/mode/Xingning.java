// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xingning.proto

package mahjong.mode;

public final class Xingning {
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_GameInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_GameInfo_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_SeatGameInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_SeatGameInfo_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_ResultResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_ResultResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_UserResult_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_UserResult_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_OverResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_OverResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_SeatGameOver_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_SeatGameOver_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_ReplayResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_ReplayResponse_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\016xingning.proto\032\016gameBase.proto\032\rmahjon" +
                        "g.proto\"\216\001\n\010GameInfo\022\037\n\ngameStatus\030\001 \001(\016" +
                        "2\013.GameStatus\022\025\n\roperationUser\030\002 \001(\r\022\031\n\021" +
                        "lastOperationUser\030\003 \001(\r\022\034\n\005seats\030\004 \003(\0132\r" +
                        ".SeatGameInfo\022\021\n\tgameCount\030\005 \001(\r\"\260\001\n\014Sea" +
                        "tGameInfo\022\n\n\002ID\030\001 \001(\r\022\024\n\014initialCards\030\002 " +
                        "\003(\r\022\r\n\005cards\030\003 \003(\r\022\021\n\tcardsSize\030\004 \001(\r\022\021\n" +
                        "\tpengCards\030\005 \003(\r\022\021\n\tgangCards\030\006 \003(\r\022\020\n\010c" +
                        "hiCards\030\007 \003(\r\022\023\n\013playedCards\030\010 \003(\r\022\017\n\007is" +
                        "Robot\030\t \001(\010\"1\n\016ResultResponse\022\037\n\nuserRes",
                "ult\030\001 \003(\0132\013.UserResult\"\263\001\n\nUserResult\022\n\n" +
                        "\002ID\030\001 \001(\r\022\021\n\tcardScore\030\002 \001(\005\022\036\n\nscoreTyp" +
                        "es\030\003 \003(\0162\n.ScoreType\022\021\n\tgangScore\030\004 \001(\005\022" +
                        "\017\n\007maScore\030\005 \001(\005\022\r\n\005cards\030\006 \003(\r\022\021\n\tgangC" +
                        "ards\030\007 \003(\r\022\021\n\twinOrLose\030\010 \001(\005\022\r\n\005score\030\t" +
                        " \001(\005\"/\n\014OverResponse\022\037\n\010gameOver\030\001 \003(\0132\r" +
                        ".SeatGameOver\"\211\001\n\014SeatGameOver\022\n\n\002ID\030\001 \001" +
                        "(\r\022\021\n\twinOrLose\030\002 \001(\005\022\017\n\007huCount\030\003 \001(\r\022\021" +
                        "\n\tzimoCount\030\004 \001(\r\022\024\n\014dianpaoCount\030\005 \001(\r\022" +
                        "\016\n\006angang\030\006 \001(\r\022\020\n\010minggang\030\007 \001(\r\"t\n\016Rep",
                "layResponse\022\035\n\005start\030\001 \001(\0132\016.StartRespon" +
                        "se\022\"\n\007history\030\002 \003(\0132\021.OperationHistory\022\037" +
                        "\n\006result\030\003 \001(\0132\017.ResultResponse*4\n\nGameS" +
                        "tatus\022\013\n\007WAITING\020\000\022\014\n\010READYING\020\001\022\013\n\007PLAY" +
                        "ING\020\002*\276\002\n\tScoreType\022\013\n\007PING_HU\020\000\022\013\n\007ZIMO" +
                        "_HU\020\001\022\016\n\nMENQING_HU\020\002\022\017\n\013PENGPENG_HU\020\003\022\016" +
                        "\n\nHUNYISE_HU\020\004\022\017\n\013QINGYISE_HU\020\005\022\020\n\014QIXIA" +
                        "ODUI_HU\020\006\022\020\n\014HUNYAOJIU_HU\020\007\022\026\n\022HAOHUAQIX" +
                        "IAODUI_HU\020\010\022\020\n\014SHISANYAO_HU\020\t\022\013\n\007TIAN_HU" +
                        "\020\n\022\t\n\005DI_HU\020\013\022\021\n\rQUANYAOJIU_HU\020\014\022\017\n\013QUAN",
                "FENG_HU\020\r\022\034\n\030SHUANGHAOHUAQIXIAODUI_HU\020\016\022" +
                        "\031\n\025SANHAOHUAQIXIAODUI_HU\020\017\022\022\n\016WUHONGZHON" +
                        "G_HU\020\020B\016\n\014mahjong.modeb\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                                mahjong.mode.GameBase.getDescriptor(),
                                mahjong.mode.Mahjong.getDescriptor(),
                        }, assigner);
        internal_static_GameInfo_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_GameInfo_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_GameInfo_descriptor,
                new java.lang.String[]{"GameStatus", "OperationUser", "LastOperationUser", "Seats", "GameCount",});
        internal_static_SeatGameInfo_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_SeatGameInfo_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_SeatGameInfo_descriptor,
                new java.lang.String[]{"ID", "InitialCards", "Cards", "CardsSize", "PengCards", "GangCards", "ChiCards", "PlayedCards", "IsRobot",});
        internal_static_ResultResponse_descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_ResultResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_ResultResponse_descriptor,
                new java.lang.String[]{"UserResult",});
        internal_static_UserResult_descriptor =
                getDescriptor().getMessageTypes().get(3);
        internal_static_UserResult_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_UserResult_descriptor,
                new java.lang.String[]{"ID", "CardScore", "ScoreTypes", "GangScore", "MaScore", "Cards", "GangCards", "WinOrLose", "Score",});
        internal_static_OverResponse_descriptor =
                getDescriptor().getMessageTypes().get(4);
        internal_static_OverResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_OverResponse_descriptor,
                new java.lang.String[]{"GameOver",});
        internal_static_SeatGameOver_descriptor =
                getDescriptor().getMessageTypes().get(5);
        internal_static_SeatGameOver_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_SeatGameOver_descriptor,
                new java.lang.String[]{"ID", "WinOrLose", "HuCount", "ZimoCount", "DianpaoCount", "Angang", "Minggang",});
        internal_static_ReplayResponse_descriptor =
                getDescriptor().getMessageTypes().get(6);
        internal_static_ReplayResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_ReplayResponse_descriptor,
                new java.lang.String[]{"Start", "History", "Result",});
        mahjong.mode.GameBase.getDescriptor();
        mahjong.mode.Mahjong.getDescriptor();
    }

    private Xingning() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    /**
     * Protobuf enum {@code GameStatus}
     */
    public enum GameStatus
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         *等待开始
         * </pre>
         *
         * <code>WAITING = 0;</code>
         */
        WAITING(0),
        /**
         * <pre>
         *准备状态
         * </pre>
         *
         * <code>READYING = 1;</code>
         */
        READYING(1),
        /**
         * <pre>
         *游戏中
         * </pre>
         *
         * <code>PLAYING = 2;</code>
         */
        PLAYING(2),
        UNRECOGNIZED(-1),;

        /**
         * <pre>
         *等待开始
         * </pre>
         *
         * <code>WAITING = 0;</code>
         */
        public static final int WAITING_VALUE = 0;
        /**
         * <pre>
         *准备状态
         * </pre>
         *
         * <code>READYING = 1;</code>
         */
        public static final int READYING_VALUE = 1;
        /**
         * <pre>
         *游戏中
         * </pre>
         *
         * <code>PLAYING = 2;</code>
         */
        public static final int PLAYING_VALUE = 2;
        private static final com.google.protobuf.Internal.EnumLiteMap<
                GameStatus> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<GameStatus>() {
                    public GameStatus findValueByNumber(int number) {
                        return GameStatus.forNumber(number);
                    }
                };
        private static final GameStatus[] VALUES = values();
        private final int value;

        private GameStatus(int value) {
            this.value = value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static GameStatus valueOf(int value) {
            return forNumber(value);
        }

        public static GameStatus forNumber(int value) {
            switch (value) {
                case 0:
                    return WAITING;
                case 1:
                    return READYING;
                case 2:
                    return PLAYING;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<GameStatus>
        internalGetValueMap() {
            return internalValueMap;
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return mahjong.mode.Xingning.getDescriptor().getEnumTypes().get(0);
        }

        public static GameStatus valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        // @@protoc_insertion_point(enum_scope:GameStatus)
    }

    /**
     * Protobuf enum {@code ScoreType}
     */
    public enum ScoreType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         *平胡
         * </pre>
         *
         * <code>PING_HU = 0;</code>
         */
        PING_HU(0),
        /**
         * <pre>
         *自摸
         * </pre>
         *
         * <code>ZIMO_HU = 1;</code>
         */
        ZIMO_HU(1),
        /**
         * <pre>
         *门清
         * </pre>
         *
         * <code>MENQING_HU = 2;</code>
         */
        MENQING_HU(2),
        /**
         * <pre>
         *碰碰胡
         * </pre>
         *
         * <code>PENGPENG_HU = 3;</code>
         */
        PENGPENG_HU(3),
        /**
         * <pre>
         *混一色
         * </pre>
         *
         * <code>HUNYISE_HU = 4;</code>
         */
        HUNYISE_HU(4),
        /**
         * <pre>
         *清一色
         * </pre>
         *
         * <code>QINGYISE_HU = 5;</code>
         */
        QINGYISE_HU(5),
        /**
         * <pre>
         *七小对
         * </pre>
         *
         * <code>QIXIAODUI_HU = 6;</code>
         */
        QIXIAODUI_HU(6),
        /**
         * <pre>
         *混幺九
         * </pre>
         *
         * <code>HUNYAOJIU_HU = 7;</code>
         */
        HUNYAOJIU_HU(7),
        /**
         * <pre>
         *豪华七小对
         * </pre>
         *
         * <code>HAOHUAQIXIAODUI_HU = 8;</code>
         */
        HAOHUAQIXIAODUI_HU(8),
        /**
         * <pre>
         *十三幺
         * </pre>
         *
         * <code>SHISANYAO_HU = 9;</code>
         */
        SHISANYAO_HU(9),
        /**
         * <pre>
         *天胡
         * </pre>
         *
         * <code>TIAN_HU = 10;</code>
         */
        TIAN_HU(10),
        /**
         * <pre>
         *地胡
         * </pre>
         *
         * <code>DI_HU = 11;</code>
         */
        DI_HU(11),
        /**
         * <pre>
         *全幺九
         * </pre>
         *
         * <code>QUANYAOJIU_HU = 12;</code>
         */
        QUANYAOJIU_HU(12),
        /**
         * <pre>
         *全风
         * </pre>
         *
         * <code>QUANFENG_HU = 13;</code>
         */
        QUANFENG_HU(13),
        /**
         * <pre>
         *双豪华七小对
         * </pre>
         *
         * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
         */
        SHUANGHAOHUAQIXIAODUI_HU(14),
        /**
         * <pre>
         *三豪华七小对
         * </pre>
         *
         * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
         */
        SANHAOHUAQIXIAODUI_HU(15),
        /**
         * <pre>
         *无红中
         * </pre>
         *
         * <code>WUHONGZHONG_HU = 16;</code>
         */
        WUHONGZHONG_HU(16),
        UNRECOGNIZED(-1),;

        /**
         * <pre>
         *平胡
         * </pre>
         *
         * <code>PING_HU = 0;</code>
         */
        public static final int PING_HU_VALUE = 0;
        /**
         * <pre>
         *自摸
         * </pre>
         *
         * <code>ZIMO_HU = 1;</code>
         */
        public static final int ZIMO_HU_VALUE = 1;
        /**
         * <pre>
         *门清
         * </pre>
         *
         * <code>MENQING_HU = 2;</code>
         */
        public static final int MENQING_HU_VALUE = 2;
        /**
         * <pre>
         *碰碰胡
         * </pre>
         *
         * <code>PENGPENG_HU = 3;</code>
         */
        public static final int PENGPENG_HU_VALUE = 3;
        /**
         * <pre>
         *混一色
         * </pre>
         *
         * <code>HUNYISE_HU = 4;</code>
         */
        public static final int HUNYISE_HU_VALUE = 4;
        /**
         * <pre>
         *清一色
         * </pre>
         *
         * <code>QINGYISE_HU = 5;</code>
         */
        public static final int QINGYISE_HU_VALUE = 5;
        /**
         * <pre>
         *七小对
         * </pre>
         *
         * <code>QIXIAODUI_HU = 6;</code>
         */
        public static final int QIXIAODUI_HU_VALUE = 6;
        /**
         * <pre>
         *混幺九
         * </pre>
         *
         * <code>HUNYAOJIU_HU = 7;</code>
         */
        public static final int HUNYAOJIU_HU_VALUE = 7;
        /**
         * <pre>
         *豪华七小对
         * </pre>
         *
         * <code>HAOHUAQIXIAODUI_HU = 8;</code>
         */
        public static final int HAOHUAQIXIAODUI_HU_VALUE = 8;
        /**
         * <pre>
         *十三幺
         * </pre>
         *
         * <code>SHISANYAO_HU = 9;</code>
         */
        public static final int SHISANYAO_HU_VALUE = 9;
        /**
         * <pre>
         *天胡
         * </pre>
         *
         * <code>TIAN_HU = 10;</code>
         */
        public static final int TIAN_HU_VALUE = 10;
        /**
         * <pre>
         *地胡
         * </pre>
         *
         * <code>DI_HU = 11;</code>
         */
        public static final int DI_HU_VALUE = 11;
        /**
         * <pre>
         *全幺九
         * </pre>
         *
         * <code>QUANYAOJIU_HU = 12;</code>
         */
        public static final int QUANYAOJIU_HU_VALUE = 12;
        /**
         * <pre>
         *全风
         * </pre>
         *
         * <code>QUANFENG_HU = 13;</code>
         */
        public static final int QUANFENG_HU_VALUE = 13;
        /**
         * <pre>
         *双豪华七小对
         * </pre>
         *
         * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
         */
        public static final int SHUANGHAOHUAQIXIAODUI_HU_VALUE = 14;
        /**
         * <pre>
         *三豪华七小对
         * </pre>
         *
         * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
         */
        public static final int SANHAOHUAQIXIAODUI_HU_VALUE = 15;
        /**
         * <pre>
         *无红中
         * </pre>
         *
         * <code>WUHONGZHONG_HU = 16;</code>
         */
        public static final int WUHONGZHONG_HU_VALUE = 16;
        private static final com.google.protobuf.Internal.EnumLiteMap<
                ScoreType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ScoreType>() {
                    public ScoreType findValueByNumber(int number) {
                        return ScoreType.forNumber(number);
                    }
                };
        private static final ScoreType[] VALUES = values();
        private final int value;

        private ScoreType(int value) {
            this.value = value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ScoreType valueOf(int value) {
            return forNumber(value);
        }

        public static ScoreType forNumber(int value) {
            switch (value) {
                case 0:
                    return PING_HU;
                case 1:
                    return ZIMO_HU;
                case 2:
                    return MENQING_HU;
                case 3:
                    return PENGPENG_HU;
                case 4:
                    return HUNYISE_HU;
                case 5:
                    return QINGYISE_HU;
                case 6:
                    return QIXIAODUI_HU;
                case 7:
                    return HUNYAOJIU_HU;
                case 8:
                    return HAOHUAQIXIAODUI_HU;
                case 9:
                    return SHISANYAO_HU;
                case 10:
                    return TIAN_HU;
                case 11:
                    return DI_HU;
                case 12:
                    return QUANYAOJIU_HU;
                case 13:
                    return QUANFENG_HU;
                case 14:
                    return SHUANGHAOHUAQIXIAODUI_HU;
                case 15:
                    return SANHAOHUAQIXIAODUI_HU;
                case 16:
                    return WUHONGZHONG_HU;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ScoreType>
        internalGetValueMap() {
            return internalValueMap;
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return mahjong.mode.Xingning.getDescriptor().getEnumTypes().get(1);
        }

        public static ScoreType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        // @@protoc_insertion_point(enum_scope:ScoreType)
    }

    public interface GameInfoOrBuilder extends
            // @@protoc_insertion_point(interface_extends:GameInfo)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        int getGameStatusValue();

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        mahjong.mode.Xingning.GameStatus getGameStatus();

        /**
         * <pre>
         * 当前操作的人
         * </pre>
         * <p>
         * <code>uint32 operationUser = 2;</code>
         */
        int getOperationUser();

        /**
         * <pre>
         * 上家出牌人
         * </pre>
         * <p>
         * <code>uint32 lastOperationUser = 3;</code>
         */
        int getLastOperationUser();

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        java.util.List<mahjong.mode.Xingning.SeatGameInfo>
        getSeatsList();

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        mahjong.mode.Xingning.SeatGameInfo getSeats(int index);

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        int getSeatsCount();

        /**
         * <pre>
         *座位
         * </pre>
         *
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        java.util.List<? extends mahjong.mode.Xingning.SeatGameInfoOrBuilder>
        getSeatsOrBuilderList();

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        mahjong.mode.Xingning.SeatGameInfoOrBuilder getSeatsOrBuilder(
                int index);

        /**
         * <pre>
         * 当前游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameCount = 5;</code>
         */
        int getGameCount();
    }

    public interface SeatGameInfoOrBuilder extends
            // @@protoc_insertion_point(interface_extends:SeatGameInfo)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * ID
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        int getID();

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 initialCards = 2;</code>
         */
        java.util.List<java.lang.Integer> getInitialCardsList();

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 initialCards = 2;</code>
         */
        int getInitialCardsCount();

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 initialCards = 2;</code>
         */
        int getInitialCards(int index);

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 cards = 3;</code>
         */
        java.util.List<java.lang.Integer> getCardsList();

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 cards = 3;</code>
         */
        int getCardsCount();

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 cards = 3;</code>
         */
        int getCards(int index);

        /**
         * <pre>
         * 牌数量
         * </pre>
         * <p>
         * <code>uint32 cardsSize = 4;</code>
         */
        int getCardsSize();

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated uint32 pengCards = 5;</code>
         */
        java.util.List<java.lang.Integer> getPengCardsList();

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated uint32 pengCards = 5;</code>
         */
        int getPengCardsCount();

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated uint32 pengCards = 5;</code>
         */
        int getPengCards(int index);

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 6;</code>
         */
        java.util.List<java.lang.Integer> getGangCardsList();

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 6;</code>
         */
        int getGangCardsCount();

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 6;</code>
         */
        int getGangCards(int index);

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated uint32 chiCards = 7;</code>
         */
        java.util.List<java.lang.Integer> getChiCardsList();

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated uint32 chiCards = 7;</code>
         */
        int getChiCardsCount();

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated uint32 chiCards = 7;</code>
         */
        int getChiCards(int index);

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated uint32 playedCards = 8;</code>
         */
        java.util.List<java.lang.Integer> getPlayedCardsList();

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated uint32 playedCards = 8;</code>
         */
        int getPlayedCardsCount();

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated uint32 playedCards = 8;</code>
         */
        int getPlayedCards(int index);

        /**
         * <pre>
         * 是否托管
         * </pre>
         * <p>
         * <code>bool isRobot = 9;</code>
         */
        boolean getIsRobot();
    }

    public interface ResultResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:ResultResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        java.util.List<mahjong.mode.Xingning.UserResult>
        getUserResultList();

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        mahjong.mode.Xingning.UserResult getUserResult(int index);

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        int getUserResultCount();

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        java.util.List<? extends mahjong.mode.Xingning.UserResultOrBuilder>
        getUserResultOrBuilderList();

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        mahjong.mode.Xingning.UserResultOrBuilder getUserResultOrBuilder(
                int index);
    }

    public interface UserResultOrBuilder extends
            // @@protoc_insertion_point(interface_extends:UserResult)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        int getID();

        /**
         * <pre>
         * 牌型输赢
         * </pre>
         * <p>
         * <code>int32 cardScore = 2;</code>
         */
        int getCardScore();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        java.util.List<mahjong.mode.Xingning.ScoreType> getScoreTypesList();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        int getScoreTypesCount();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        mahjong.mode.Xingning.ScoreType getScoreTypes(int index);

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        java.util.List<java.lang.Integer>
        getScoreTypesValueList();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        int getScoreTypesValue(int index);

        /**
         * <pre>
         * 杠牌输赢
         * </pre>
         * <p>
         * <code>int32 gangScore = 4;</code>
         */
        int getGangScore();

        /**
         * <pre>
         * 卖马输赢
         * </pre>
         * <p>
         * <code>int32 maScore = 5;</code>
         */
        int getMaScore();

        /**
         * <code>repeated uint32 cards = 6;</code>
         */
        java.util.List<java.lang.Integer> getCardsList();

        /**
         * <code>repeated uint32 cards = 6;</code>
         */
        int getCardsCount();

        /**
         * <code>repeated uint32 cards = 6;</code>
         */
        int getCards(int index);

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 7;</code>
         */
        java.util.List<java.lang.Integer> getGangCardsList();

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 7;</code>
         */
        int getGangCardsCount();

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 7;</code>
         */
        int getGangCards(int index);

        /**
         * <pre>
         * 当局输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 8;</code>
         */
        int getWinOrLose();

        /**
         * <pre>
         * 总输赢分数
         * </pre>
         * <p>
         * <code>int32 score = 9;</code>
         */
        int getScore();
    }

    public interface OverResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:OverResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        java.util.List<mahjong.mode.Xingning.SeatGameOver>
        getGameOverList();

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        mahjong.mode.Xingning.SeatGameOver getGameOver(int index);

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        int getGameOverCount();

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        java.util.List<? extends mahjong.mode.Xingning.SeatGameOverOrBuilder>
        getGameOverOrBuilderList();

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        mahjong.mode.Xingning.SeatGameOverOrBuilder getGameOverOrBuilder(
                int index);
    }

    public interface SeatGameOverOrBuilder extends
            // @@protoc_insertion_point(interface_extends:SeatGameOver)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        int getID();

        /**
         * <pre>
         * 总输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 2;</code>
         */
        int getWinOrLose();

        /**
         * <pre>
         * 胡牌次数
         * </pre>
         * <p>
         * <code>uint32 huCount = 3;</code>
         */
        int getHuCount();

        /**
         * <pre>
         * 自摸次数
         * </pre>
         * <p>
         * <code>uint32 zimoCount = 4;</code>
         */
        int getZimoCount();

        /**
         * <pre>
         * 点炮次数
         * </pre>
         * <p>
         * <code>uint32 dianpaoCount = 5;</code>
         */
        int getDianpaoCount();

        /**
         * <pre>
         * 暗杠次数
         * </pre>
         * <p>
         * <code>uint32 angang = 6;</code>
         */
        int getAngang();

        /**
         * <pre>
         * 明杠次数
         * </pre>
         * <p>
         * <code>uint32 minggang = 7;</code>
         */
        int getMinggang();
    }

    public interface ReplayResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:ReplayResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.StartResponse start = 1;</code>
         */
        boolean hasStart();

        /**
         * <code>.StartResponse start = 1;</code>
         */
        mahjong.mode.Mahjong.StartResponse getStart();

        /**
         * <code>.StartResponse start = 1;</code>
         */
        mahjong.mode.Mahjong.StartResponseOrBuilder getStartOrBuilder();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        java.util.List<mahjong.mode.GameBase.OperationHistory>
        getHistoryList();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        mahjong.mode.GameBase.OperationHistory getHistory(int index);

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        int getHistoryCount();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        java.util.List<? extends mahjong.mode.GameBase.OperationHistoryOrBuilder>
        getHistoryOrBuilderList();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        mahjong.mode.GameBase.OperationHistoryOrBuilder getHistoryOrBuilder(
                int index);

        /**
         * <code>.ResultResponse result = 3;</code>
         */
        boolean hasResult();

        /**
         * <code>.ResultResponse result = 3;</code>
         */
        mahjong.mode.Xingning.ResultResponse getResult();

        /**
         * <code>.ResultResponse result = 3;</code>
         */
        mahjong.mode.Xingning.ResultResponseOrBuilder getResultOrBuilder();
    }

    /**
     * <pre>
     * 游戏信息  GAME_INFO
     * </pre>
     * <p>
     * Protobuf type {@code GameInfo}
     */
    public static final class GameInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:GameInfo)
            GameInfoOrBuilder {
        public static final int GAMESTATUS_FIELD_NUMBER = 1;
        public static final int OPERATIONUSER_FIELD_NUMBER = 2;
        public static final int LASTOPERATIONUSER_FIELD_NUMBER = 3;
        public static final int SEATS_FIELD_NUMBER = 4;
        public static final int GAMECOUNT_FIELD_NUMBER = 5;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:GameInfo)
        private static final mahjong.mode.Xingning.GameInfo DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<GameInfo>
                PARSER = new com.google.protobuf.AbstractParser<GameInfo>() {
            public GameInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new GameInfo(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.GameInfo();
        }

        private int bitField0_;
        private int gameStatus_;
        private int operationUser_;
        private int lastOperationUser_;
        private java.util.List<mahjong.mode.Xingning.SeatGameInfo> seats_;
        private int gameCount_;
        private byte memoizedIsInitialized = -1;

        // Use GameInfo.newBuilder() to construct.
        private GameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private GameInfo() {
            gameStatus_ = 0;
            operationUser_ = 0;
            lastOperationUser_ = 0;
            seats_ = java.util.Collections.emptyList();
            gameCount_ = 0;
        }

        private GameInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            int rawValue = input.readEnum();

                            gameStatus_ = rawValue;
                            break;
                        }
                        case 16: {

                            operationUser_ = input.readUInt32();
                            break;
                        }
                        case 24: {

                            lastOperationUser_ = input.readUInt32();
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                seats_ = new java.util.ArrayList<mahjong.mode.Xingning.SeatGameInfo>();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            seats_.add(
                                    input.readMessage(mahjong.mode.Xingning.SeatGameInfo.parser(), extensionRegistry));
                            break;
                        }
                        case 40: {

                            gameCount_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    seats_ = java.util.Collections.unmodifiableList(seats_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_GameInfo_descriptor;
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static mahjong.mode.Xingning.GameInfo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

        public static mahjong.mode.Xingning.GameInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.GameInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.GameInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.GameInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<GameInfo> parser() {
      return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_GameInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.GameInfo.class, mahjong.mode.Xingning.GameInfo.Builder.class);
        }

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        public int getGameStatusValue() {
            return gameStatus_;
        }

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        public mahjong.mode.Xingning.GameStatus getGameStatus() {
            mahjong.mode.Xingning.GameStatus result = mahjong.mode.Xingning.GameStatus.valueOf(gameStatus_);
            return result == null ? mahjong.mode.Xingning.GameStatus.UNRECOGNIZED : result;
        }

        /**
         * <pre>
         * 当前操作的人
         * </pre>
         * <p>
         * <code>uint32 operationUser = 2;</code>
         */
        public int getOperationUser() {
            return operationUser_;
        }

        /**
         * <pre>
         * 上家出牌人
         * </pre>
         * <p>
         * <code>uint32 lastOperationUser = 3;</code>
         */
        public int getLastOperationUser() {
            return lastOperationUser_;
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        public java.util.List<mahjong.mode.Xingning.SeatGameInfo> getSeatsList() {
            return seats_;
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        public java.util.List<? extends mahjong.mode.Xingning.SeatGameInfoOrBuilder>
        getSeatsOrBuilderList() {
            return seats_;
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        public int getSeatsCount() {
            return seats_.size();
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        public mahjong.mode.Xingning.SeatGameInfo getSeats(int index) {
            return seats_.get(index);
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .SeatGameInfo seats = 4;</code>
         */
        public mahjong.mode.Xingning.SeatGameInfoOrBuilder getSeatsOrBuilder(
                int index) {
            return seats_.get(index);
        }

        /**
         * <pre>
         * 当前游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameCount = 5;</code>
         */
        public int getGameCount() {
            return gameCount_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (gameStatus_ != mahjong.mode.Xingning.GameStatus.WAITING.getNumber()) {
                output.writeEnum(1, gameStatus_);
            }
            if (operationUser_ != 0) {
                output.writeUInt32(2, operationUser_);
            }
            if (lastOperationUser_ != 0) {
                output.writeUInt32(3, lastOperationUser_);
            }
            for (int i = 0; i < seats_.size(); i++) {
                output.writeMessage(4, seats_.get(i));
            }
            if (gameCount_ != 0) {
                output.writeUInt32(5, gameCount_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (gameStatus_ != mahjong.mode.Xingning.GameStatus.WAITING.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(1, gameStatus_);
            }
            if (operationUser_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, operationUser_);
            }
            if (lastOperationUser_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, lastOperationUser_);
            }
            for (int i = 0; i < seats_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, seats_.get(i));
            }
            if (gameCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, gameCount_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.GameInfo)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.GameInfo other = (mahjong.mode.Xingning.GameInfo) obj;

            boolean result = true;
            result = result && gameStatus_ == other.gameStatus_;
            result = result && (getOperationUser()
                    == other.getOperationUser());
            result = result && (getLastOperationUser()
                    == other.getLastOperationUser());
            result = result && getSeatsList()
                    .equals(other.getSeatsList());
            result = result && (getGameCount()
                    == other.getGameCount());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + GAMESTATUS_FIELD_NUMBER;
            hash = (53 * hash) + gameStatus_;
            hash = (37 * hash) + OPERATIONUSER_FIELD_NUMBER;
            hash = (53 * hash) + getOperationUser();
            hash = (37 * hash) + LASTOPERATIONUSER_FIELD_NUMBER;
            hash = (53 * hash) + getLastOperationUser();
            if (getSeatsCount() > 0) {
                hash = (37 * hash) + SEATS_FIELD_NUMBER;
                hash = (53 * hash) + getSeatsList().hashCode();
            }
            hash = (37 * hash) + GAMECOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getGameCount();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<GameInfo> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.GameInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 游戏信息  GAME_INFO
         * </pre>
         * <p>
         * Protobuf type {@code GameInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:GameInfo)
                mahjong.mode.Xingning.GameInfoOrBuilder {
            private int bitField0_;
            private int gameStatus_ = 0;
            private int operationUser_;
            private int lastOperationUser_;
            private java.util.List<mahjong.mode.Xingning.SeatGameInfo> seats_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.SeatGameInfo, mahjong.mode.Xingning.SeatGameInfo.Builder, mahjong.mode.Xingning.SeatGameInfoOrBuilder> seatsBuilder_;
            private int gameCount_;

            // Construct using mahjong.mode.Xingning.GameInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_GameInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_GameInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.GameInfo.class, mahjong.mode.Xingning.GameInfo.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getSeatsFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                gameStatus_ = 0;

                operationUser_ = 0;

                lastOperationUser_ = 0;

                if (seatsBuilder_ == null) {
                    seats_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    seatsBuilder_.clear();
                }
                gameCount_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_GameInfo_descriptor;
            }

            public mahjong.mode.Xingning.GameInfo getDefaultInstanceForType() {
                return mahjong.mode.Xingning.GameInfo.getDefaultInstance();
            }

            public mahjong.mode.Xingning.GameInfo build() {
                mahjong.mode.Xingning.GameInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.GameInfo buildPartial() {
                mahjong.mode.Xingning.GameInfo result = new mahjong.mode.Xingning.GameInfo(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.gameStatus_ = gameStatus_;
                result.operationUser_ = operationUser_;
                result.lastOperationUser_ = lastOperationUser_;
                if (seatsBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008)) {
                        seats_ = java.util.Collections.unmodifiableList(seats_);
                        bitField0_ = (bitField0_ & ~0x00000008);
                    }
                    result.seats_ = seats_;
                } else {
                    result.seats_ = seatsBuilder_.build();
                }
                result.gameCount_ = gameCount_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.GameInfo) {
                    return mergeFrom((mahjong.mode.Xingning.GameInfo) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.GameInfo other) {
                if (other == mahjong.mode.Xingning.GameInfo.getDefaultInstance()) return this;
                if (other.gameStatus_ != 0) {
                    setGameStatusValue(other.getGameStatusValue());
                }
                if (other.getOperationUser() != 0) {
                    setOperationUser(other.getOperationUser());
                }
                if (other.getLastOperationUser() != 0) {
                    setLastOperationUser(other.getLastOperationUser());
                }
                if (seatsBuilder_ == null) {
                    if (!other.seats_.isEmpty()) {
                        if (seats_.isEmpty()) {
                            seats_ = other.seats_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                        } else {
                            ensureSeatsIsMutable();
                            seats_.addAll(other.seats_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.seats_.isEmpty()) {
                        if (seatsBuilder_.isEmpty()) {
                            seatsBuilder_.dispose();
                            seatsBuilder_ = null;
                            seats_ = other.seats_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                            seatsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getSeatsFieldBuilder() : null;
                        } else {
                            seatsBuilder_.addAllMessages(other.seats_);
                        }
                    }
                }
                if (other.getGameCount() != 0) {
                    setGameCount(other.getGameCount());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.GameInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.GameInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public int getGameStatusValue() {
                return gameStatus_;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public Builder setGameStatusValue(int value) {
                gameStatus_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public mahjong.mode.Xingning.GameStatus getGameStatus() {
                mahjong.mode.Xingning.GameStatus result = mahjong.mode.Xingning.GameStatus.valueOf(gameStatus_);
                return result == null ? mahjong.mode.Xingning.GameStatus.UNRECOGNIZED : result;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public Builder setGameStatus(mahjong.mode.Xingning.GameStatus value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                gameStatus_ = value.getNumber();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public Builder clearGameStatus() {

                gameStatus_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前操作的人
             * </pre>
             * <p>
             * <code>uint32 operationUser = 2;</code>
             */
            public int getOperationUser() {
                return operationUser_;
            }

            /**
             * <pre>
             * 当前操作的人
             * </pre>
             * <p>
             * <code>uint32 operationUser = 2;</code>
             */
            public Builder setOperationUser(int value) {

                operationUser_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前操作的人
             * </pre>
             * <p>
             * <code>uint32 operationUser = 2;</code>
             */
            public Builder clearOperationUser() {

                operationUser_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 上家出牌人
             * </pre>
             * <p>
             * <code>uint32 lastOperationUser = 3;</code>
             */
            public int getLastOperationUser() {
                return lastOperationUser_;
            }

            /**
             * <pre>
             * 上家出牌人
             * </pre>
             * <p>
             * <code>uint32 lastOperationUser = 3;</code>
             */
            public Builder setLastOperationUser(int value) {

                lastOperationUser_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 上家出牌人
             * </pre>
             * <p>
             * <code>uint32 lastOperationUser = 3;</code>
             */
            public Builder clearLastOperationUser() {

                lastOperationUser_ = 0;
                onChanged();
                return this;
            }

            private void ensureSeatsIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    seats_ = new java.util.ArrayList<mahjong.mode.Xingning.SeatGameInfo>(seats_);
                    bitField0_ |= 0x00000008;
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public java.util.List<mahjong.mode.Xingning.SeatGameInfo> getSeatsList() {
                if (seatsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(seats_);
                } else {
                    return seatsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public int getSeatsCount() {
                if (seatsBuilder_ == null) {
                    return seats_.size();
                } else {
                    return seatsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.SeatGameInfo getSeats(int index) {
                if (seatsBuilder_ == null) {
                    return seats_.get(index);
                } else {
                    return seatsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder setSeats(
                    int index, mahjong.mode.Xingning.SeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.set(index, value);
                    onChanged();
                } else {
                    seatsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder setSeats(
                    int index, mahjong.mode.Xingning.SeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(mahjong.mode.Xingning.SeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.add(value);
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(
                    int index, mahjong.mode.Xingning.SeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.add(index, value);
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(
                    mahjong.mode.Xingning.SeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.add(builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(
                    int index, mahjong.mode.Xingning.SeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder addAllSeats(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.SeatGameInfo> values) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, seats_);
                    onChanged();
                } else {
                    seatsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder clearSeats() {
                if (seatsBuilder_ == null) {
                    seats_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                    onChanged();
                } else {
                    seatsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public Builder removeSeats(int index) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.remove(index);
                    onChanged();
                } else {
                    seatsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.SeatGameInfo.Builder getSeatsBuilder(
                    int index) {
                return getSeatsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.SeatGameInfoOrBuilder getSeatsOrBuilder(
                    int index) {
                if (seatsBuilder_ == null) {
                    return seats_.get(index);
                } else {
                    return seatsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public java.util.List<? extends mahjong.mode.Xingning.SeatGameInfoOrBuilder>
            getSeatsOrBuilderList() {
                if (seatsBuilder_ != null) {
                    return seatsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(seats_);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.SeatGameInfo.Builder addSeatsBuilder() {
                return getSeatsFieldBuilder().addBuilder(
                        mahjong.mode.Xingning.SeatGameInfo.getDefaultInstance());
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.SeatGameInfo.Builder addSeatsBuilder(
                    int index) {
                return getSeatsFieldBuilder().addBuilder(
                        index, mahjong.mode.Xingning.SeatGameInfo.getDefaultInstance());
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .SeatGameInfo seats = 4;</code>
             */
            public java.util.List<mahjong.mode.Xingning.SeatGameInfo.Builder>
            getSeatsBuilderList() {
                return getSeatsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.SeatGameInfo, mahjong.mode.Xingning.SeatGameInfo.Builder, mahjong.mode.Xingning.SeatGameInfoOrBuilder>
            getSeatsFieldBuilder() {
                if (seatsBuilder_ == null) {
                    seatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Xingning.SeatGameInfo, mahjong.mode.Xingning.SeatGameInfo.Builder, mahjong.mode.Xingning.SeatGameInfoOrBuilder>(
                            seats_,
                            ((bitField0_ & 0x00000008) == 0x00000008),
                            getParentForChildren(),
                            isClean());
                    seats_ = null;
                }
                return seatsBuilder_;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 5;</code>
             */
            public int getGameCount() {
                return gameCount_;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 5;</code>
             */
            public Builder setGameCount(int value) {

                gameCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 5;</code>
             */
            public Builder clearGameCount() {

                gameCount_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:GameInfo)
        }

    }

    /**
     * <pre>
     * 玩家游戏信息
     * </pre>
     * <p>
     * Protobuf type {@code SeatGameInfo}
     */
    public static final class SeatGameInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:SeatGameInfo)
            SeatGameInfoOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int INITIALCARDS_FIELD_NUMBER = 2;
        public static final int CARDS_FIELD_NUMBER = 3;
        public static final int CARDSSIZE_FIELD_NUMBER = 4;
        public static final int PENGCARDS_FIELD_NUMBER = 5;
        public static final int GANGCARDS_FIELD_NUMBER = 6;
        public static final int CHICARDS_FIELD_NUMBER = 7;
        public static final int PLAYEDCARDS_FIELD_NUMBER = 8;
        public static final int ISROBOT_FIELD_NUMBER = 9;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:SeatGameInfo)
        private static final mahjong.mode.Xingning.SeatGameInfo DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<SeatGameInfo>
                PARSER = new com.google.protobuf.AbstractParser<SeatGameInfo>() {
            public SeatGameInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new SeatGameInfo(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.SeatGameInfo();
        }

        private int bitField0_;
        private int iD_;
        private java.util.List<java.lang.Integer> initialCards_;
        private int initialCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> cards_;
        private int cardsMemoizedSerializedSize = -1;
        private int cardsSize_;
        private java.util.List<java.lang.Integer> pengCards_;
        private int pengCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> gangCards_;
        private int gangCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> chiCards_;
        private int chiCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> playedCards_;
        private int playedCardsMemoizedSerializedSize = -1;
        private boolean isRobot_;
        private byte memoizedIsInitialized = -1;

        // Use SeatGameInfo.newBuilder() to construct.
        private SeatGameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private SeatGameInfo() {
            iD_ = 0;
            initialCards_ = java.util.Collections.emptyList();
            cards_ = java.util.Collections.emptyList();
            cardsSize_ = 0;
            pengCards_ = java.util.Collections.emptyList();
            gangCards_ = java.util.Collections.emptyList();
            chiCards_ = java.util.Collections.emptyList();
            playedCards_ = java.util.Collections.emptyList();
            isRobot_ = false;
        }

        private SeatGameInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            initialCards_.add(input.readUInt32());
                            break;
                        }
                        case 18: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                initialCards_.add(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 24: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            cards_.add(input.readUInt32());
                            break;
                        }
                        case 26: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                cards_.add(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 32: {

                            cardsSize_ = input.readUInt32();
                            break;
                        }
                        case 40: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            pengCards_.add(input.readUInt32());
                            break;
                        }
                        case 42: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                pengCards_.add(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 48: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            gangCards_.add(input.readUInt32());
                            break;
                        }
                        case 50: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                gangCards_.add(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 56: {
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            chiCards_.add(input.readUInt32());
                            break;
                        }
                        case 58: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                chiCards_.add(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 64: {
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            playedCards_.add(input.readUInt32());
                            break;
                        }
                        case 66: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                playedCards_.add(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 72: {

                            isRobot_ = input.readBool();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
                }
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                }
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                }
                if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
                }
                if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                    playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_SeatGameInfo_descriptor;
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
    }

    public static mahjong.mode.Xingning.SeatGameInfo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.SeatGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.SeatGameInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.SeatGameInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<SeatGameInfo> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_SeatGameInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
              mahjong.mode.Xingning.SeatGameInfo.class, mahjong.mode.Xingning.SeatGameInfo.Builder.class);
        }

        /**
         * <pre>
         * ID
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 initialCards = 2;</code>
         */
        public java.util.List<java.lang.Integer>
        getInitialCardsList() {
            return initialCards_;
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 initialCards = 2;</code>
         */
        public int getInitialCardsCount() {
            return initialCards_.size();
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 initialCards = 2;</code>
         */
        public int getInitialCards(int index) {
            return initialCards_.get(index);
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 cards = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return cards_;
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 cards = 3;</code>
         */
        public int getCardsCount() {
            return cards_.size();
        }

        /**
         * <pre>
         * 牌
         * </pre>
         * <p>
         * <code>repeated uint32 cards = 3;</code>
         */
        public int getCards(int index) {
            return cards_.get(index);
        }

        /**
         * <pre>
         * 牌数量
         * </pre>
         * <p>
         * <code>uint32 cardsSize = 4;</code>
         */
        public int getCardsSize() {
            return cardsSize_;
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated uint32 pengCards = 5;</code>
         */
        public java.util.List<java.lang.Integer>
        getPengCardsList() {
            return pengCards_;
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated uint32 pengCards = 5;</code>
         */
        public int getPengCardsCount() {
            return pengCards_.size();
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated uint32 pengCards = 5;</code>
         */
        public int getPengCards(int index) {
            return pengCards_.get(index);
        }

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 6;</code>
         */
        public java.util.List<java.lang.Integer>
        getGangCardsList() {
            return gangCards_;
        }

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 6;</code>
         */
        public int getGangCardsCount() {
            return gangCards_.size();
        }

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 6;</code>
         */
        public int getGangCards(int index) {
            return gangCards_.get(index);
        }

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated uint32 chiCards = 7;</code>
         */
        public java.util.List<java.lang.Integer>
        getChiCardsList() {
            return chiCards_;
        }

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated uint32 chiCards = 7;</code>
         */
        public int getChiCardsCount() {
            return chiCards_.size();
        }

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated uint32 chiCards = 7;</code>
         */
        public int getChiCards(int index) {
            return chiCards_.get(index);
        }

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated uint32 playedCards = 8;</code>
         */
        public java.util.List<java.lang.Integer>
        getPlayedCardsList() {
            return playedCards_;
        }

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated uint32 playedCards = 8;</code>
         */
        public int getPlayedCardsCount() {
            return playedCards_.size();
        }

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated uint32 playedCards = 8;</code>
         */
        public int getPlayedCards(int index) {
            return playedCards_.get(index);
        }

        /**
         * <pre>
         * 是否托管
         * </pre>
         * <p>
         * <code>bool isRobot = 9;</code>
         */
        public boolean getIsRobot() {
            return isRobot_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (getInitialCardsList().size() > 0) {
                output.writeUInt32NoTag(18);
                output.writeUInt32NoTag(initialCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < initialCards_.size(); i++) {
                output.writeUInt32NoTag(initialCards_.get(i));
            }
            if (getCardsList().size() > 0) {
                output.writeUInt32NoTag(26);
                output.writeUInt32NoTag(cardsMemoizedSerializedSize);
            }
            for (int i = 0; i < cards_.size(); i++) {
                output.writeUInt32NoTag(cards_.get(i));
            }
            if (cardsSize_ != 0) {
                output.writeUInt32(4, cardsSize_);
            }
            if (getPengCardsList().size() > 0) {
                output.writeUInt32NoTag(42);
                output.writeUInt32NoTag(pengCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < pengCards_.size(); i++) {
                output.writeUInt32NoTag(pengCards_.get(i));
            }
            if (getGangCardsList().size() > 0) {
                output.writeUInt32NoTag(50);
                output.writeUInt32NoTag(gangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < gangCards_.size(); i++) {
                output.writeUInt32NoTag(gangCards_.get(i));
            }
            if (getChiCardsList().size() > 0) {
                output.writeUInt32NoTag(58);
                output.writeUInt32NoTag(chiCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < chiCards_.size(); i++) {
                output.writeUInt32NoTag(chiCards_.get(i));
            }
            if (getPlayedCardsList().size() > 0) {
                output.writeUInt32NoTag(66);
                output.writeUInt32NoTag(playedCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < playedCards_.size(); i++) {
                output.writeUInt32NoTag(playedCards_.get(i));
            }
            if (isRobot_ != false) {
                output.writeBool(9, isRobot_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < initialCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(initialCards_.get(i));
                }
                size += dataSize;
                if (!getInitialCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                initialCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < cards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(cards_.get(i));
                }
                size += dataSize;
                if (!getCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                cardsMemoizedSerializedSize = dataSize;
            }
            if (cardsSize_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, cardsSize_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < pengCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(pengCards_.get(i));
                }
                size += dataSize;
                if (!getPengCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                pengCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < gangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(gangCards_.get(i));
                }
                size += dataSize;
                if (!getGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                gangCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < chiCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(chiCards_.get(i));
                }
                size += dataSize;
                if (!getChiCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                chiCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < playedCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(playedCards_.get(i));
                }
                size += dataSize;
                if (!getPlayedCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                playedCardsMemoizedSerializedSize = dataSize;
            }
            if (isRobot_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(9, isRobot_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.SeatGameInfo)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.SeatGameInfo other = (mahjong.mode.Xingning.SeatGameInfo) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && getInitialCardsList()
                    .equals(other.getInitialCardsList());
            result = result && getCardsList()
                    .equals(other.getCardsList());
            result = result && (getCardsSize()
                    == other.getCardsSize());
            result = result && getPengCardsList()
                    .equals(other.getPengCardsList());
            result = result && getGangCardsList()
                    .equals(other.getGangCardsList());
            result = result && getChiCardsList()
                    .equals(other.getChiCardsList());
            result = result && getPlayedCardsList()
                    .equals(other.getPlayedCardsList());
            result = result && (getIsRobot()
                    == other.getIsRobot());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            if (getInitialCardsCount() > 0) {
                hash = (37 * hash) + INITIALCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getInitialCardsList().hashCode();
            }
            if (getCardsCount() > 0) {
                hash = (37 * hash) + CARDS_FIELD_NUMBER;
                hash = (53 * hash) + getCardsList().hashCode();
            }
            hash = (37 * hash) + CARDSSIZE_FIELD_NUMBER;
            hash = (53 * hash) + getCardsSize();
            if (getPengCardsCount() > 0) {
                hash = (37 * hash) + PENGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getPengCardsList().hashCode();
            }
            if (getGangCardsCount() > 0) {
                hash = (37 * hash) + GANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getGangCardsList().hashCode();
            }
            if (getChiCardsCount() > 0) {
                hash = (37 * hash) + CHICARDS_FIELD_NUMBER;
                hash = (53 * hash) + getChiCardsList().hashCode();
            }
            if (getPlayedCardsCount() > 0) {
                hash = (37 * hash) + PLAYEDCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getPlayedCardsList().hashCode();
            }
            hash = (37 * hash) + ISROBOT_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getIsRobot());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<SeatGameInfo> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.SeatGameInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 玩家游戏信息
         * </pre>
         * <p>
         * Protobuf type {@code SeatGameInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:SeatGameInfo)
                mahjong.mode.Xingning.SeatGameInfoOrBuilder {
            private int bitField0_;
            private int iD_;
            private java.util.List<java.lang.Integer> initialCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
            private int cardsSize_;
            private java.util.List<java.lang.Integer> pengCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> gangCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> chiCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> playedCards_ = java.util.Collections.emptyList();
            private boolean isRobot_;

            // Construct using mahjong.mode.Xingning.SeatGameInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_SeatGameInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_SeatGameInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.SeatGameInfo.class, mahjong.mode.Xingning.SeatGameInfo.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                initialCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                cardsSize_ = 0;

                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000010);
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                playedCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                isRobot_ = false;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_SeatGameInfo_descriptor;
            }

            public mahjong.mode.Xingning.SeatGameInfo getDefaultInstanceForType() {
                return mahjong.mode.Xingning.SeatGameInfo.getDefaultInstance();
            }

            public mahjong.mode.Xingning.SeatGameInfo build() {
                mahjong.mode.Xingning.SeatGameInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.SeatGameInfo buildPartial() {
                mahjong.mode.Xingning.SeatGameInfo result = new mahjong.mode.Xingning.SeatGameInfo(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.iD_ = iD_;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.initialCards_ = initialCards_;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.cards_ = cards_;
                result.cardsSize_ = cardsSize_;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                    bitField0_ = (bitField0_ & ~0x00000010);
                }
                result.pengCards_ = pengCards_;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                    bitField0_ = (bitField0_ & ~0x00000020);
                }
                result.gangCards_ = gangCards_;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
                    bitField0_ = (bitField0_ & ~0x00000040);
                }
                result.chiCards_ = chiCards_;
                if (((bitField0_ & 0x00000080) == 0x00000080)) {
                    playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
                    bitField0_ = (bitField0_ & ~0x00000080);
                }
                result.playedCards_ = playedCards_;
                result.isRobot_ = isRobot_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.SeatGameInfo) {
                    return mergeFrom((mahjong.mode.Xingning.SeatGameInfo) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.SeatGameInfo other) {
                if (other == mahjong.mode.Xingning.SeatGameInfo.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (!other.initialCards_.isEmpty()) {
                    if (initialCards_.isEmpty()) {
                        initialCards_ = other.initialCards_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureInitialCardsIsMutable();
                        initialCards_.addAll(other.initialCards_);
                    }
                    onChanged();
                }
                if (!other.cards_.isEmpty()) {
                    if (cards_.isEmpty()) {
                        cards_ = other.cards_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureCardsIsMutable();
                        cards_.addAll(other.cards_);
                    }
                    onChanged();
                }
                if (other.getCardsSize() != 0) {
                    setCardsSize(other.getCardsSize());
                }
                if (!other.pengCards_.isEmpty()) {
                    if (pengCards_.isEmpty()) {
                        pengCards_ = other.pengCards_;
                        bitField0_ = (bitField0_ & ~0x00000010);
                    } else {
                        ensurePengCardsIsMutable();
                        pengCards_.addAll(other.pengCards_);
                    }
                    onChanged();
                }
                if (!other.gangCards_.isEmpty()) {
                    if (gangCards_.isEmpty()) {
                        gangCards_ = other.gangCards_;
                        bitField0_ = (bitField0_ & ~0x00000020);
                    } else {
                        ensureGangCardsIsMutable();
                        gangCards_.addAll(other.gangCards_);
                    }
                    onChanged();
                }
                if (!other.chiCards_.isEmpty()) {
                    if (chiCards_.isEmpty()) {
                        chiCards_ = other.chiCards_;
                        bitField0_ = (bitField0_ & ~0x00000040);
                    } else {
                        ensureChiCardsIsMutable();
                        chiCards_.addAll(other.chiCards_);
                    }
                    onChanged();
                }
                if (!other.playedCards_.isEmpty()) {
                    if (playedCards_.isEmpty()) {
                        playedCards_ = other.playedCards_;
                        bitField0_ = (bitField0_ & ~0x00000080);
                    } else {
                        ensurePlayedCardsIsMutable();
                        playedCards_.addAll(other.playedCards_);
                    }
                    onChanged();
                }
                if (other.getIsRobot() != false) {
                    setIsRobot(other.getIsRobot());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.SeatGameInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.SeatGameInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            private void ensureInitialCardsIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = new java.util.ArrayList<java.lang.Integer>(initialCards_);
                    bitField0_ |= 0x00000002;
                }
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 initialCards = 2;</code>
             */
            public java.util.List<java.lang.Integer>
            getInitialCardsList() {
                return java.util.Collections.unmodifiableList(initialCards_);
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 initialCards = 2;</code>
             */
            public int getInitialCardsCount() {
                return initialCards_.size();
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 initialCards = 2;</code>
             */
            public int getInitialCards(int index) {
                return initialCards_.get(index);
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 initialCards = 2;</code>
             */
            public Builder setInitialCards(
                    int index, int value) {
                ensureInitialCardsIsMutable();
                initialCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 initialCards = 2;</code>
             */
            public Builder addInitialCards(int value) {
                ensureInitialCardsIsMutable();
                initialCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 initialCards = 2;</code>
             */
            public Builder addAllInitialCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureInitialCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, initialCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 initialCards = 2;</code>
             */
            public Builder clearInitialCards() {
                initialCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
                return this;
            }

            private void ensureCardsIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
                    bitField0_ |= 0x00000004;
                }
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 cards = 3;</code>
             */
            public java.util.List<java.lang.Integer>
            getCardsList() {
                return java.util.Collections.unmodifiableList(cards_);
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 cards = 3;</code>
             */
            public int getCardsCount() {
                return cards_.size();
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 cards = 3;</code>
             */
            public int getCards(int index) {
                return cards_.get(index);
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 cards = 3;</code>
             */
            public Builder setCards(
                    int index, int value) {
                ensureCardsIsMutable();
                cards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 cards = 3;</code>
             */
            public Builder addCards(int value) {
                ensureCardsIsMutable();
                cards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 cards = 3;</code>
             */
            public Builder addAllCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, cards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌
             * </pre>
             *
             * <code>repeated uint32 cards = 3;</code>
             */
            public Builder clearCards() {
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌数量
             * </pre>
             *
             * <code>uint32 cardsSize = 4;</code>
             */
            public int getCardsSize() {
                return cardsSize_;
            }

            /**
             * <pre>
             *牌数量
             * </pre>
             *
             * <code>uint32 cardsSize = 4;</code>
             */
            public Builder setCardsSize(int value) {

                cardsSize_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌数量
             * </pre>
             *
             * <code>uint32 cardsSize = 4;</code>
             */
            public Builder clearCardsSize() {

                cardsSize_ = 0;
                onChanged();
                return this;
            }

            private void ensurePengCardsIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = new java.util.ArrayList<java.lang.Integer>(pengCards_);
                    bitField0_ |= 0x00000010;
                }
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated uint32 pengCards = 5;</code>
             */
            public java.util.List<java.lang.Integer>
            getPengCardsList() {
                return java.util.Collections.unmodifiableList(pengCards_);
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated uint32 pengCards = 5;</code>
             */
            public int getPengCardsCount() {
                return pengCards_.size();
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated uint32 pengCards = 5;</code>
             */
            public int getPengCards(int index) {
                return pengCards_.get(index);
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated uint32 pengCards = 5;</code>
             */
            public Builder setPengCards(
                    int index, int value) {
                ensurePengCardsIsMutable();
                pengCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated uint32 pengCards = 5;</code>
             */
            public Builder addPengCards(int value) {
                ensurePengCardsIsMutable();
                pengCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated uint32 pengCards = 5;</code>
             */
            public Builder addAllPengCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensurePengCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, pengCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated uint32 pengCards = 5;</code>
             */
            public Builder clearPengCards() {
                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000010);
                onChanged();
                return this;
            }

            private void ensureGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    gangCards_ = new java.util.ArrayList<java.lang.Integer>(gangCards_);
                    bitField0_ |= 0x00000020;
                }
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 6;</code>
             */
            public java.util.List<java.lang.Integer>
            getGangCardsList() {
                return java.util.Collections.unmodifiableList(gangCards_);
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 6;</code>
             */
            public int getGangCardsCount() {
                return gangCards_.size();
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 6;</code>
             */
            public int getGangCards(int index) {
                return gangCards_.get(index);
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 6;</code>
             */
            public Builder setGangCards(
                    int index, int value) {
                ensureGangCardsIsMutable();
                gangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 6;</code>
             */
            public Builder addGangCards(int value) {
                ensureGangCardsIsMutable();
                gangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 6;</code>
             */
            public Builder addAllGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, gangCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 6;</code>
             */
            public Builder clearGangCards() {
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                onChanged();
                return this;
            }

            private void ensureChiCardsIsMutable() {
                if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = new java.util.ArrayList<java.lang.Integer>(chiCards_);
                    bitField0_ |= 0x00000040;
                }
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated uint32 chiCards = 7;</code>
             */
            public java.util.List<java.lang.Integer>
            getChiCardsList() {
                return java.util.Collections.unmodifiableList(chiCards_);
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated uint32 chiCards = 7;</code>
             */
            public int getChiCardsCount() {
                return chiCards_.size();
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated uint32 chiCards = 7;</code>
             */
            public int getChiCards(int index) {
                return chiCards_.get(index);
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated uint32 chiCards = 7;</code>
             */
            public Builder setChiCards(
                    int index, int value) {
                ensureChiCardsIsMutable();
                chiCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated uint32 chiCards = 7;</code>
             */
            public Builder addChiCards(int value) {
                ensureChiCardsIsMutable();
                chiCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated uint32 chiCards = 7;</code>
             */
            public Builder addAllChiCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureChiCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, chiCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated uint32 chiCards = 7;</code>
             */
            public Builder clearChiCards() {
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                onChanged();
                return this;
            }

            private void ensurePlayedCardsIsMutable() {
                if (!((bitField0_ & 0x00000080) == 0x00000080)) {
                    playedCards_ = new java.util.ArrayList<java.lang.Integer>(playedCards_);
                    bitField0_ |= 0x00000080;
                }
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated uint32 playedCards = 8;</code>
             */
            public java.util.List<java.lang.Integer>
            getPlayedCardsList() {
                return java.util.Collections.unmodifiableList(playedCards_);
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated uint32 playedCards = 8;</code>
             */
            public int getPlayedCardsCount() {
                return playedCards_.size();
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated uint32 playedCards = 8;</code>
             */
            public int getPlayedCards(int index) {
                return playedCards_.get(index);
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated uint32 playedCards = 8;</code>
             */
            public Builder setPlayedCards(
                    int index, int value) {
                ensurePlayedCardsIsMutable();
                playedCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated uint32 playedCards = 8;</code>
             */
            public Builder addPlayedCards(int value) {
                ensurePlayedCardsIsMutable();
                playedCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated uint32 playedCards = 8;</code>
             */
            public Builder addAllPlayedCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensurePlayedCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, playedCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated uint32 playedCards = 8;</code>
             */
            public Builder clearPlayedCards() {
                playedCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 是否托管
             * </pre>
             * <p>
             * <code>bool isRobot = 9;</code>
             */
            public boolean getIsRobot() {
                return isRobot_;
            }

            /**
             * <pre>
             * 是否托管
             * </pre>
             * <p>
             * <code>bool isRobot = 9;</code>
             */
            public Builder setIsRobot(boolean value) {

                isRobot_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 是否托管
             * </pre>
             * <p>
             * <code>bool isRobot = 9;</code>
             */
            public Builder clearIsRobot() {

                isRobot_ = false;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:SeatGameInfo)
        }

    }

    /**
     * <pre>
     * 当局游戏结果 RESULT
     * </pre>
     * <p>
     * Protobuf type {@code ResultResponse}
     */
    public static final class ResultResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:ResultResponse)
            ResultResponseOrBuilder {
        public static final int USERRESULT_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:ResultResponse)
        private static final mahjong.mode.Xingning.ResultResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<ResultResponse>
                PARSER = new com.google.protobuf.AbstractParser<ResultResponse>() {
            public ResultResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ResultResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.ResultResponse();
        }

        private java.util.List<mahjong.mode.Xingning.UserResult> userResult_;
        private byte memoizedIsInitialized = -1;

        // Use ResultResponse.newBuilder() to construct.
        private ResultResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ResultResponse() {
            userResult_ = java.util.Collections.emptyList();
        }

        private ResultResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                userResult_ = new java.util.ArrayList<mahjong.mode.Xingning.UserResult>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            userResult_.add(
                                    input.readMessage(mahjong.mode.Xingning.UserResult.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    userResult_ = java.util.Collections.unmodifiableList(userResult_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_ResultResponse_descriptor;
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ResultResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.ResultResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.ResultResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.ResultResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.ResultResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<ResultResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_ResultResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.ResultResponse.class, mahjong.mode.Xingning.ResultResponse.Builder.class);
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        public java.util.List<mahjong.mode.Xingning.UserResult> getUserResultList() {
            return userResult_;
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        public java.util.List<? extends mahjong.mode.Xingning.UserResultOrBuilder>
        getUserResultOrBuilderList() {
            return userResult_;
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        public int getUserResultCount() {
            return userResult_.size();
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        public mahjong.mode.Xingning.UserResult getUserResult(int index) {
            return userResult_.get(index);
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .UserResult userResult = 1;</code>
         */
        public mahjong.mode.Xingning.UserResultOrBuilder getUserResultOrBuilder(
                int index) {
            return userResult_.get(index);
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < userResult_.size(); i++) {
                output.writeMessage(1, userResult_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < userResult_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, userResult_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.ResultResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.ResultResponse other = (mahjong.mode.Xingning.ResultResponse) obj;

            boolean result = true;
            result = result && getUserResultList()
                    .equals(other.getUserResultList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getUserResultCount() > 0) {
                hash = (37 * hash) + USERRESULT_FIELD_NUMBER;
                hash = (53 * hash) + getUserResultList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ResultResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.ResultResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 当局游戏结果 RESULT
         * </pre>
         * <p>
         * Protobuf type {@code ResultResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:ResultResponse)
                mahjong.mode.Xingning.ResultResponseOrBuilder {
            private int bitField0_;
            private java.util.List<mahjong.mode.Xingning.UserResult> userResult_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.UserResult, mahjong.mode.Xingning.UserResult.Builder, mahjong.mode.Xingning.UserResultOrBuilder> userResultBuilder_;

            // Construct using mahjong.mode.Xingning.ResultResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_ResultResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_ResultResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.ResultResponse.class, mahjong.mode.Xingning.ResultResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getUserResultFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (userResultBuilder_ == null) {
                    userResult_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    userResultBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_ResultResponse_descriptor;
            }

            public mahjong.mode.Xingning.ResultResponse getDefaultInstanceForType() {
                return mahjong.mode.Xingning.ResultResponse.getDefaultInstance();
            }

            public mahjong.mode.Xingning.ResultResponse build() {
                mahjong.mode.Xingning.ResultResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.ResultResponse buildPartial() {
                mahjong.mode.Xingning.ResultResponse result = new mahjong.mode.Xingning.ResultResponse(this);
                int from_bitField0_ = bitField0_;
                if (userResultBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        userResult_ = java.util.Collections.unmodifiableList(userResult_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.userResult_ = userResult_;
                } else {
                    result.userResult_ = userResultBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.ResultResponse) {
                    return mergeFrom((mahjong.mode.Xingning.ResultResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.ResultResponse other) {
                if (other == mahjong.mode.Xingning.ResultResponse.getDefaultInstance()) return this;
                if (userResultBuilder_ == null) {
                    if (!other.userResult_.isEmpty()) {
                        if (userResult_.isEmpty()) {
                            userResult_ = other.userResult_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureUserResultIsMutable();
                            userResult_.addAll(other.userResult_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.userResult_.isEmpty()) {
                        if (userResultBuilder_.isEmpty()) {
                            userResultBuilder_.dispose();
                            userResultBuilder_ = null;
                            userResult_ = other.userResult_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            userResultBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getUserResultFieldBuilder() : null;
                        } else {
                            userResultBuilder_.addAllMessages(other.userResult_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.ResultResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.ResultResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureUserResultIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    userResult_ = new java.util.ArrayList<mahjong.mode.Xingning.UserResult>(userResult_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.UserResult> getUserResultList() {
                if (userResultBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(userResult_);
                } else {
                    return userResultBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public int getUserResultCount() {
                if (userResultBuilder_ == null) {
                    return userResult_.size();
                } else {
                    return userResultBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.UserResult getUserResult(int index) {
                if (userResultBuilder_ == null) {
                    return userResult_.get(index);
                } else {
                    return userResultBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder setUserResult(
                    int index, mahjong.mode.Xingning.UserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.set(index, value);
                    onChanged();
                } else {
                    userResultBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder setUserResult(
                    int index, mahjong.mode.Xingning.UserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder addUserResult(mahjong.mode.Xingning.UserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.add(value);
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    int index, mahjong.mode.Xingning.UserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.add(index, value);
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    mahjong.mode.Xingning.UserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.add(builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    int index, mahjong.mode.Xingning.UserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder addAllUserResult(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.UserResult> values) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, userResult_);
                    onChanged();
                } else {
                    userResultBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder clearUserResult() {
                if (userResultBuilder_ == null) {
                    userResult_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    userResultBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public Builder removeUserResult(int index) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.remove(index);
                    onChanged();
                } else {
                    userResultBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.UserResult.Builder getUserResultBuilder(
                    int index) {
                return getUserResultFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.UserResultOrBuilder getUserResultOrBuilder(
                    int index) {
                if (userResultBuilder_ == null) {
                    return userResult_.get(index);
                } else {
                    return userResultBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public java.util.List<? extends mahjong.mode.Xingning.UserResultOrBuilder>
            getUserResultOrBuilderList() {
                if (userResultBuilder_ != null) {
                    return userResultBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(userResult_);
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.UserResult.Builder addUserResultBuilder() {
                return getUserResultFieldBuilder().addBuilder(
                        mahjong.mode.Xingning.UserResult.getDefaultInstance());
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.UserResult.Builder addUserResultBuilder(
                    int index) {
                return getUserResultFieldBuilder().addBuilder(
                        index, mahjong.mode.Xingning.UserResult.getDefaultInstance());
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .UserResult userResult = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.UserResult.Builder>
            getUserResultBuilderList() {
                return getUserResultFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.UserResult, mahjong.mode.Xingning.UserResult.Builder, mahjong.mode.Xingning.UserResultOrBuilder>
            getUserResultFieldBuilder() {
                if (userResultBuilder_ == null) {
                    userResultBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Xingning.UserResult, mahjong.mode.Xingning.UserResult.Builder, mahjong.mode.Xingning.UserResultOrBuilder>(
                            userResult_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    userResult_ = null;
                }
                return userResultBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:ResultResponse)
        }

    }

    /**
     * <pre>
     * 单个人结算
     * </pre>
     * <p>
     * Protobuf type {@code UserResult}
     */
    public static final class UserResult extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:UserResult)
            UserResultOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int CARDSCORE_FIELD_NUMBER = 2;
        public static final int SCORETYPES_FIELD_NUMBER = 3;
        public static final int GANGSCORE_FIELD_NUMBER = 4;
        public static final int MASCORE_FIELD_NUMBER = 5;
        public static final int CARDS_FIELD_NUMBER = 6;
        public static final int GANGCARDS_FIELD_NUMBER = 7;
        public static final int WINORLOSE_FIELD_NUMBER = 8;
        public static final int SCORE_FIELD_NUMBER = 9;
        private static final com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, mahjong.mode.Xingning.ScoreType> scoreTypes_converter_ =
                new com.google.protobuf.Internal.ListAdapter.Converter<
                        java.lang.Integer, mahjong.mode.Xingning.ScoreType>() {
                    public mahjong.mode.Xingning.ScoreType convert(java.lang.Integer from) {
                        mahjong.mode.Xingning.ScoreType result = mahjong.mode.Xingning.ScoreType.valueOf(from);
                        return result == null ? mahjong.mode.Xingning.ScoreType.UNRECOGNIZED : result;
                    }
                };
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:UserResult)
        private static final mahjong.mode.Xingning.UserResult DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<UserResult>
                PARSER = new com.google.protobuf.AbstractParser<UserResult>() {
            public UserResult parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new UserResult(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.UserResult();
        }

        private int bitField0_;
        private int iD_;
        private int cardScore_;
        private java.util.List<java.lang.Integer> scoreTypes_;
        private int scoreTypesMemoizedSerializedSize;
        private int gangScore_;
        private int maScore_;
        private java.util.List<java.lang.Integer> cards_;
        private int cardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> gangCards_;
        private int gangCardsMemoizedSerializedSize = -1;
        private int winOrLose_;
        private int score_;
        private byte memoizedIsInitialized = -1;

        // Use UserResult.newBuilder() to construct.
        private UserResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private UserResult() {
            iD_ = 0;
            cardScore_ = 0;
            scoreTypes_ = java.util.Collections.emptyList();
            gangScore_ = 0;
            maScore_ = 0;
            cards_ = java.util.Collections.emptyList();
            gangCards_ = java.util.Collections.emptyList();
            winOrLose_ = 0;
            score_ = 0;
        }

        private UserResult(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {

                            cardScore_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            scoreTypes_.add(rawValue);
                            break;
                        }
                        case 26: {
                            int length = input.readRawVarint32();
                            int oldLimit = input.pushLimit(length);
                            while (input.getBytesUntilLimit() > 0) {
                                int rawValue = input.readEnum();
                                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                    scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                                    mutable_bitField0_ |= 0x00000004;
                                }
                                scoreTypes_.add(rawValue);
                            }
                            input.popLimit(oldLimit);
                            break;
                        }
                        case 32: {

                            gangScore_ = input.readInt32();
                            break;
                        }
                        case 40: {

                            maScore_ = input.readInt32();
                            break;
                        }
                        case 48: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            cards_.add(input.readUInt32());
                            break;
                        }
                        case 50: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                cards_.add(input.readUInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 56: {
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            gangCards_.add(input.readUInt32());
                            break;
                        }
                        case 58: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                gangCards_.add(input.readUInt32());
              }
                            input.popLimit(limit);
                            break;
                        }
                        case 64: {

                            winOrLose_ = input.readInt32();
                            break;
                        }
                        case 72: {

                            score_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                }
                if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_UserResult_descriptor;
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.UserResult parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.UserResult parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.UserResult parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.UserResult prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.UserResult getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<UserResult> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_UserResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.UserResult.class, mahjong.mode.Xingning.UserResult.Builder.class);
        }

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         * 牌型输赢
         * </pre>
         * <p>
         * <code>int32 cardScore = 2;</code>
         */
        public int getCardScore() {
            return cardScore_;
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public java.util.List<mahjong.mode.Xingning.ScoreType> getScoreTypesList() {
            return new com.google.protobuf.Internal.ListAdapter<
                    java.lang.Integer, mahjong.mode.Xingning.ScoreType>(scoreTypes_, scoreTypes_converter_);
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public int getScoreTypesCount() {
            return scoreTypes_.size();
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public mahjong.mode.Xingning.ScoreType getScoreTypes(int index) {
            return scoreTypes_converter_.convert(scoreTypes_.get(index));
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getScoreTypesValueList() {
            return scoreTypes_;
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public int getScoreTypesValue(int index) {
            return scoreTypes_.get(index);
        }

        /**
         * <pre>
         * 杠牌输赢
         * </pre>
         * <p>
         * <code>int32 gangScore = 4;</code>
         */
        public int getGangScore() {
            return gangScore_;
        }

        /**
         * <pre>
         * 卖马输赢
         * </pre>
         * <p>
         * <code>int32 maScore = 5;</code>
         */
        public int getMaScore() {
            return maScore_;
        }

        /**
         * <code>repeated uint32 cards = 6;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return cards_;
        }

        /**
         * <code>repeated uint32 cards = 6;</code>
         */
        public int getCardsCount() {
            return cards_.size();
        }

        /**
         * <code>repeated uint32 cards = 6;</code>
         */
        public int getCards(int index) {
            return cards_.get(index);
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 7;</code>
         */
        public java.util.List<java.lang.Integer>
        getGangCardsList() {
            return gangCards_;
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 7;</code>
         */
        public int getGangCardsCount() {
            return gangCards_.size();
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated uint32 gangCards = 7;</code>
         */
        public int getGangCards(int index) {
            return gangCards_.get(index);
        }

        /**
         * <pre>
         * 当局输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 8;</code>
         */
        public int getWinOrLose() {
            return winOrLose_;
        }

        /**
         * <pre>
         * 总输赢分数
         * </pre>
         * <p>
         * <code>int32 score = 9;</code>
         */
        public int getScore() {
            return score_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (cardScore_ != 0) {
                output.writeInt32(2, cardScore_);
            }
            if (getScoreTypesList().size() > 0) {
                output.writeUInt32NoTag(26);
                output.writeUInt32NoTag(scoreTypesMemoizedSerializedSize);
            }
            for (int i = 0; i < scoreTypes_.size(); i++) {
                output.writeEnumNoTag(scoreTypes_.get(i));
            }
            if (gangScore_ != 0) {
                output.writeInt32(4, gangScore_);
            }
            if (maScore_ != 0) {
                output.writeInt32(5, maScore_);
            }
            if (getCardsList().size() > 0) {
                output.writeUInt32NoTag(50);
                output.writeUInt32NoTag(cardsMemoizedSerializedSize);
            }
            for (int i = 0; i < cards_.size(); i++) {
                output.writeUInt32NoTag(cards_.get(i));
            }
            if (getGangCardsList().size() > 0) {
                output.writeUInt32NoTag(58);
                output.writeUInt32NoTag(gangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < gangCards_.size(); i++) {
                output.writeUInt32NoTag(gangCards_.get(i));
            }
            if (winOrLose_ != 0) {
                output.writeInt32(8, winOrLose_);
            }
            if (score_ != 0) {
                output.writeInt32(9, score_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            if (cardScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, cardScore_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < scoreTypes_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeEnumSizeNoTag(scoreTypes_.get(i));
                }
                size += dataSize;
                if (!getScoreTypesList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(dataSize);
                }
                scoreTypesMemoizedSerializedSize = dataSize;
            }
            if (gangScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, gangScore_);
            }
            if (maScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(5, maScore_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < cards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(cards_.get(i));
                }
                size += dataSize;
                if (!getCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                cardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < gangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(gangCards_.get(i));
                }
                size += dataSize;
                if (!getGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                gangCardsMemoizedSerializedSize = dataSize;
            }
            if (winOrLose_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(8, winOrLose_);
            }
            if (score_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(9, score_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.UserResult)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.UserResult other = (mahjong.mode.Xingning.UserResult) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && (getCardScore()
                    == other.getCardScore());
            result = result && scoreTypes_.equals(other.scoreTypes_);
            result = result && (getGangScore()
                    == other.getGangScore());
            result = result && (getMaScore()
                    == other.getMaScore());
            result = result && getCardsList()
                    .equals(other.getCardsList());
            result = result && getGangCardsList()
                    .equals(other.getGangCardsList());
            result = result && (getWinOrLose()
                    == other.getWinOrLose());
            result = result && (getScore()
                    == other.getScore());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            hash = (37 * hash) + CARDSCORE_FIELD_NUMBER;
            hash = (53 * hash) + getCardScore();
            if (getScoreTypesCount() > 0) {
                hash = (37 * hash) + SCORETYPES_FIELD_NUMBER;
                hash = (53 * hash) + scoreTypes_.hashCode();
            }
            hash = (37 * hash) + GANGSCORE_FIELD_NUMBER;
            hash = (53 * hash) + getGangScore();
            hash = (37 * hash) + MASCORE_FIELD_NUMBER;
            hash = (53 * hash) + getMaScore();
            if (getCardsCount() > 0) {
                hash = (37 * hash) + CARDS_FIELD_NUMBER;
                hash = (53 * hash) + getCardsList().hashCode();
            }
            if (getGangCardsCount() > 0) {
                hash = (37 * hash) + GANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getGangCardsList().hashCode();
            }
            hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
            hash = (53 * hash) + getWinOrLose();
            hash = (37 * hash) + SCORE_FIELD_NUMBER;
            hash = (53 * hash) + getScore();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<UserResult> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.UserResult getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 单个人结算
         * </pre>
         * <p>
         * Protobuf type {@code UserResult}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:UserResult)
                mahjong.mode.Xingning.UserResultOrBuilder {
            private int bitField0_;
            private int iD_;
            private int cardScore_;
            private java.util.List<java.lang.Integer> scoreTypes_ =
                    java.util.Collections.emptyList();
            private int gangScore_;
            private int maScore_;
            private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> gangCards_ = java.util.Collections.emptyList();
            private int winOrLose_;
            private int score_;

            // Construct using mahjong.mode.Xingning.UserResult.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_UserResult_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_UserResult_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.UserResult.class, mahjong.mode.Xingning.UserResult.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                cardScore_ = 0;

                scoreTypes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                gangScore_ = 0;

                maScore_ = 0;

                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                winOrLose_ = 0;

                score_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_UserResult_descriptor;
            }

            public mahjong.mode.Xingning.UserResult getDefaultInstanceForType() {
                return mahjong.mode.Xingning.UserResult.getDefaultInstance();
            }

            public mahjong.mode.Xingning.UserResult build() {
                mahjong.mode.Xingning.UserResult result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.UserResult buildPartial() {
                mahjong.mode.Xingning.UserResult result = new mahjong.mode.Xingning.UserResult(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.iD_ = iD_;
                result.cardScore_ = cardScore_;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.scoreTypes_ = scoreTypes_;
                result.gangScore_ = gangScore_;
                result.maScore_ = maScore_;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                    bitField0_ = (bitField0_ & ~0x00000020);
                }
                result.cards_ = cards_;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                    bitField0_ = (bitField0_ & ~0x00000040);
                }
                result.gangCards_ = gangCards_;
                result.winOrLose_ = winOrLose_;
                result.score_ = score_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.UserResult) {
                    return mergeFrom((mahjong.mode.Xingning.UserResult) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.UserResult other) {
                if (other == mahjong.mode.Xingning.UserResult.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (other.getCardScore() != 0) {
                    setCardScore(other.getCardScore());
                }
                if (!other.scoreTypes_.isEmpty()) {
                    if (scoreTypes_.isEmpty()) {
                        scoreTypes_ = other.scoreTypes_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureScoreTypesIsMutable();
                        scoreTypes_.addAll(other.scoreTypes_);
                    }
                    onChanged();
                }
                if (other.getGangScore() != 0) {
                    setGangScore(other.getGangScore());
                }
                if (other.getMaScore() != 0) {
                    setMaScore(other.getMaScore());
                }
                if (!other.cards_.isEmpty()) {
                    if (cards_.isEmpty()) {
                        cards_ = other.cards_;
                        bitField0_ = (bitField0_ & ~0x00000020);
                    } else {
                        ensureCardsIsMutable();
                        cards_.addAll(other.cards_);
                    }
                    onChanged();
                }
                if (!other.gangCards_.isEmpty()) {
                    if (gangCards_.isEmpty()) {
                        gangCards_ = other.gangCards_;
                        bitField0_ = (bitField0_ & ~0x00000040);
                    } else {
                        ensureGangCardsIsMutable();
                        gangCards_.addAll(other.gangCards_);
                    }
                    onChanged();
                }
                if (other.getWinOrLose() != 0) {
                    setWinOrLose(other.getWinOrLose());
                }
                if (other.getScore() != 0) {
                    setScore(other.getScore());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.UserResult parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.UserResult) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public int getCardScore() {
                return cardScore_;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public Builder setCardScore(int value) {

                cardScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public Builder clearCardScore() {

                cardScore_ = 0;
                onChanged();
                return this;
            }

            private void ensureScoreTypesIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = new java.util.ArrayList<java.lang.Integer>(scoreTypes_);
                    bitField0_ |= 0x00000004;
                }
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public java.util.List<mahjong.mode.Xingning.ScoreType> getScoreTypesList() {
                return new com.google.protobuf.Internal.ListAdapter<
                        java.lang.Integer, mahjong.mode.Xingning.ScoreType>(scoreTypes_, scoreTypes_converter_);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public int getScoreTypesCount() {
                return scoreTypes_.size();
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public mahjong.mode.Xingning.ScoreType getScoreTypes(int index) {
                return scoreTypes_converter_.convert(scoreTypes_.get(index));
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder setScoreTypes(
                    int index, mahjong.mode.Xingning.ScoreType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureScoreTypesIsMutable();
                scoreTypes_.set(index, value.getNumber());
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addScoreTypes(mahjong.mode.Xingning.ScoreType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureScoreTypesIsMutable();
                scoreTypes_.add(value.getNumber());
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addAllScoreTypes(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.ScoreType> values) {
                ensureScoreTypesIsMutable();
                for (mahjong.mode.Xingning.ScoreType value : values) {
                    scoreTypes_.add(value.getNumber());
                }
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder clearScoreTypes() {
                scoreTypes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public java.util.List<java.lang.Integer>
            getScoreTypesValueList() {
                return java.util.Collections.unmodifiableList(scoreTypes_);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public int getScoreTypesValue(int index) {
                return scoreTypes_.get(index);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder setScoreTypesValue(
                    int index, int value) {
                ensureScoreTypesIsMutable();
                scoreTypes_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addScoreTypesValue(int value) {
                ensureScoreTypesIsMutable();
                scoreTypes_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addAllScoreTypesValue(
                    java.lang.Iterable<java.lang.Integer> values) {
                ensureScoreTypesIsMutable();
                for (int value : values) {
                    scoreTypes_.add(value);
                }
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public int getGangScore() {
                return gangScore_;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public Builder setGangScore(int value) {

                gangScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public Builder clearGangScore() {

                gangScore_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public int getMaScore() {
                return maScore_;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public Builder setMaScore(int value) {

                maScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public Builder clearMaScore() {

                maScore_ = 0;
                onChanged();
                return this;
            }

            private void ensureCardsIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
                    bitField0_ |= 0x00000020;
                }
            }

            /**
             * <code>repeated uint32 cards = 6;</code>
             */
            public java.util.List<java.lang.Integer>
            getCardsList() {
                return java.util.Collections.unmodifiableList(cards_);
            }

            /**
             * <code>repeated uint32 cards = 6;</code>
             */
            public int getCardsCount() {
                return cards_.size();
            }

            /**
             * <code>repeated uint32 cards = 6;</code>
             */
            public int getCards(int index) {
                return cards_.get(index);
            }

            /**
             * <code>repeated uint32 cards = 6;</code>
             */
            public Builder setCards(
                    int index, int value) {
                ensureCardsIsMutable();
                cards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <code>repeated uint32 cards = 6;</code>
             */
            public Builder addCards(int value) {
                ensureCardsIsMutable();
                cards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <code>repeated uint32 cards = 6;</code>
             */
            public Builder addAllCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, cards_);
                onChanged();
                return this;
            }

            /**
             * <code>repeated uint32 cards = 6;</code>
             */
            public Builder clearCards() {
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                onChanged();
                return this;
            }

            private void ensureGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                    gangCards_ = new java.util.ArrayList<java.lang.Integer>(gangCards_);
                    bitField0_ |= 0x00000040;
                }
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 7;</code>
             */
            public java.util.List<java.lang.Integer>
            getGangCardsList() {
                return java.util.Collections.unmodifiableList(gangCards_);
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 7;</code>
             */
            public int getGangCardsCount() {
                return gangCards_.size();
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 7;</code>
             */
            public int getGangCards(int index) {
                return gangCards_.get(index);
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 7;</code>
             */
            public Builder setGangCards(
                    int index, int value) {
                ensureGangCardsIsMutable();
                gangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated uint32 gangCards = 7;</code>
             */
            public Builder addGangCards(int value) {
                ensureGangCardsIsMutable();
                gangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated uint32 gangCards = 7;</code>
             */
            public Builder addAllGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, gangCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated uint32 gangCards = 7;</code>
             */
            public Builder clearGangCards() {
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 8;</code>
             */
            public int getWinOrLose() {
                return winOrLose_;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 8;</code>
             */
            public Builder setWinOrLose(int value) {

                winOrLose_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 8;</code>
             */
            public Builder clearWinOrLose() {

                winOrLose_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 9;</code>
             */
            public int getScore() {
                return score_;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 9;</code>
             */
            public Builder setScore(int value) {

                score_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 9;</code>
             */
            public Builder clearScore() {

                score_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:UserResult)
        }

    }

    /**
     * <pre>
     * 结束 OVER
     * </pre>
     * <p>
     * Protobuf type {@code OverResponse}
     */
    public static final class OverResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:OverResponse)
            OverResponseOrBuilder {
        public static final int GAMEOVER_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:OverResponse)
        private static final mahjong.mode.Xingning.OverResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<OverResponse>
                PARSER = new com.google.protobuf.AbstractParser<OverResponse>() {
            public OverResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new OverResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.OverResponse();
        }

        private java.util.List<mahjong.mode.Xingning.SeatGameOver> gameOver_;
        private byte memoizedIsInitialized = -1;

        // Use OverResponse.newBuilder() to construct.
        private OverResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private OverResponse() {
            gameOver_ = java.util.Collections.emptyList();
        }

        private OverResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
      try {
        boolean done = false;
          while (!done) {
              int tag = input.readTag();
              switch (tag) {
                  case 0:
                      done = true;
                      break;
                  default: {
                      if (!input.skipField(tag)) {
                          done = true;
                      }
                      break;
                  }
                  case 10: {
                      if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                          gameOver_ = new java.util.ArrayList<mahjong.mode.Xingning.SeatGameOver>();
                          mutable_bitField0_ |= 0x00000001;
                      }
                      gameOver_.add(
                              input.readMessage(mahjong.mode.Xingning.SeatGameOver.parser(), extensionRegistry));
                      break;
                  }
              }
          }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
                  e).setUnfinishedMessage(this);
      } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              gameOver_ = java.util.Collections.unmodifiableList(gameOver_);
          }
          makeExtensionsImmutable();
      }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_OverResponse_descriptor;
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.OverResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.OverResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.OverResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.OverResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.OverResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<OverResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_OverResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.OverResponse.class, mahjong.mode.Xingning.OverResponse.Builder.class);
        }

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        public java.util.List<mahjong.mode.Xingning.SeatGameOver> getGameOverList() {
            return gameOver_;
        }

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        public java.util.List<? extends mahjong.mode.Xingning.SeatGameOverOrBuilder>
        getGameOverOrBuilderList() {
            return gameOver_;
        }

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        public int getGameOverCount() {
            return gameOver_.size();
        }

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        public mahjong.mode.Xingning.SeatGameOver getGameOver(int index) {
            return gameOver_.get(index);
        }

        /**
         * <code>repeated .SeatGameOver gameOver = 1;</code>
         */
        public mahjong.mode.Xingning.SeatGameOverOrBuilder getGameOverOrBuilder(
                int index) {
            return gameOver_.get(index);
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < gameOver_.size(); i++) {
                output.writeMessage(1, gameOver_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < gameOver_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, gameOver_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.OverResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.OverResponse other = (mahjong.mode.Xingning.OverResponse) obj;

            boolean result = true;
            result = result && getGameOverList()
                    .equals(other.getGameOverList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getGameOverCount() > 0) {
                hash = (37 * hash) + GAMEOVER_FIELD_NUMBER;
                hash = (53 * hash) + getGameOverList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<OverResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.OverResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 结束 OVER
         * </pre>
         * <p>
         * Protobuf type {@code OverResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:OverResponse)
                mahjong.mode.Xingning.OverResponseOrBuilder {
            private int bitField0_;
            private java.util.List<mahjong.mode.Xingning.SeatGameOver> gameOver_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.SeatGameOver, mahjong.mode.Xingning.SeatGameOver.Builder, mahjong.mode.Xingning.SeatGameOverOrBuilder> gameOverBuilder_;

            // Construct using mahjong.mode.Xingning.OverResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_OverResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_OverResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.OverResponse.class, mahjong.mode.Xingning.OverResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getGameOverFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (gameOverBuilder_ == null) {
                    gameOver_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    gameOverBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_OverResponse_descriptor;
            }

            public mahjong.mode.Xingning.OverResponse getDefaultInstanceForType() {
                return mahjong.mode.Xingning.OverResponse.getDefaultInstance();
            }

            public mahjong.mode.Xingning.OverResponse build() {
                mahjong.mode.Xingning.OverResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.OverResponse buildPartial() {
                mahjong.mode.Xingning.OverResponse result = new mahjong.mode.Xingning.OverResponse(this);
                int from_bitField0_ = bitField0_;
                if (gameOverBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        gameOver_ = java.util.Collections.unmodifiableList(gameOver_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.gameOver_ = gameOver_;
                } else {
                    result.gameOver_ = gameOverBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.OverResponse) {
                    return mergeFrom((mahjong.mode.Xingning.OverResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.OverResponse other) {
                if (other == mahjong.mode.Xingning.OverResponse.getDefaultInstance()) return this;
                if (gameOverBuilder_ == null) {
                    if (!other.gameOver_.isEmpty()) {
                        if (gameOver_.isEmpty()) {
                            gameOver_ = other.gameOver_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureGameOverIsMutable();
                            gameOver_.addAll(other.gameOver_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.gameOver_.isEmpty()) {
                        if (gameOverBuilder_.isEmpty()) {
                            gameOverBuilder_.dispose();
                            gameOverBuilder_ = null;
                            gameOver_ = other.gameOver_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            gameOverBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getGameOverFieldBuilder() : null;
                        } else {
                            gameOverBuilder_.addAllMessages(other.gameOver_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.OverResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.OverResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureGameOverIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    gameOver_ = new java.util.ArrayList<mahjong.mode.Xingning.SeatGameOver>(gameOver_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.SeatGameOver> getGameOverList() {
                if (gameOverBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(gameOver_);
                } else {
                    return gameOverBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public int getGameOverCount() {
                if (gameOverBuilder_ == null) {
                    return gameOver_.size();
                } else {
                    return gameOverBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.SeatGameOver getGameOver(int index) {
                if (gameOverBuilder_ == null) {
                    return gameOver_.get(index);
                } else {
                    return gameOverBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder setGameOver(
                    int index, mahjong.mode.Xingning.SeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.set(index, value);
                    onChanged();
                } else {
                    gameOverBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder setGameOver(
                    int index, mahjong.mode.Xingning.SeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(mahjong.mode.Xingning.SeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.add(value);
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    int index, mahjong.mode.Xingning.SeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.add(index, value);
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    mahjong.mode.Xingning.SeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.add(builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    int index, mahjong.mode.Xingning.SeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder addAllGameOver(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.SeatGameOver> values) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, gameOver_);
                    onChanged();
                } else {
                    gameOverBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder clearGameOver() {
                if (gameOverBuilder_ == null) {
                    gameOver_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    gameOverBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public Builder removeGameOver(int index) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.remove(index);
                    onChanged();
                } else {
                    gameOverBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.SeatGameOver.Builder getGameOverBuilder(
                    int index) {
                return getGameOverFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.SeatGameOverOrBuilder getGameOverOrBuilder(
                    int index) {
                if (gameOverBuilder_ == null) {
                    return gameOver_.get(index);
                } else {
                    return gameOverBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public java.util.List<? extends mahjong.mode.Xingning.SeatGameOverOrBuilder>
            getGameOverOrBuilderList() {
                if (gameOverBuilder_ != null) {
                    return gameOverBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(gameOver_);
                }
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.SeatGameOver.Builder addGameOverBuilder() {
                return getGameOverFieldBuilder().addBuilder(
                        mahjong.mode.Xingning.SeatGameOver.getDefaultInstance());
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.SeatGameOver.Builder addGameOverBuilder(
                    int index) {
                return getGameOverFieldBuilder().addBuilder(
                        index, mahjong.mode.Xingning.SeatGameOver.getDefaultInstance());
            }

            /**
             * <code>repeated .SeatGameOver gameOver = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.SeatGameOver.Builder>
            getGameOverBuilderList() {
                return getGameOverFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.SeatGameOver, mahjong.mode.Xingning.SeatGameOver.Builder, mahjong.mode.Xingning.SeatGameOverOrBuilder>
            getGameOverFieldBuilder() {
                if (gameOverBuilder_ == null) {
                    gameOverBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Xingning.SeatGameOver, mahjong.mode.Xingning.SeatGameOver.Builder, mahjong.mode.Xingning.SeatGameOverOrBuilder>(
                            gameOver_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    gameOver_ = null;
                }
                return gameOverBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:OverResponse)
        }

    }

    /**
     * Protobuf type {@code SeatGameOver}
     */
    public static final class SeatGameOver extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:SeatGameOver)
            SeatGameOverOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int WINORLOSE_FIELD_NUMBER = 2;
        public static final int HUCOUNT_FIELD_NUMBER = 3;
        public static final int ZIMOCOUNT_FIELD_NUMBER = 4;
        public static final int DIANPAOCOUNT_FIELD_NUMBER = 5;
        public static final int ANGANG_FIELD_NUMBER = 6;
        public static final int MINGGANG_FIELD_NUMBER = 7;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:SeatGameOver)
        private static final mahjong.mode.Xingning.SeatGameOver DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<SeatGameOver>
                PARSER = new com.google.protobuf.AbstractParser<SeatGameOver>() {
            public SeatGameOver parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new SeatGameOver(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.SeatGameOver();
        }

        private int iD_;
        private int winOrLose_;
        private int huCount_;
        private int zimoCount_;
        private int dianpaoCount_;
        private int angang_;
        private int minggang_;
        private byte memoizedIsInitialized = -1;

        // Use SeatGameOver.newBuilder() to construct.
        private SeatGameOver(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private SeatGameOver() {
            iD_ = 0;
            winOrLose_ = 0;
            huCount_ = 0;
            zimoCount_ = 0;
            dianpaoCount_ = 0;
            angang_ = 0;
            minggang_ = 0;
        }

        private SeatGameOver(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {

                            winOrLose_ = input.readInt32();
                            break;
                        }
                        case 24: {

                            huCount_ = input.readUInt32();
                            break;
                        }
                        case 32: {

                            zimoCount_ = input.readUInt32();
                            break;
                        }
                        case 40: {

                            dianpaoCount_ = input.readUInt32();
                            break;
                        }
                        case 48: {

                            angang_ = input.readUInt32();
                            break;
                        }
                        case 56: {

                            minggang_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_SeatGameOver_descriptor;
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.SeatGameOver parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.SeatGameOver prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.SeatGameOver getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<SeatGameOver> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_SeatGameOver_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.SeatGameOver.class, mahjong.mode.Xingning.SeatGameOver.Builder.class);
        }

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         * 总输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 2;</code>
         */
        public int getWinOrLose() {
            return winOrLose_;
        }

        /**
         * <pre>
         * 胡牌次数
         * </pre>
         * <p>
         * <code>uint32 huCount = 3;</code>
         */
        public int getHuCount() {
            return huCount_;
        }

        /**
         * <pre>
         * 自摸次数
         * </pre>
         * <p>
         * <code>uint32 zimoCount = 4;</code>
         */
        public int getZimoCount() {
            return zimoCount_;
        }

        /**
         * <pre>
         * 点炮次数
         * </pre>
         * <p>
         * <code>uint32 dianpaoCount = 5;</code>
         */
        public int getDianpaoCount() {
            return dianpaoCount_;
        }

        /**
         * <pre>
         * 暗杠次数
         * </pre>
         * <p>
         * <code>uint32 angang = 6;</code>
         */
        public int getAngang() {
            return angang_;
        }

        /**
         * <pre>
         * 明杠次数
         * </pre>
         * <p>
         * <code>uint32 minggang = 7;</code>
         */
        public int getMinggang() {
            return minggang_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (winOrLose_ != 0) {
                output.writeInt32(2, winOrLose_);
            }
            if (huCount_ != 0) {
                output.writeUInt32(3, huCount_);
            }
            if (zimoCount_ != 0) {
                output.writeUInt32(4, zimoCount_);
            }
            if (dianpaoCount_ != 0) {
                output.writeUInt32(5, dianpaoCount_);
            }
            if (angang_ != 0) {
                output.writeUInt32(6, angang_);
            }
            if (minggang_ != 0) {
                output.writeUInt32(7, minggang_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            if (winOrLose_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, winOrLose_);
            }
            if (huCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, huCount_);
            }
            if (zimoCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, zimoCount_);
            }
            if (dianpaoCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, dianpaoCount_);
            }
            if (angang_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(6, angang_);
            }
            if (minggang_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(7, minggang_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.SeatGameOver)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.SeatGameOver other = (mahjong.mode.Xingning.SeatGameOver) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && (getWinOrLose()
                    == other.getWinOrLose());
            result = result && (getHuCount()
                    == other.getHuCount());
            result = result && (getZimoCount()
                    == other.getZimoCount());
            result = result && (getDianpaoCount()
                    == other.getDianpaoCount());
            result = result && (getAngang()
                    == other.getAngang());
            result = result && (getMinggang()
                    == other.getMinggang());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
            hash = (53 * hash) + getWinOrLose();
            hash = (37 * hash) + HUCOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getHuCount();
            hash = (37 * hash) + ZIMOCOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getZimoCount();
            hash = (37 * hash) + DIANPAOCOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getDianpaoCount();
            hash = (37 * hash) + ANGANG_FIELD_NUMBER;
            hash = (53 * hash) + getAngang();
            hash = (37 * hash) + MINGGANG_FIELD_NUMBER;
            hash = (53 * hash) + getMinggang();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<SeatGameOver> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.SeatGameOver getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * Protobuf type {@code SeatGameOver}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:SeatGameOver)
                mahjong.mode.Xingning.SeatGameOverOrBuilder {
            private int iD_;
            private int winOrLose_;
            private int huCount_;
            private int zimoCount_;
            private int dianpaoCount_;
            private int angang_;
            private int minggang_;

            // Construct using mahjong.mode.Xingning.SeatGameOver.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_SeatGameOver_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_SeatGameOver_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.SeatGameOver.class, mahjong.mode.Xingning.SeatGameOver.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                winOrLose_ = 0;

                huCount_ = 0;

                zimoCount_ = 0;

                dianpaoCount_ = 0;

                angang_ = 0;

                minggang_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_SeatGameOver_descriptor;
            }

            public mahjong.mode.Xingning.SeatGameOver getDefaultInstanceForType() {
                return mahjong.mode.Xingning.SeatGameOver.getDefaultInstance();
            }

            public mahjong.mode.Xingning.SeatGameOver build() {
                mahjong.mode.Xingning.SeatGameOver result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.SeatGameOver buildPartial() {
                mahjong.mode.Xingning.SeatGameOver result = new mahjong.mode.Xingning.SeatGameOver(this);
                result.iD_ = iD_;
                result.winOrLose_ = winOrLose_;
                result.huCount_ = huCount_;
                result.zimoCount_ = zimoCount_;
                result.dianpaoCount_ = dianpaoCount_;
                result.angang_ = angang_;
                result.minggang_ = minggang_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.SeatGameOver) {
                    return mergeFrom((mahjong.mode.Xingning.SeatGameOver) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.SeatGameOver other) {
                if (other == mahjong.mode.Xingning.SeatGameOver.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (other.getWinOrLose() != 0) {
                    setWinOrLose(other.getWinOrLose());
                }
                if (other.getHuCount() != 0) {
                    setHuCount(other.getHuCount());
                }
                if (other.getZimoCount() != 0) {
                    setZimoCount(other.getZimoCount());
                }
                if (other.getDianpaoCount() != 0) {
                    setDianpaoCount(other.getDianpaoCount());
                }
                if (other.getAngang() != 0) {
                    setAngang(other.getAngang());
                }
                if (other.getMinggang() != 0) {
                    setMinggang(other.getMinggang());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.SeatGameOver parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.SeatGameOver) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             * 人
             * </pre>
             * <p>
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             * 人
             * </pre>
             * <p>
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 人
             * </pre>
             * <p>
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 2;</code>
             */
            public int getWinOrLose() {
                return winOrLose_;
            }

            /**
             * <pre>
             * 总输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 2;</code>
             */
            public Builder setWinOrLose(int value) {

                winOrLose_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 2;</code>
             */
            public Builder clearWinOrLose() {

                winOrLose_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 胡牌次数
             * </pre>
             * <p>
             * <code>uint32 huCount = 3;</code>
             */
            public int getHuCount() {
                return huCount_;
            }

            /**
             * <pre>
             * 胡牌次数
             * </pre>
             * <p>
             * <code>uint32 huCount = 3;</code>
             */
            public Builder setHuCount(int value) {

                huCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 胡牌次数
             * </pre>
             * <p>
             * <code>uint32 huCount = 3;</code>
             */
            public Builder clearHuCount() {

                huCount_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 自摸次数
             * </pre>
             * <p>
             * <code>uint32 zimoCount = 4;</code>
             */
            public int getZimoCount() {
                return zimoCount_;
            }

            /**
             * <pre>
             * 自摸次数
             * </pre>
             * <p>
             * <code>uint32 zimoCount = 4;</code>
             */
            public Builder setZimoCount(int value) {

                zimoCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 自摸次数
             * </pre>
             * <p>
             * <code>uint32 zimoCount = 4;</code>
             */
            public Builder clearZimoCount() {

                zimoCount_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 点炮次数
             * </pre>
             * <p>
             * <code>uint32 dianpaoCount = 5;</code>
             */
            public int getDianpaoCount() {
                return dianpaoCount_;
            }

            /**
             * <pre>
             * 点炮次数
             * </pre>
             * <p>
             * <code>uint32 dianpaoCount = 5;</code>
             */
            public Builder setDianpaoCount(int value) {

                dianpaoCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 点炮次数
             * </pre>
             * <p>
             * <code>uint32 dianpaoCount = 5;</code>
             */
            public Builder clearDianpaoCount() {

                dianpaoCount_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠次数
             * </pre>
             * <p>
             * <code>uint32 angang = 6;</code>
             */
            public int getAngang() {
                return angang_;
            }

            /**
             * <pre>
             * 暗杠次数
             * </pre>
             * <p>
             * <code>uint32 angang = 6;</code>
             */
            public Builder setAngang(int value) {

                angang_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠次数
             * </pre>
             * <p>
             * <code>uint32 angang = 6;</code>
             */
            public Builder clearAngang() {

                angang_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 明杠次数
             * </pre>
             * <p>
             * <code>uint32 minggang = 7;</code>
             */
            public int getMinggang() {
                return minggang_;
            }

            /**
             * <pre>
             * 明杠次数
             * </pre>
             * <p>
             * <code>uint32 minggang = 7;</code>
             */
            public Builder setMinggang(int value) {

                minggang_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 明杠次数
             * </pre>
             * <p>
             * <code>uint32 minggang = 7;</code>
             */
            public Builder clearMinggang() {

                minggang_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:SeatGameOver)
        }

    }

    /**
     * <pre>
     * 回放    REPLAY
     * </pre>
     * <p>
     * Protobuf type {@code ReplayResponse}
     */
    public static final class ReplayResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:ReplayResponse)
            ReplayResponseOrBuilder {
        public static final int START_FIELD_NUMBER = 1;
        public static final int HISTORY_FIELD_NUMBER = 2;
        public static final int RESULT_FIELD_NUMBER = 3;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:ReplayResponse)
        private static final mahjong.mode.Xingning.ReplayResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<ReplayResponse>
                PARSER = new com.google.protobuf.AbstractParser<ReplayResponse>() {
            public ReplayResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new ReplayResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.ReplayResponse();
        }

        private int bitField0_;
        private mahjong.mode.Mahjong.StartResponse start_;
        private java.util.List<mahjong.mode.GameBase.OperationHistory> history_;
        private mahjong.mode.Xingning.ResultResponse result_;
        private byte memoizedIsInitialized = -1;

        // Use ReplayResponse.newBuilder() to construct.
        private ReplayResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private ReplayResponse() {
            history_ = java.util.Collections.emptyList();
        }

        private ReplayResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            mahjong.mode.Mahjong.StartResponse.Builder subBuilder = null;
                            if (start_ != null) {
                                subBuilder = start_.toBuilder();
                            }
                            start_ = input.readMessage(mahjong.mode.Mahjong.StartResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(start_);
                                start_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                history_ = new java.util.ArrayList<mahjong.mode.GameBase.OperationHistory>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            history_.add(
                                    input.readMessage(mahjong.mode.GameBase.OperationHistory.parser(), extensionRegistry));
                            break;
                        }
                        case 26: {
                            mahjong.mode.Xingning.ResultResponse.Builder subBuilder = null;
                            if (result_ != null) {
                                subBuilder = result_.toBuilder();
                            }
                            result_ = input.readMessage(mahjong.mode.Xingning.ResultResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(result_);
                                result_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    history_ = java.util.Collections.unmodifiableList(history_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_ReplayResponse_descriptor;
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.ReplayResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.ReplayResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.ReplayResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<ReplayResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_ReplayResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.ReplayResponse.class, mahjong.mode.Xingning.ReplayResponse.Builder.class);
        }

        /**
         * <code>.StartResponse start = 1;</code>
         */
        public boolean hasStart() {
            return start_ != null;
        }

        /**
         * <code>.StartResponse start = 1;</code>
         */
        public mahjong.mode.Mahjong.StartResponse getStart() {
            return start_ == null ? mahjong.mode.Mahjong.StartResponse.getDefaultInstance() : start_;
        }

        /**
         * <code>.StartResponse start = 1;</code>
         */
        public mahjong.mode.Mahjong.StartResponseOrBuilder getStartOrBuilder() {
            return getStart();
        }

        /**
         * <pre>
         *操作记录
         * </pre>
         *
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public java.util.List<mahjong.mode.GameBase.OperationHistory> getHistoryList() {
            return history_;
        }

        /**
         * <pre>
         *操作记录
         * </pre>
         *
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public java.util.List<? extends mahjong.mode.GameBase.OperationHistoryOrBuilder>
        getHistoryOrBuilderList() {
            return history_;
        }

        /**
         * <pre>
         *操作记录
         * </pre>
         *
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public int getHistoryCount() {
            return history_.size();
        }

        /**
         * <pre>
         *操作记录
         * </pre>
         *
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public mahjong.mode.GameBase.OperationHistory getHistory(int index) {
            return history_.get(index);
        }

        /**
         * <pre>
         *操作记录
         * </pre>
         *
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public mahjong.mode.GameBase.OperationHistoryOrBuilder getHistoryOrBuilder(
                int index) {
            return history_.get(index);
        }

        /**
         * <code>.ResultResponse result = 3;</code>
         */
        public boolean hasResult() {
            return result_ != null;
        }

        /**
         * <code>.ResultResponse result = 3;</code>
         */
        public mahjong.mode.Xingning.ResultResponse getResult() {
            return result_ == null ? mahjong.mode.Xingning.ResultResponse.getDefaultInstance() : result_;
        }

        /**
         * <code>.ResultResponse result = 3;</code>
         */
        public mahjong.mode.Xingning.ResultResponseOrBuilder getResultOrBuilder() {
            return getResult();
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (start_ != null) {
                output.writeMessage(1, getStart());
            }
            for (int i = 0; i < history_.size(); i++) {
                output.writeMessage(2, history_.get(i));
            }
            if (result_ != null) {
                output.writeMessage(3, getResult());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (start_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getStart());
            }
            for (int i = 0; i < history_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, history_.get(i));
            }
            if (result_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, getResult());
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.ReplayResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.ReplayResponse other = (mahjong.mode.Xingning.ReplayResponse) obj;

            boolean result = true;
            result = result && (hasStart() == other.hasStart());
            if (hasStart()) {
                result = result && getStart()
                        .equals(other.getStart());
            }
            result = result && getHistoryList()
                    .equals(other.getHistoryList());
            result = result && (hasResult() == other.hasResult());
            if (hasResult()) {
                result = result && getResult()
                        .equals(other.getResult());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasStart()) {
                hash = (37 * hash) + START_FIELD_NUMBER;
                hash = (53 * hash) + getStart().hashCode();
            }
            if (getHistoryCount() > 0) {
                hash = (37 * hash) + HISTORY_FIELD_NUMBER;
                hash = (53 * hash) + getHistoryList().hashCode();
            }
            if (hasResult()) {
                hash = (37 * hash) + RESULT_FIELD_NUMBER;
                hash = (53 * hash) + getResult().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<ReplayResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.ReplayResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         *回放    REPLAY
         * </pre>
         *
         * Protobuf type {@code ReplayResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:ReplayResponse)
                mahjong.mode.Xingning.ReplayResponseOrBuilder {
            private int bitField0_;
            private mahjong.mode.Mahjong.StartResponse start_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    mahjong.mode.Mahjong.StartResponse, mahjong.mode.Mahjong.StartResponse.Builder, mahjong.mode.Mahjong.StartResponseOrBuilder> startBuilder_;
            private java.util.List<mahjong.mode.GameBase.OperationHistory> history_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.GameBase.OperationHistory, mahjong.mode.GameBase.OperationHistory.Builder, mahjong.mode.GameBase.OperationHistoryOrBuilder> historyBuilder_;
            private mahjong.mode.Xingning.ResultResponse result_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    mahjong.mode.Xingning.ResultResponse, mahjong.mode.Xingning.ResultResponse.Builder, mahjong.mode.Xingning.ResultResponseOrBuilder> resultBuilder_;

            // Construct using mahjong.mode.Xingning.ReplayResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_ReplayResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_ReplayResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.ReplayResponse.class, mahjong.mode.Xingning.ReplayResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getHistoryFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (startBuilder_ == null) {
                    start_ = null;
                } else {
                    start_ = null;
                    startBuilder_ = null;
                }
                if (historyBuilder_ == null) {
                    history_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                } else {
                    historyBuilder_.clear();
                }
                if (resultBuilder_ == null) {
                    result_ = null;
                } else {
                    result_ = null;
                    resultBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_ReplayResponse_descriptor;
            }

            public mahjong.mode.Xingning.ReplayResponse getDefaultInstanceForType() {
                return mahjong.mode.Xingning.ReplayResponse.getDefaultInstance();
            }

            public mahjong.mode.Xingning.ReplayResponse build() {
                mahjong.mode.Xingning.ReplayResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.ReplayResponse buildPartial() {
                mahjong.mode.Xingning.ReplayResponse result = new mahjong.mode.Xingning.ReplayResponse(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (startBuilder_ == null) {
                    result.start_ = start_;
                } else {
                    result.start_ = startBuilder_.build();
                }
                if (historyBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002)) {
                        history_ = java.util.Collections.unmodifiableList(history_);
                        bitField0_ = (bitField0_ & ~0x00000002);
                    }
                    result.history_ = history_;
                } else {
                    result.history_ = historyBuilder_.build();
                }
                if (resultBuilder_ == null) {
                    result.result_ = result_;
                } else {
                    result.result_ = resultBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.ReplayResponse) {
                    return mergeFrom((mahjong.mode.Xingning.ReplayResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.ReplayResponse other) {
                if (other == mahjong.mode.Xingning.ReplayResponse.getDefaultInstance()) return this;
                if (other.hasStart()) {
                    mergeStart(other.getStart());
                }
                if (historyBuilder_ == null) {
                    if (!other.history_.isEmpty()) {
                        if (history_.isEmpty()) {
                            history_ = other.history_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                        } else {
                            ensureHistoryIsMutable();
                            history_.addAll(other.history_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.history_.isEmpty()) {
                        if (historyBuilder_.isEmpty()) {
                            historyBuilder_.dispose();
                            historyBuilder_ = null;
                            history_ = other.history_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                            historyBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getHistoryFieldBuilder() : null;
                        } else {
                            historyBuilder_.addAllMessages(other.history_);
                        }
                    }
                }
                if (other.hasResult()) {
                    mergeResult(other.getResult());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.ReplayResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.ReplayResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public boolean hasStart() {
                return startBuilder_ != null || start_ != null;
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public mahjong.mode.Mahjong.StartResponse getStart() {
                if (startBuilder_ == null) {
                    return start_ == null ? mahjong.mode.Mahjong.StartResponse.getDefaultInstance() : start_;
                } else {
                    return startBuilder_.getMessage();
                }
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public Builder setStart(
                    mahjong.mode.Mahjong.StartResponse.Builder builderForValue) {
                if (startBuilder_ == null) {
                    start_ = builderForValue.build();
                    onChanged();
                } else {
                    startBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public Builder setStart(mahjong.mode.Mahjong.StartResponse value) {
                if (startBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    start_ = value;
                    onChanged();
                } else {
                    startBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public Builder mergeStart(mahjong.mode.Mahjong.StartResponse value) {
                if (startBuilder_ == null) {
                    if (start_ != null) {
                        start_ =
                                mahjong.mode.Mahjong.StartResponse.newBuilder(start_).mergeFrom(value).buildPartial();
                    } else {
                        start_ = value;
                    }
                    onChanged();
                } else {
                    startBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public Builder clearStart() {
                if (startBuilder_ == null) {
                    start_ = null;
                    onChanged();
                } else {
                    start_ = null;
                    startBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public mahjong.mode.Mahjong.StartResponse.Builder getStartBuilder() {

                onChanged();
                return getStartFieldBuilder().getBuilder();
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            public mahjong.mode.Mahjong.StartResponseOrBuilder getStartOrBuilder() {
                if (startBuilder_ != null) {
                    return startBuilder_.getMessageOrBuilder();
                } else {
                    return start_ == null ?
                            mahjong.mode.Mahjong.StartResponse.getDefaultInstance() : start_;
                }
            }

            /**
             * <code>.StartResponse start = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    mahjong.mode.Mahjong.StartResponse, mahjong.mode.Mahjong.StartResponse.Builder, mahjong.mode.Mahjong.StartResponseOrBuilder>
            getStartFieldBuilder() {
                if (startBuilder_ == null) {
                    startBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            mahjong.mode.Mahjong.StartResponse, mahjong.mode.Mahjong.StartResponse.Builder, mahjong.mode.Mahjong.StartResponseOrBuilder>(
                            getStart(),
                            getParentForChildren(),
                            isClean());
                    start_ = null;
                }
                return startBuilder_;
            }

            private void ensureHistoryIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    history_ = new java.util.ArrayList<mahjong.mode.GameBase.OperationHistory>(history_);
                    bitField0_ |= 0x00000002;
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public java.util.List<mahjong.mode.GameBase.OperationHistory> getHistoryList() {
                if (historyBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(history_);
                } else {
                    return historyBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public int getHistoryCount() {
                if (historyBuilder_ == null) {
                    return history_.size();
                } else {
                    return historyBuilder_.getCount();
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public mahjong.mode.GameBase.OperationHistory getHistory(int index) {
                if (historyBuilder_ == null) {
                    return history_.get(index);
                } else {
                    return historyBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder setHistory(
                    int index, mahjong.mode.GameBase.OperationHistory value) {
                if (historyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureHistoryIsMutable();
                    history_.set(index, value);
                    onChanged();
                } else {
                    historyBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder setHistory(
                    int index, mahjong.mode.GameBase.OperationHistory.Builder builderForValue) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    historyBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder addHistory(mahjong.mode.GameBase.OperationHistory value) {
                if (historyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureHistoryIsMutable();
                    history_.add(value);
                    onChanged();
                } else {
                    historyBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder addHistory(
                    int index, mahjong.mode.GameBase.OperationHistory value) {
                if (historyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureHistoryIsMutable();
                    history_.add(index, value);
                    onChanged();
                } else {
                    historyBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder addHistory(
                    mahjong.mode.GameBase.OperationHistory.Builder builderForValue) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.add(builderForValue.build());
                    onChanged();
                } else {
                    historyBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder addHistory(
                    int index, mahjong.mode.GameBase.OperationHistory.Builder builderForValue) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    historyBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder addAllHistory(
                    java.lang.Iterable<? extends mahjong.mode.GameBase.OperationHistory> values) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, history_);
                    onChanged();
                } else {
                    historyBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder clearHistory() {
                if (historyBuilder_ == null) {
                    history_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                    onChanged();
                } else {
                    historyBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder removeHistory(int index) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.remove(index);
                    onChanged();
                } else {
                    historyBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public mahjong.mode.GameBase.OperationHistory.Builder getHistoryBuilder(
                    int index) {
                return getHistoryFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
             */
            public mahjong.mode.GameBase.OperationHistoryOrBuilder getHistoryOrBuilder(
                    int index) {
                if (historyBuilder_ == null) {
                    return history_.get(index);
                } else {
                    return historyBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public java.util.List<? extends mahjong.mode.GameBase.OperationHistoryOrBuilder>
           getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public mahjong.mode.GameBase.OperationHistory.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
            mahjong.mode.GameBase.OperationHistory.getDefaultInstance());
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public mahjong.mode.GameBase.OperationHistory.Builder addHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().addBuilder(
            index, mahjong.mode.GameBase.OperationHistory.getDefaultInstance());
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public java.util.List<mahjong.mode.GameBase.OperationHistory.Builder>
           getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          mahjong.mode.GameBase.OperationHistory, mahjong.mode.GameBase.OperationHistory.Builder, mahjong.mode.GameBase.OperationHistoryOrBuilder>
          getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              mahjong.mode.GameBase.OperationHistory, mahjong.mode.GameBase.OperationHistory.Builder, mahjong.mode.GameBase.OperationHistoryOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public boolean hasResult() {
        return resultBuilder_ != null || result_ != null;
      }
      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public mahjong.mode.Xingning.ResultResponse getResult() {
        if (resultBuilder_ == null) {
          return result_ == null ? mahjong.mode.Xingning.ResultResponse.getDefaultInstance() : result_;
        } else {
          return resultBuilder_.getMessage();
        }
      }

      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public Builder setResult(
          mahjong.mode.Xingning.ResultResponse.Builder builderForValue) {
        if (resultBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          resultBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }

      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public Builder setResult(mahjong.mode.Xingning.ResultResponse value) {
        if (resultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          resultBuilder_.setMessage(value);
        }

        return this;
      }

      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public Builder mergeResult(mahjong.mode.Xingning.ResultResponse value) {
        if (resultBuilder_ == null) {
          if (result_ != null) {
            result_ =
              mahjong.mode.Xingning.ResultResponse.newBuilder(result_).mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          resultBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public Builder clearResult() {
        if (resultBuilder_ == null) {
          result_ = null;
          onChanged();
        } else {
          result_ = null;
          resultBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public mahjong.mode.Xingning.ResultResponse.Builder getResultBuilder() {

        onChanged();
        return getResultFieldBuilder().getBuilder();
      }
      /**
       * <code>.ResultResponse result = 3;</code>
       */
      public mahjong.mode.Xingning.ResultResponseOrBuilder getResultOrBuilder() {
        if (resultBuilder_ != null) {
          return resultBuilder_.getMessageOrBuilder();
        } else {
          return result_ == null ?
              mahjong.mode.Xingning.ResultResponse.getDefaultInstance() : result_;
        }
      }
      /**
       * <code>.ResultResponse result = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mahjong.mode.Xingning.ResultResponse, mahjong.mode.Xingning.ResultResponse.Builder, mahjong.mode.Xingning.ResultResponseOrBuilder>
          getResultFieldBuilder() {
        if (resultBuilder_ == null) {
          resultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mahjong.mode.Xingning.ResultResponse, mahjong.mode.Xingning.ResultResponse.Builder, mahjong.mode.Xingning.ResultResponseOrBuilder>(
                  getResult(),
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        return resultBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:ReplayResponse)
    }

  }

  // @@protoc_insertion_point(outer_class_scope)
}
