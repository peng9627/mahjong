// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xingning.proto

package mahjong.mode;

public final class Xingning {
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningIntoResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningIntoResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningMahjongGameInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningMahjongGameInfo_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningMahjongSeatGameInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningMahjongSeatGameInfo_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningMahjongResultResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningMahjongResultResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningMahjongUserResult_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningMahjongUserResult_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningMahjongOverResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningMahjongOverResponse_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningMahjongSeatGameOver_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningMahjongSeatGameOver_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_XingningMahjongReplayResponse_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_XingningMahjongReplayResponse_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\016xingning.proto\032\016gameBase.proto\032\rmahjon" +
                        "g.proto\"l\n\024XingningIntoResponse\022\021\n\tbaseS" +
                        "core\030\001 \001(\r\022\016\n\006roomNo\030\002 \001(\t\022\021\n\tgameTimes\030" +
                        "\003 \001(\r\022\r\n\005count\030\004 \001(\r\022\017\n\007dianpao\030\005 \001(\010\"\254\001" +
                        "\n\027XingningMahjongGameInfo\022\037\n\ngameStatus\030" +
                        "\001 \001(\0162\013.GameStatus\022\025\n\roperationUser\030\002 \001(" +
                        "\r\022\031\n\021lastOperationUser\030\003 \001(\r\022+\n\005seats\030\004 " +
                        "\003(\0132\034.XingningMahjongSeatGameInfo\022\021\n\tgam" +
                        "eCount\030\005 \001(\r\"\277\001\n\033XingningMahjongSeatGame" +
                        "Info\022\n\n\002ID\030\001 \001(\r\022\024\n\014initialCards\030\002 \003(\005\022\r",
                "\n\005cards\030\003 \003(\005\022\021\n\tcardsSize\030\004 \001(\r\022\021\n\tpeng" +
                        "Cards\030\005 \003(\005\022\021\n\tgangCards\030\006 \003(\005\022\020\n\010chiCar" +
                        "ds\030\007 \003(\005\022\023\n\013playedCards\030\010 \003(\005\022\017\n\007isRobot" +
                        "\030\t \001(\010\"O\n\035XingningMahjongResultResponse\022" +
                        ".\n\nuserResult\030\001 \003(\0132\032.XingningMahjongUse" +
                        "rResult\"\302\001\n\031XingningMahjongUserResult\022\n\n" +
                        "\002ID\030\001 \001(\r\022\021\n\tcardScore\030\002 \001(\005\022\036\n\nscoreTyp" +
                        "es\030\003 \003(\0162\n.ScoreType\022\021\n\tgangScore\030\004 \001(\005\022" +
                        "\017\n\007maScore\030\005 \001(\005\022\r\n\005cards\030\006 \003(\005\022\021\n\tgangC" +
                        "ards\030\007 \003(\005\022\021\n\twinOrLose\030\010 \001(\005\022\r\n\005score\030\t",
                " \001(\005\"^\n\033XingningMahjongOverResponse\022.\n\010g" +
                        "ameOver\030\001 \003(\0132\034.XingningMahjongSeatGameO" +
                        "ver\022\017\n\007backKey\030\002 \001(\t\"\230\001\n\033XingningMahjong" +
                        "SeatGameOver\022\n\n\002ID\030\001 \001(\r\022\021\n\twinOrLose\030\002 " +
                        "\001(\005\022\017\n\007huCount\030\003 \001(\r\022\021\n\tzimoCount\030\004 \001(\r\022" +
                        "\024\n\014dianpaoCount\030\005 \001(\r\022\016\n\006angang\030\006 \001(\r\022\020\n" +
                        "\010minggang\030\007 \001(\r\"\231\001\n\035XingningMahjongRepla" +
                        "yResponse\022$\n\005start\030\001 \001(\0132\025.MahjongStartR" +
                        "esponse\022\"\n\007history\030\002 \003(\0132\021.OperationHist" +
                        "ory\022.\n\006result\030\003 \001(\0132\036.XingningMahjongRes",
                "ultResponse*\276\002\n\tScoreType\022\013\n\007PING_HU\020\000\022\013" +
                        "\n\007ZIMO_HU\020\001\022\016\n\nMENQING_HU\020\002\022\017\n\013PENGPENG_" +
                        "HU\020\003\022\016\n\nHUNYISE_HU\020\004\022\017\n\013QINGYISE_HU\020\005\022\020\n" +
                        "\014QIXIAODUI_HU\020\006\022\020\n\014HUNYAOJIU_HU\020\007\022\026\n\022HAO" +
                        "HUAQIXIAODUI_HU\020\010\022\020\n\014SHISANYAO_HU\020\t\022\013\n\007T" +
                        "IAN_HU\020\n\022\t\n\005DI_HU\020\013\022\021\n\rQUANYAOJIU_HU\020\014\022\017" +
                        "\n\013QUANFENG_HU\020\r\022\034\n\030SHUANGHAOHUAQIXIAODUI" +
                        "_HU\020\016\022\031\n\025SANHAOHUAQIXIAODUI_HU\020\017\022\022\n\016WUHO" +
                        "NGZHONG_HU\020\020B\016\n\014mahjong.modeb\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                                mahjong.mode.GameBase.getDescriptor(),
                                mahjong.mode.Mahjong.getDescriptor(),
                        }, assigner);
        internal_static_XingningIntoResponse_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_XingningIntoResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningIntoResponse_descriptor,
                new java.lang.String[]{"BaseScore", "RoomNo", "GameTimes", "Count", "Dianpao",});
        internal_static_XingningMahjongGameInfo_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_XingningMahjongGameInfo_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningMahjongGameInfo_descriptor,
                new java.lang.String[]{"GameStatus", "OperationUser", "LastOperationUser", "Seats", "GameCount",});
        internal_static_XingningMahjongSeatGameInfo_descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_XingningMahjongSeatGameInfo_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningMahjongSeatGameInfo_descriptor,
                new java.lang.String[]{"ID", "InitialCards", "Cards", "CardsSize", "PengCards", "GangCards", "ChiCards", "PlayedCards", "IsRobot",});
        internal_static_XingningMahjongResultResponse_descriptor =
                getDescriptor().getMessageTypes().get(3);
        internal_static_XingningMahjongResultResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningMahjongResultResponse_descriptor,
                new java.lang.String[]{"UserResult",});
        internal_static_XingningMahjongUserResult_descriptor =
                getDescriptor().getMessageTypes().get(4);
        internal_static_XingningMahjongUserResult_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningMahjongUserResult_descriptor,
                new java.lang.String[]{"ID", "CardScore", "ScoreTypes", "GangScore", "MaScore", "Cards", "GangCards", "WinOrLose", "Score",});
        internal_static_XingningMahjongOverResponse_descriptor =
                getDescriptor().getMessageTypes().get(5);
        internal_static_XingningMahjongOverResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningMahjongOverResponse_descriptor,
                new java.lang.String[]{"GameOver", "BackKey",});
        internal_static_XingningMahjongSeatGameOver_descriptor =
                getDescriptor().getMessageTypes().get(6);
        internal_static_XingningMahjongSeatGameOver_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningMahjongSeatGameOver_descriptor,
                new java.lang.String[]{"ID", "WinOrLose", "HuCount", "ZimoCount", "DianpaoCount", "Angang", "Minggang",});
        internal_static_XingningMahjongReplayResponse_descriptor =
                getDescriptor().getMessageTypes().get(7);
        internal_static_XingningMahjongReplayResponse_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_XingningMahjongReplayResponse_descriptor,
                new java.lang.String[]{"Start", "History", "Result",});
        mahjong.mode.GameBase.getDescriptor();
        mahjong.mode.Mahjong.getDescriptor();
    }

    private Xingning() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    /**
     * Protobuf enum {@code ScoreType}
     */
    public enum ScoreType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         *平胡
         * </pre>
         *
         * <code>PING_HU = 0;</code>
         */
        PING_HU(0),
        /**
         * <pre>
         *自摸
         * </pre>
         *
         * <code>ZIMO_HU = 1;</code>
         */
        ZIMO_HU(1),
        /**
         * <pre>
         *门清
         * </pre>
         *
         * <code>MENQING_HU = 2;</code>
         */
        MENQING_HU(2),
        /**
         * <pre>
         *碰碰胡
         * </pre>
         *
         * <code>PENGPENG_HU = 3;</code>
         */
        PENGPENG_HU(3),
        /**
         * <pre>
         *混一色
         * </pre>
         *
         * <code>HUNYISE_HU = 4;</code>
         */
        HUNYISE_HU(4),
        /**
         * <pre>
         *清一色
         * </pre>
         *
         * <code>QINGYISE_HU = 5;</code>
         */
        QINGYISE_HU(5),
        /**
         * <pre>
         *七小对
         * </pre>
         *
         * <code>QIXIAODUI_HU = 6;</code>
         */
        QIXIAODUI_HU(6),
        /**
         * <pre>
         *混幺九
         * </pre>
         *
         * <code>HUNYAOJIU_HU = 7;</code>
         */
        HUNYAOJIU_HU(7),
        /**
         * <pre>
         *豪华七小对
         * </pre>
         *
         * <code>HAOHUAQIXIAODUI_HU = 8;</code>
         */
        HAOHUAQIXIAODUI_HU(8),
        /**
         * <pre>
         *十三幺
         * </pre>
         *
         * <code>SHISANYAO_HU = 9;</code>
         */
        SHISANYAO_HU(9),
        /**
         * <pre>
         *天胡
         * </pre>
         *
         * <code>TIAN_HU = 10;</code>
         */
        TIAN_HU(10),
        /**
         * <pre>
         *地胡
         * </pre>
         *
         * <code>DI_HU = 11;</code>
         */
        DI_HU(11),
        /**
         * <pre>
         *全幺九
         * </pre>
         *
         * <code>QUANYAOJIU_HU = 12;</code>
         */
        QUANYAOJIU_HU(12),
        /**
         * <pre>
         *全风
         * </pre>
         *
         * <code>QUANFENG_HU = 13;</code>
         */
        QUANFENG_HU(13),
        /**
         * <pre>
         *双豪华七小对
         * </pre>
         *
         * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
         */
        SHUANGHAOHUAQIXIAODUI_HU(14),
        /**
         * <pre>
         *三豪华七小对
         * </pre>
         *
         * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
         */
        SANHAOHUAQIXIAODUI_HU(15),
        /**
         * <pre>
         *无红中
         * </pre>
         *
         * <code>WUHONGZHONG_HU = 16;</code>
         */
        WUHONGZHONG_HU(16),
        UNRECOGNIZED(-1),;

        /**
         * <pre>
         *平胡
         * </pre>
         *
         * <code>PING_HU = 0;</code>
         */
        public static final int PING_HU_VALUE = 0;
        /**
         * <pre>
         *自摸
         * </pre>
         *
         * <code>ZIMO_HU = 1;</code>
         */
        public static final int ZIMO_HU_VALUE = 1;
        /**
         * <pre>
         *门清
         * </pre>
         *
         * <code>MENQING_HU = 2;</code>
         */
        public static final int MENQING_HU_VALUE = 2;
        /**
         * <pre>
         *碰碰胡
         * </pre>
         *
         * <code>PENGPENG_HU = 3;</code>
         */
        public static final int PENGPENG_HU_VALUE = 3;
        /**
         * <pre>
         *混一色
         * </pre>
         *
         * <code>HUNYISE_HU = 4;</code>
         */
        public static final int HUNYISE_HU_VALUE = 4;
        /**
         * <pre>
         *清一色
         * </pre>
         *
         * <code>QINGYISE_HU = 5;</code>
         */
        public static final int QINGYISE_HU_VALUE = 5;
        /**
         * <pre>
         *七小对
         * </pre>
         *
         * <code>QIXIAODUI_HU = 6;</code>
         */
        public static final int QIXIAODUI_HU_VALUE = 6;
        /**
         * <pre>
         *混幺九
         * </pre>
         *
         * <code>HUNYAOJIU_HU = 7;</code>
         */
        public static final int HUNYAOJIU_HU_VALUE = 7;
        /**
         * <pre>
         *豪华七小对
         * </pre>
         *
         * <code>HAOHUAQIXIAODUI_HU = 8;</code>
         */
        public static final int HAOHUAQIXIAODUI_HU_VALUE = 8;
        /**
         * <pre>
         *十三幺
         * </pre>
         *
         * <code>SHISANYAO_HU = 9;</code>
         */
        public static final int SHISANYAO_HU_VALUE = 9;
        /**
         * <pre>
         *天胡
         * </pre>
         *
         * <code>TIAN_HU = 10;</code>
         */
        public static final int TIAN_HU_VALUE = 10;
        /**
         * <pre>
         *地胡
         * </pre>
         *
         * <code>DI_HU = 11;</code>
         */
        public static final int DI_HU_VALUE = 11;
        /**
         * <pre>
         *全幺九
         * </pre>
         *
         * <code>QUANYAOJIU_HU = 12;</code>
         */
        public static final int QUANYAOJIU_HU_VALUE = 12;
        /**
         * <pre>
         *全风
         * </pre>
         *
         * <code>QUANFENG_HU = 13;</code>
         */
        public static final int QUANFENG_HU_VALUE = 13;
        /**
         * <pre>
         *双豪华七小对
         * </pre>
         *
         * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
         */
        public static final int SHUANGHAOHUAQIXIAODUI_HU_VALUE = 14;
        /**
         * <pre>
         *三豪华七小对
         * </pre>
         *
         * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
         */
        public static final int SANHAOHUAQIXIAODUI_HU_VALUE = 15;
        /**
         * <pre>
         *无红中
         * </pre>
         *
         * <code>WUHONGZHONG_HU = 16;</code>
         */
        public static final int WUHONGZHONG_HU_VALUE = 16;
        private static final com.google.protobuf.Internal.EnumLiteMap<
                ScoreType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ScoreType>() {
                    public ScoreType findValueByNumber(int number) {
                        return ScoreType.forNumber(number);
                    }
                };
        private static final ScoreType[] VALUES = values();
        private final int value;

        private ScoreType(int value) {
            this.value = value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ScoreType valueOf(int value) {
            return forNumber(value);
        }

        public static ScoreType forNumber(int value) {
            switch (value) {
                case 0:
                    return PING_HU;
                case 1:
                    return ZIMO_HU;
                case 2:
                    return MENQING_HU;
                case 3:
                    return PENGPENG_HU;
                case 4:
                    return HUNYISE_HU;
                case 5:
                    return QINGYISE_HU;
                case 6:
                    return QIXIAODUI_HU;
                case 7:
                    return HUNYAOJIU_HU;
                case 8:
                    return HAOHUAQIXIAODUI_HU;
                case 9:
                    return SHISANYAO_HU;
                case 10:
                    return TIAN_HU;
                case 11:
                    return DI_HU;
                case 12:
                    return QUANYAOJIU_HU;
                case 13:
                    return QUANFENG_HU;
                case 14:
                    return SHUANGHAOHUAQIXIAODUI_HU;
                case 15:
                    return SANHAOHUAQIXIAODUI_HU;
                case 16:
                    return WUHONGZHONG_HU;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ScoreType>
        internalGetValueMap() {
            return internalValueMap;
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return mahjong.mode.Xingning.getDescriptor().getEnumTypes().get(0);
        }

        public static ScoreType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        // @@protoc_insertion_point(enum_scope:ScoreType)
    }

    public interface XingningIntoResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningIntoResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 基础分
         * </pre>
         * <p>
         * <code>uint32 baseScore = 1;</code>
         */
        int getBaseScore();

        /**
         * <pre>
         * 桌号
         * </pre>
         * <p>
         * <code>string roomNo = 2;</code>
         */
        java.lang.String getRoomNo();

        /**
         * <pre>
         * 桌号
         * </pre>
         * <p>
         * <code>string roomNo = 2;</code>
         */
        com.google.protobuf.ByteString
        getRoomNoBytes();

        /**
         * <pre>
         * 游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameTimes = 3;</code>
         */
        int getGameTimes();

        /**
         * <pre>
         * 人数
         * </pre>
         * <p>
         * <code>uint32 count = 4;</code>
         */
        int getCount();

        /**
         * <pre>
         * 点炮
         * </pre>
         * <p>
         * <code>bool dianpao = 5;</code>
         */
        boolean getDianpao();
    }

    public interface XingningMahjongGameInfoOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningMahjongGameInfo)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        int getGameStatusValue();

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        mahjong.mode.GameBase.GameStatus getGameStatus();

        /**
         * <pre>
         * 当前操作的人
         * </pre>
         * <p>
         * <code>uint32 operationUser = 2;</code>
         */
        int getOperationUser();

        /**
         * <pre>
         * 上家出牌人
         * </pre>
         * <p>
         * <code>uint32 lastOperationUser = 3;</code>
         */
        int getLastOperationUser();

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameInfo>
        getSeatsList();

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        mahjong.mode.Xingning.XingningMahjongSeatGameInfo getSeats(int index);

        /**
         * <pre>
         *座位
         * </pre>
         *
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        int getSeatsCount();

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        java.util.List<? extends mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder>
        getSeatsOrBuilderList();

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
                int index);

        /**
         * <pre>
         * 当前游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameCount = 5;</code>
         */
        int getGameCount();
    }

    public interface XingningMahjongSeatGameInfoOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningMahjongSeatGameInfo)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * ID
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        int getID();

        /**
         * <pre>
         * 初始手牌
         * </pre>
         * <p>
         * <code>repeated int32 initialCards = 2;</code>
         */
        java.util.List<java.lang.Integer> getInitialCardsList();

        /**
         * <pre>
         * 初始手牌
         * </pre>
         * <p>
         * <code>repeated int32 initialCards = 2;</code>
         */
        int getInitialCardsCount();

        /**
         * <pre>
         * 初始手牌
         * </pre>
         * <p>
         * <code>repeated int32 initialCards = 2;</code>
         */
        int getInitialCards(int index);

        /**
         * <pre>
         * 当前手牌(如果是其他玩家的,就没有)
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        java.util.List<java.lang.Integer> getCardsList();

        /**
         * <pre>
         * 当前手牌(如果是其他玩家的,就没有)
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        int getCardsCount();

        /**
         * <pre>
         * 当前手牌(如果是其他玩家的,就没有)
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        int getCards(int index);

        /**
         * <pre>
         * 其他玩家手牌数量
         * </pre>
         * <p>
         * <code>uint32 cardsSize = 4;</code>
         */
        int getCardsSize();

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        java.util.List<java.lang.Integer> getPengCardsList();

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        int getPengCardsCount();

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        int getPengCards(int index);

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 6;</code>
         */
        java.util.List<java.lang.Integer> getGangCardsList();

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 6;</code>
         */
        int getGangCardsCount();

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 6;</code>
         */
        int getGangCards(int index);

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        java.util.List<java.lang.Integer> getChiCardsList();

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        int getChiCardsCount();

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        int getChiCards(int index);

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated int32 playedCards = 8;</code>
         */
        java.util.List<java.lang.Integer> getPlayedCardsList();

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated int32 playedCards = 8;</code>
         */
        int getPlayedCardsCount();

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated int32 playedCards = 8;</code>
         */
        int getPlayedCards(int index);

        /**
         * <pre>
         * 是否托管
         * </pre>
         * <p>
         * <code>bool isRobot = 9;</code>
         */
        boolean getIsRobot();
    }

    public interface XingningMahjongResultResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningMahjongResultResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        java.util.List<mahjong.mode.Xingning.XingningMahjongUserResult>
        getUserResultList();

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        mahjong.mode.Xingning.XingningMahjongUserResult getUserResult(int index);

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        int getUserResultCount();

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        java.util.List<? extends mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder>
        getUserResultOrBuilderList();

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder getUserResultOrBuilder(
                int index);
    }

    public interface XingningMahjongUserResultOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningMahjongUserResult)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        int getID();

        /**
         * <pre>
         * 牌型输赢
         * </pre>
         * <p>
         * <code>int32 cardScore = 2;</code>
         */
        int getCardScore();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        java.util.List<mahjong.mode.Xingning.ScoreType> getScoreTypesList();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        int getScoreTypesCount();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        mahjong.mode.Xingning.ScoreType getScoreTypes(int index);

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        java.util.List<java.lang.Integer>
        getScoreTypesValueList();

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        int getScoreTypesValue(int index);

        /**
         * <pre>
         * 杠牌输赢
         * </pre>
         * <p>
         * <code>int32 gangScore = 4;</code>
         */
        int getGangScore();

        /**
         * <pre>
         * 卖马输赢
         * </pre>
         * <p>
         * <code>int32 maScore = 5;</code>
         */
        int getMaScore();

        /**
         * <code>repeated int32 cards = 6;</code>
         */
        java.util.List<java.lang.Integer> getCardsList();

        /**
         * <code>repeated int32 cards = 6;</code>
         */
        int getCardsCount();

        /**
         * <code>repeated int32 cards = 6;</code>
         */
        int getCards(int index);

        /**
         * <pre>
         *暗杠的牌
         * </pre>
         *
         * <code>repeated int32 gangCards = 7;</code>
         */
        java.util.List<java.lang.Integer> getGangCardsList();

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 7;</code>
         */
        int getGangCardsCount();

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 7;</code>
         */
        int getGangCards(int index);

        /**
         * <pre>
         * 当局输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 8;</code>
         */
        int getWinOrLose();

        /**
         * <pre>
         * 总输赢分数
         * </pre>
         * <p>
         * <code>int32 score = 9;</code>
         */
        int getScore();
    }

    public interface XingningMahjongOverResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningMahjongOverResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameOver>
        getGameOverList();

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        mahjong.mode.Xingning.XingningMahjongSeatGameOver getGameOver(int index);

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        int getGameOverCount();

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        java.util.List<? extends mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder>
        getGameOverOrBuilderList();

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder getGameOverOrBuilder(
                int index);

        /**
         * <pre>
         * 回到大厅的码
         * </pre>
         * <p>
         * <code>string backKey = 2;</code>
         */
        java.lang.String getBackKey();

        /**
         * <pre>
         * 回到大厅的码
         * </pre>
         * <p>
         * <code>string backKey = 2;</code>
         */
        com.google.protobuf.ByteString
        getBackKeyBytes();
    }

    public interface XingningMahjongSeatGameOverOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningMahjongSeatGameOver)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        int getID();

        /**
         * <pre>
         * 总输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 2;</code>
         */
        int getWinOrLose();

        /**
         * <pre>
         * 胡牌次数
         * </pre>
         * <p>
         * <code>uint32 huCount = 3;</code>
         */
        int getHuCount();

        /**
         * <pre>
         *自摸次数
         * </pre>
         *
         * <code>uint32 zimoCount = 4;</code>
         */
        int getZimoCount();

        /**
         * <pre>
         * 点炮次数
         * </pre>
         * <p>
         * <code>uint32 dianpaoCount = 5;</code>
         */
        int getDianpaoCount();

        /**
         * <pre>
         * 暗杠次数
         * </pre>
         * <p>
         * <code>uint32 angang = 6;</code>
         */
        int getAngang();

        /**
         * <pre>
         * 明杠次数
         * </pre>
         * <p>
         * <code>uint32 minggang = 7;</code>
         */
        int getMinggang();
    }

    public interface XingningMahjongReplayResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:XingningMahjongReplayResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.MahjongStartResponse start = 1;</code>
         */
        boolean hasStart();

        /**
         * <code>.MahjongStartResponse start = 1;</code>
         */
        mahjong.mode.Mahjong.MahjongStartResponse getStart();

        /**
         * <code>.MahjongStartResponse start = 1;</code>
         */
        mahjong.mode.Mahjong.MahjongStartResponseOrBuilder getStartOrBuilder();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        java.util.List<mahjong.mode.GameBase.OperationHistory>
        getHistoryList();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        mahjong.mode.GameBase.OperationHistory getHistory(int index);

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        int getHistoryCount();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        java.util.List<? extends mahjong.mode.GameBase.OperationHistoryOrBuilder>
        getHistoryOrBuilderList();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        mahjong.mode.GameBase.OperationHistoryOrBuilder getHistoryOrBuilder(
                int index);

        /**
         * <code>.XingningMahjongResultResponse result = 3;</code>
         */
        boolean hasResult();

        /**
         * <code>.XingningMahjongResultResponse result = 3;</code>
         */
        mahjong.mode.Xingning.XingningMahjongResultResponse getResult();

        /**
         * <code>.XingningMahjongResultResponse result = 3;</code>
         */
        mahjong.mode.Xingning.XingningMahjongResultResponseOrBuilder getResultOrBuilder();
    }

    /**
     * <pre>
     * 进入房间返回 RoomInfo
     * </pre>
     * <p>
     * Protobuf type {@code XingningIntoResponse}
     */
    public static final class XingningIntoResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningIntoResponse)
            XingningIntoResponseOrBuilder {
        public static final int BASESCORE_FIELD_NUMBER = 1;
        public static final int ROOMNO_FIELD_NUMBER = 2;
        public static final int GAMETIMES_FIELD_NUMBER = 3;
        public static final int COUNT_FIELD_NUMBER = 4;
        public static final int DIANPAO_FIELD_NUMBER = 5;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningIntoResponse)
        private static final mahjong.mode.Xingning.XingningIntoResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningIntoResponse>
                PARSER = new com.google.protobuf.AbstractParser<XingningIntoResponse>() {
            public XingningIntoResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningIntoResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningIntoResponse();
        }

        private int baseScore_;
        private volatile java.lang.Object roomNo_;
        private int gameTimes_;
        private int count_;
        private boolean dianpao_;
        private byte memoizedIsInitialized = -1;

        // Use XingningIntoResponse.newBuilder() to construct.
        private XingningIntoResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private XingningIntoResponse() {
            baseScore_ = 0;
            roomNo_ = "";
            gameTimes_ = 0;
            count_ = 0;
            dianpao_ = false;
        }

        private XingningIntoResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            baseScore_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            java.lang.String s = input.readStringRequireUtf8();

                            roomNo_ = s;
                            break;
                        }
                        case 24: {

                            gameTimes_ = input.readUInt32();
                            break;
                        }
                        case 32: {

                            count_ = input.readUInt32();
                            break;
                        }
                        case 40: {

                            dianpao_ = input.readBool();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningIntoResponse_descriptor;
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningIntoResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningIntoResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningIntoResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningIntoResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningIntoResponse.class, mahjong.mode.Xingning.XingningIntoResponse.Builder.class);
        }

        /**
         * <pre>
         * 基础分
         * </pre>
         * <p>
         * <code>uint32 baseScore = 1;</code>
         */
        public int getBaseScore() {
            return baseScore_;
        }

        /**
         * <pre>
         * 桌号
         * </pre>
         * <p>
         * <code>string roomNo = 2;</code>
         */
        public java.lang.String getRoomNo() {
            java.lang.Object ref = roomNo_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                roomNo_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * 桌号
         * </pre>
         * <p>
         * <code>string roomNo = 2;</code>
         */
        public com.google.protobuf.ByteString
        getRoomNoBytes() {
            java.lang.Object ref = roomNo_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                roomNo_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * 游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameTimes = 3;</code>
         */
        public int getGameTimes() {
            return gameTimes_;
        }

        /**
         * <pre>
         * 人数
         * </pre>
         * <p>
         * <code>uint32 count = 4;</code>
         */
        public int getCount() {
            return count_;
        }

        /**
         * <pre>
         * 点炮
         * </pre>
         * <p>
         * <code>bool dianpao = 5;</code>
         */
        public boolean getDianpao() {
            return dianpao_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (baseScore_ != 0) {
                output.writeUInt32(1, baseScore_);
            }
            if (!getRoomNoBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, roomNo_);
            }
            if (gameTimes_ != 0) {
                output.writeUInt32(3, gameTimes_);
            }
            if (count_ != 0) {
                output.writeUInt32(4, count_);
            }
            if (dianpao_ != false) {
                output.writeBool(5, dianpao_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (baseScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, baseScore_);
            }
            if (!getRoomNoBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, roomNo_);
            }
            if (gameTimes_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, gameTimes_);
            }
            if (count_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, count_);
            }
            if (dianpao_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(5, dianpao_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningIntoResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningIntoResponse other = (mahjong.mode.Xingning.XingningIntoResponse) obj;

            boolean result = true;
            result = result && (getBaseScore()
                    == other.getBaseScore());
            result = result && getRoomNo()
                    .equals(other.getRoomNo());
            result = result && (getGameTimes()
                    == other.getGameTimes());
            result = result && (getCount()
                    == other.getCount());
            result = result && (getDianpao()
                    == other.getDianpao());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + BASESCORE_FIELD_NUMBER;
            hash = (53 * hash) + getBaseScore();
            hash = (37 * hash) + ROOMNO_FIELD_NUMBER;
            hash = (53 * hash) + getRoomNo().hashCode();
            hash = (37 * hash) + GAMETIMES_FIELD_NUMBER;
            hash = (53 * hash) + getGameTimes();
            hash = (37 * hash) + COUNT_FIELD_NUMBER;
            hash = (53 * hash) + getCount();
            hash = (37 * hash) + DIANPAO_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getDianpao());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningIntoResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningIntoResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 进入房间返回 RoomInfo
         * </pre>
         * <p>
         * Protobuf type {@code XingningIntoResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningIntoResponse)
                mahjong.mode.Xingning.XingningIntoResponseOrBuilder {
            private int baseScore_;
            private java.lang.Object roomNo_ = "";
            private int gameTimes_;
            private int count_;
            private boolean dianpao_;

            // Construct using mahjong.mode.Xingning.XingningIntoResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningIntoResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningIntoResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningIntoResponse.class, mahjong.mode.Xingning.XingningIntoResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                baseScore_ = 0;

                roomNo_ = "";

                gameTimes_ = 0;

                count_ = 0;

                dianpao_ = false;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningIntoResponse_descriptor;
            }

            public mahjong.mode.Xingning.XingningIntoResponse getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningIntoResponse.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningIntoResponse build() {
                mahjong.mode.Xingning.XingningIntoResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningIntoResponse buildPartial() {
                mahjong.mode.Xingning.XingningIntoResponse result = new mahjong.mode.Xingning.XingningIntoResponse(this);
                result.baseScore_ = baseScore_;
                result.roomNo_ = roomNo_;
                result.gameTimes_ = gameTimes_;
                result.count_ = count_;
                result.dianpao_ = dianpao_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningIntoResponse) {
                    return mergeFrom((mahjong.mode.Xingning.XingningIntoResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningIntoResponse other) {
                if (other == mahjong.mode.Xingning.XingningIntoResponse.getDefaultInstance()) return this;
                if (other.getBaseScore() != 0) {
                    setBaseScore(other.getBaseScore());
                }
                if (!other.getRoomNo().isEmpty()) {
                    roomNo_ = other.roomNo_;
                    onChanged();
                }
                if (other.getGameTimes() != 0) {
                    setGameTimes(other.getGameTimes());
                }
                if (other.getCount() != 0) {
                    setCount(other.getCount());
                }
                if (other.getDianpao() != false) {
                    setDianpao(other.getDianpao());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningIntoResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningIntoResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             * 基础分
             * </pre>
             * <p>
             * <code>uint32 baseScore = 1;</code>
             */
            public int getBaseScore() {
                return baseScore_;
            }

            /**
             * <pre>
             * 基础分
             * </pre>
             * <p>
             * <code>uint32 baseScore = 1;</code>
             */
            public Builder setBaseScore(int value) {

                baseScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 基础分
             * </pre>
             * <p>
             * <code>uint32 baseScore = 1;</code>
             */
            public Builder clearBaseScore() {

                baseScore_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 桌号
             * </pre>
             * <p>
             * <code>string roomNo = 2;</code>
             */
            public java.lang.String getRoomNo() {
                java.lang.Object ref = roomNo_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    roomNo_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <pre>
             * 桌号
             * </pre>
             * <p>
             * <code>string roomNo = 2;</code>
             */
            public Builder setRoomNo(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                roomNo_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 桌号
             * </pre>
             * <p>
             * <code>string roomNo = 2;</code>
             */
            public com.google.protobuf.ByteString
            getRoomNoBytes() {
                java.lang.Object ref = roomNo_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    roomNo_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * 桌号
             * </pre>
             * <p>
             * <code>string roomNo = 2;</code>
             */
            public Builder setRoomNoBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                roomNo_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 桌号
             * </pre>
             * <p>
             * <code>string roomNo = 2;</code>
             */
            public Builder clearRoomNo() {

                roomNo_ = getDefaultInstance().getRoomNo();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 3;</code>
             */
            public int getGameTimes() {
                return gameTimes_;
            }

            /**
             * <pre>
             * 游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 3;</code>
             */
            public Builder setGameTimes(int value) {

                gameTimes_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 3;</code>
             */
            public Builder clearGameTimes() {

                gameTimes_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 人数
             * </pre>
             * <p>
             * <code>uint32 count = 4;</code>
             */
            public int getCount() {
                return count_;
            }

            /**
             * <pre>
             * 人数
             * </pre>
             * <p>
             * <code>uint32 count = 4;</code>
             */
            public Builder setCount(int value) {

                count_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 人数
             * </pre>
             * <p>
             * <code>uint32 count = 4;</code>
             */
            public Builder clearCount() {

                count_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 点炮
             * </pre>
             * <p>
             * <code>bool dianpao = 5;</code>
             */
            public boolean getDianpao() {
                return dianpao_;
            }

            /**
             * <pre>
             * 点炮
             * </pre>
             * <p>
             * <code>bool dianpao = 5;</code>
             */
            public Builder setDianpao(boolean value) {

                dianpao_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 点炮
             * </pre>
             * <p>
             * <code>bool dianpao = 5;</code>
             */
            public Builder clearDianpao() {

                dianpao_ = false;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:XingningIntoResponse)
        }

    }

    /**
     * <pre>
     * 游戏信息  GAME_INFO
     * </pre>
     * <p>
     * Protobuf type {@code XingningMahjongGameInfo}
     */
    public static final class XingningMahjongGameInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningMahjongGameInfo)
            XingningMahjongGameInfoOrBuilder {
        public static final int GAMESTATUS_FIELD_NUMBER = 1;
        public static final int OPERATIONUSER_FIELD_NUMBER = 2;
        public static final int LASTOPERATIONUSER_FIELD_NUMBER = 3;
        public static final int SEATS_FIELD_NUMBER = 4;
        public static final int GAMECOUNT_FIELD_NUMBER = 5;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningMahjongGameInfo)
        private static final mahjong.mode.Xingning.XingningMahjongGameInfo DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningMahjongGameInfo>
                PARSER = new com.google.protobuf.AbstractParser<XingningMahjongGameInfo>() {
            public XingningMahjongGameInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningMahjongGameInfo(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningMahjongGameInfo();
        }

        private int bitField0_;
        private int gameStatus_;
        private int operationUser_;
        private int lastOperationUser_;
        private java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameInfo> seats_;
        private int gameCount_;
        private byte memoizedIsInitialized = -1;

        // Use XingningMahjongGameInfo.newBuilder() to construct.
        private XingningMahjongGameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private XingningMahjongGameInfo() {
            gameStatus_ = 0;
            operationUser_ = 0;
            lastOperationUser_ = 0;
            seats_ = java.util.Collections.emptyList();
            gameCount_ = 0;
        }

        private XingningMahjongGameInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            int rawValue = input.readEnum();

                            gameStatus_ = rawValue;
                            break;
                        }
                        case 16: {

                            operationUser_ = input.readUInt32();
                            break;
                        }
                        case 24: {

                            lastOperationUser_ = input.readUInt32();
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                seats_ = new java.util.ArrayList<mahjong.mode.Xingning.XingningMahjongSeatGameInfo>();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            seats_.add(
                                    input.readMessage(mahjong.mode.Xingning.XingningMahjongSeatGameInfo.parser(), extensionRegistry));
                            break;
                        }
                        case 40: {

                            gameCount_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    seats_ = java.util.Collections.unmodifiableList(seats_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongGameInfo_descriptor;
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningMahjongGameInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningMahjongGameInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningMahjongGameInfo> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongGameInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningMahjongGameInfo.class, mahjong.mode.Xingning.XingningMahjongGameInfo.Builder.class);
        }

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        public int getGameStatusValue() {
            return gameStatus_;
        }

        /**
         * <pre>
         * 游戏状态
         * </pre>
         * <p>
         * <code>.GameStatus gameStatus = 1;</code>
         */
        public mahjong.mode.GameBase.GameStatus getGameStatus() {
            mahjong.mode.GameBase.GameStatus result = mahjong.mode.GameBase.GameStatus.valueOf(gameStatus_);
            return result == null ? mahjong.mode.GameBase.GameStatus.UNRECOGNIZED : result;
        }

        /**
         * <pre>
         * 当前操作的人
         * </pre>
         * <p>
         * <code>uint32 operationUser = 2;</code>
         */
        public int getOperationUser() {
            return operationUser_;
        }

        /**
         * <pre>
         * 上家出牌人
         * </pre>
         * <p>
         * <code>uint32 lastOperationUser = 3;</code>
         */
        public int getLastOperationUser() {
            return lastOperationUser_;
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        public java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameInfo> getSeatsList() {
            return seats_;
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        public java.util.List<? extends mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder>
        getSeatsOrBuilderList() {
            return seats_;
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        public int getSeatsCount() {
            return seats_.size();
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongSeatGameInfo getSeats(int index) {
            return seats_.get(index);
        }

        /**
         * <pre>
         * 座位
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
                int index) {
            return seats_.get(index);
        }

        /**
         * <pre>
         * 当前游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameCount = 5;</code>
         */
        public int getGameCount() {
            return gameCount_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (gameStatus_ != mahjong.mode.GameBase.GameStatus.WAITING.getNumber()) {
                output.writeEnum(1, gameStatus_);
            }
            if (operationUser_ != 0) {
                output.writeUInt32(2, operationUser_);
            }
            if (lastOperationUser_ != 0) {
                output.writeUInt32(3, lastOperationUser_);
            }
            for (int i = 0; i < seats_.size(); i++) {
                output.writeMessage(4, seats_.get(i));
            }
            if (gameCount_ != 0) {
                output.writeUInt32(5, gameCount_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (gameStatus_ != mahjong.mode.GameBase.GameStatus.WAITING.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(1, gameStatus_);
            }
            if (operationUser_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, operationUser_);
            }
            if (lastOperationUser_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, lastOperationUser_);
            }
            for (int i = 0; i < seats_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, seats_.get(i));
            }
            if (gameCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, gameCount_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningMahjongGameInfo)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningMahjongGameInfo other = (mahjong.mode.Xingning.XingningMahjongGameInfo) obj;

            boolean result = true;
            result = result && gameStatus_ == other.gameStatus_;
            result = result && (getOperationUser()
                    == other.getOperationUser());
            result = result && (getLastOperationUser()
                    == other.getLastOperationUser());
            result = result && getSeatsList()
                    .equals(other.getSeatsList());
            result = result && (getGameCount()
                    == other.getGameCount());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + GAMESTATUS_FIELD_NUMBER;
            hash = (53 * hash) + gameStatus_;
            hash = (37 * hash) + OPERATIONUSER_FIELD_NUMBER;
            hash = (53 * hash) + getOperationUser();
            hash = (37 * hash) + LASTOPERATIONUSER_FIELD_NUMBER;
            hash = (53 * hash) + getLastOperationUser();
            if (getSeatsCount() > 0) {
                hash = (37 * hash) + SEATS_FIELD_NUMBER;
                hash = (53 * hash) + getSeatsList().hashCode();
            }
            hash = (37 * hash) + GAMECOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getGameCount();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningMahjongGameInfo> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningMahjongGameInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 游戏信息  GAME_INFO
         * </pre>
         * <p>
         * Protobuf type {@code XingningMahjongGameInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningMahjongGameInfo)
                mahjong.mode.Xingning.XingningMahjongGameInfoOrBuilder {
            private int bitField0_;
            private int gameStatus_ = 0;
            private int operationUser_;
            private int lastOperationUser_;
            private java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameInfo> seats_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.XingningMahjongSeatGameInfo, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder, mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder> seatsBuilder_;
            private int gameCount_;

            // Construct using mahjong.mode.Xingning.XingningMahjongGameInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongGameInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongGameInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningMahjongGameInfo.class, mahjong.mode.Xingning.XingningMahjongGameInfo.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getSeatsFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                gameStatus_ = 0;

                operationUser_ = 0;

                lastOperationUser_ = 0;

                if (seatsBuilder_ == null) {
                    seats_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    seatsBuilder_.clear();
                }
                gameCount_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongGameInfo_descriptor;
            }

            public mahjong.mode.Xingning.XingningMahjongGameInfo getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningMahjongGameInfo.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningMahjongGameInfo build() {
                mahjong.mode.Xingning.XingningMahjongGameInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningMahjongGameInfo buildPartial() {
                mahjong.mode.Xingning.XingningMahjongGameInfo result = new mahjong.mode.Xingning.XingningMahjongGameInfo(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.gameStatus_ = gameStatus_;
                result.operationUser_ = operationUser_;
                result.lastOperationUser_ = lastOperationUser_;
                if (seatsBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008)) {
                        seats_ = java.util.Collections.unmodifiableList(seats_);
                        bitField0_ = (bitField0_ & ~0x00000008);
                    }
                    result.seats_ = seats_;
                } else {
                    result.seats_ = seatsBuilder_.build();
                }
                result.gameCount_ = gameCount_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningMahjongGameInfo) {
                    return mergeFrom((mahjong.mode.Xingning.XingningMahjongGameInfo) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningMahjongGameInfo other) {
                if (other == mahjong.mode.Xingning.XingningMahjongGameInfo.getDefaultInstance()) return this;
                if (other.gameStatus_ != 0) {
                    setGameStatusValue(other.getGameStatusValue());
                }
                if (other.getOperationUser() != 0) {
                    setOperationUser(other.getOperationUser());
                }
                if (other.getLastOperationUser() != 0) {
                    setLastOperationUser(other.getLastOperationUser());
                }
                if (seatsBuilder_ == null) {
                    if (!other.seats_.isEmpty()) {
                        if (seats_.isEmpty()) {
                            seats_ = other.seats_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                        } else {
                            ensureSeatsIsMutable();
                            seats_.addAll(other.seats_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.seats_.isEmpty()) {
                        if (seatsBuilder_.isEmpty()) {
                            seatsBuilder_.dispose();
                            seatsBuilder_ = null;
                            seats_ = other.seats_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                            seatsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getSeatsFieldBuilder() : null;
                        } else {
                            seatsBuilder_.addAllMessages(other.seats_);
                        }
                    }
                }
                if (other.getGameCount() != 0) {
                    setGameCount(other.getGameCount());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningMahjongGameInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningMahjongGameInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public int getGameStatusValue() {
                return gameStatus_;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public Builder setGameStatusValue(int value) {
                gameStatus_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public mahjong.mode.GameBase.GameStatus getGameStatus() {
                mahjong.mode.GameBase.GameStatus result = mahjong.mode.GameBase.GameStatus.valueOf(gameStatus_);
                return result == null ? mahjong.mode.GameBase.GameStatus.UNRECOGNIZED : result;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public Builder setGameStatus(mahjong.mode.GameBase.GameStatus value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                gameStatus_ = value.getNumber();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏状态
             * </pre>
             * <p>
             * <code>.GameStatus gameStatus = 1;</code>
             */
            public Builder clearGameStatus() {

                gameStatus_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前操作的人
             * </pre>
             * <p>
             * <code>uint32 operationUser = 2;</code>
             */
            public int getOperationUser() {
                return operationUser_;
            }

            /**
             * <pre>
             * 当前操作的人
             * </pre>
             * <p>
             * <code>uint32 operationUser = 2;</code>
             */
            public Builder setOperationUser(int value) {

                operationUser_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前操作的人
             * </pre>
             * <p>
             * <code>uint32 operationUser = 2;</code>
             */
            public Builder clearOperationUser() {

                operationUser_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 上家出牌人
             * </pre>
             * <p>
             * <code>uint32 lastOperationUser = 3;</code>
             */
            public int getLastOperationUser() {
                return lastOperationUser_;
            }

            /**
             * <pre>
             * 上家出牌人
             * </pre>
             * <p>
             * <code>uint32 lastOperationUser = 3;</code>
             */
            public Builder setLastOperationUser(int value) {

                lastOperationUser_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 上家出牌人
             * </pre>
             * <p>
             * <code>uint32 lastOperationUser = 3;</code>
             */
            public Builder clearLastOperationUser() {

                lastOperationUser_ = 0;
                onChanged();
                return this;
            }

            private void ensureSeatsIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    seats_ = new java.util.ArrayList<mahjong.mode.Xingning.XingningMahjongSeatGameInfo>(seats_);
                    bitField0_ |= 0x00000008;
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameInfo> getSeatsList() {
                if (seatsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(seats_);
                } else {
                    return seatsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public int getSeatsCount() {
                if (seatsBuilder_ == null) {
                    return seats_.size();
                } else {
                    return seatsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameInfo getSeats(int index) {
                if (seatsBuilder_ == null) {
                    return seats_.get(index);
                } else {
                    return seatsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder setSeats(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.set(index, value);
                    onChanged();
                } else {
                    seatsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder setSeats(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(mahjong.mode.Xingning.XingningMahjongSeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.add(value);
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameInfo value) {
                if (seatsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSeatsIsMutable();
                    seats_.add(index, value);
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(
                    mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.add(builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder addSeats(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder builderForValue) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    seatsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder addAllSeats(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.XingningMahjongSeatGameInfo> values) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, seats_);
                    onChanged();
                } else {
                    seatsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder clearSeats() {
                if (seatsBuilder_ == null) {
                    seats_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                    onChanged();
                } else {
                    seatsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public Builder removeSeats(int index) {
                if (seatsBuilder_ == null) {
                    ensureSeatsIsMutable();
                    seats_.remove(index);
                    onChanged();
                } else {
                    seatsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder getSeatsBuilder(
                    int index) {
                return getSeatsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
                    int index) {
                if (seatsBuilder_ == null) {
                    return seats_.get(index);
                } else {
                    return seatsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public java.util.List<? extends mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder>
            getSeatsOrBuilderList() {
                if (seatsBuilder_ != null) {
                    return seatsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(seats_);
                }
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder addSeatsBuilder() {
                return getSeatsFieldBuilder().addBuilder(
                        mahjong.mode.Xingning.XingningMahjongSeatGameInfo.getDefaultInstance());
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder addSeatsBuilder(
                    int index) {
                return getSeatsFieldBuilder().addBuilder(
                        index, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.getDefaultInstance());
            }

            /**
             * <pre>
             * 座位
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongSeatGameInfo seats = 4;</code>
             */
            public java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder>
            getSeatsBuilderList() {
                return getSeatsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.XingningMahjongSeatGameInfo, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder, mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder>
            getSeatsFieldBuilder() {
                if (seatsBuilder_ == null) {
                    seatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Xingning.XingningMahjongSeatGameInfo, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder, mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder>(
                            seats_,
                            ((bitField0_ & 0x00000008) == 0x00000008),
                            getParentForChildren(),
                            isClean());
                    seats_ = null;
                }
                return seatsBuilder_;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 5;</code>
             */
            public int getGameCount() {
                return gameCount_;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 5;</code>
             */
            public Builder setGameCount(int value) {

                gameCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当前游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameCount = 5;</code>
             */
            public Builder clearGameCount() {

                gameCount_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:XingningMahjongGameInfo)
        }

    }

    /**
     * <pre>
     * 玩家游戏信息
     * </pre>
     * <p>
     * Protobuf type {@code XingningMahjongSeatGameInfo}
     */
    public static final class XingningMahjongSeatGameInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningMahjongSeatGameInfo)
            XingningMahjongSeatGameInfoOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int INITIALCARDS_FIELD_NUMBER = 2;
        public static final int CARDS_FIELD_NUMBER = 3;
        public static final int CARDSSIZE_FIELD_NUMBER = 4;
        public static final int PENGCARDS_FIELD_NUMBER = 5;
        public static final int GANGCARDS_FIELD_NUMBER = 6;
        public static final int CHICARDS_FIELD_NUMBER = 7;
        public static final int PLAYEDCARDS_FIELD_NUMBER = 8;
        public static final int ISROBOT_FIELD_NUMBER = 9;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningMahjongSeatGameInfo)
        private static final mahjong.mode.Xingning.XingningMahjongSeatGameInfo DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningMahjongSeatGameInfo>
                PARSER = new com.google.protobuf.AbstractParser<XingningMahjongSeatGameInfo>() {
            public XingningMahjongSeatGameInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningMahjongSeatGameInfo(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningMahjongSeatGameInfo();
        }

        private int bitField0_;
        private int iD_;
        private java.util.List<java.lang.Integer> initialCards_;
        private int initialCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> cards_;
        private int cardsMemoizedSerializedSize = -1;
        private int cardsSize_;
        private java.util.List<java.lang.Integer> pengCards_;
        private int pengCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> gangCards_;
        private int gangCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> chiCards_;
        private int chiCardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> playedCards_;
        private int playedCardsMemoizedSerializedSize = -1;
        private boolean isRobot_;
        private byte memoizedIsInitialized = -1;

        // Use XingningMahjongSeatGameInfo.newBuilder() to construct.
        private XingningMahjongSeatGameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private XingningMahjongSeatGameInfo() {
            iD_ = 0;
            initialCards_ = java.util.Collections.emptyList();
            cards_ = java.util.Collections.emptyList();
            cardsSize_ = 0;
            pengCards_ = java.util.Collections.emptyList();
            gangCards_ = java.util.Collections.emptyList();
            chiCards_ = java.util.Collections.emptyList();
            playedCards_ = java.util.Collections.emptyList();
            isRobot_ = false;
        }

        private XingningMahjongSeatGameInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            initialCards_.add(input.readInt32());
                            break;
                        }
                        case 18: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                initialCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 24: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            cards_.add(input.readInt32());
                            break;
                        }
                        case 26: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                cards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 32: {

                            cardsSize_ = input.readUInt32();
                            break;
                        }
                        case 40: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            pengCards_.add(input.readInt32());
                            break;
                        }
                        case 42: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                pengCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 48: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            gangCards_.add(input.readInt32());
                            break;
                        }
                        case 50: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                gangCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 56: {
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            chiCards_.add(input.readInt32());
                            break;
                        }
                        case 58: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                chiCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 64: {
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            playedCards_.add(input.readInt32());
                            break;
                        }
                        case 66: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000080;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                playedCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 72: {

                            isRobot_ = input.readBool();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
                }
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                }
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                }
                if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
        }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameInfo_descriptor;
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
    }

    public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningMahjongSeatGameInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningMahjongSeatGameInfo> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningMahjongSeatGameInfo.class, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder.class);
        }

        /**
         * <pre>
         * ID
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         * 初始手牌
         * </pre>
         * <p>
         * <code>repeated int32 initialCards = 2;</code>
         */
        public java.util.List<java.lang.Integer>
        getInitialCardsList() {
            return initialCards_;
        }

        /**
         * <pre>
         * 初始手牌
         * </pre>
         * <p>
         * <code>repeated int32 initialCards = 2;</code>
         */
        public int getInitialCardsCount() {
            return initialCards_.size();
        }

        /**
         * <pre>
         * 初始手牌
         * </pre>
         * <p>
         * <code>repeated int32 initialCards = 2;</code>
         */
        public int getInitialCards(int index) {
            return initialCards_.get(index);
        }

        /**
         * <pre>
         * 当前手牌(如果是其他玩家的,就没有)
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return cards_;
        }

        /**
         * <pre>
         * 当前手牌(如果是其他玩家的,就没有)
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public int getCardsCount() {
            return cards_.size();
        }

        /**
         * <pre>
         * 当前手牌(如果是其他玩家的,就没有)
         * </pre>
         * <p>
         * <code>repeated int32 cards = 3;</code>
         */
        public int getCards(int index) {
            return cards_.get(index);
        }

        /**
         * <pre>
         * 其他玩家手牌数量
         * </pre>
         * <p>
         * <code>uint32 cardsSize = 4;</code>
         */
        public int getCardsSize() {
            return cardsSize_;
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        public java.util.List<java.lang.Integer>
        getPengCardsList() {
            return pengCards_;
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        public int getPengCardsCount() {
            return pengCards_.size();
        }

        /**
         * <pre>
         * 碰的牌
         * </pre>
         * <p>
         * <code>repeated int32 pengCards = 5;</code>
         */
        public int getPengCards(int index) {
            return pengCards_.get(index);
        }

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 6;</code>
         */
        public java.util.List<java.lang.Integer>
        getGangCardsList() {
            return gangCards_;
        }

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 6;</code>
         */
        public int getGangCardsCount() {
            return gangCards_.size();
        }

        /**
         * <pre>
         * 杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 6;</code>
         */
        public int getGangCards(int index) {
            return gangCards_.get(index);
        }

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        public java.util.List<java.lang.Integer>
        getChiCardsList() {
            return chiCards_;
        }

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        public int getChiCardsCount() {
            return chiCards_.size();
        }

        /**
         * <pre>
         * 吃的牌
         * </pre>
         * <p>
         * <code>repeated int32 chiCards = 7;</code>
         */
        public int getChiCards(int index) {
            return chiCards_.get(index);
        }

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated int32 playedCards = 8;</code>
         */
        public java.util.List<java.lang.Integer>
        getPlayedCardsList() {
            return playedCards_;
        }

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated int32 playedCards = 8;</code>
         */
        public int getPlayedCardsCount() {
            return playedCards_.size();
        }

        /**
         * <pre>
         * 出过的牌
         * </pre>
         * <p>
         * <code>repeated int32 playedCards = 8;</code>
         */
        public int getPlayedCards(int index) {
            return playedCards_.get(index);
        }

        /**
         * <pre>
         * 是否托管
         * </pre>
         * <p>
         * <code>bool isRobot = 9;</code>
         */
        public boolean getIsRobot() {
            return isRobot_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (getInitialCardsList().size() > 0) {
                output.writeUInt32NoTag(18);
                output.writeUInt32NoTag(initialCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < initialCards_.size(); i++) {
                output.writeInt32NoTag(initialCards_.get(i));
            }
            if (getCardsList().size() > 0) {
                output.writeUInt32NoTag(26);
                output.writeUInt32NoTag(cardsMemoizedSerializedSize);
            }
            for (int i = 0; i < cards_.size(); i++) {
                output.writeInt32NoTag(cards_.get(i));
            }
            if (cardsSize_ != 0) {
                output.writeUInt32(4, cardsSize_);
            }
            if (getPengCardsList().size() > 0) {
                output.writeUInt32NoTag(42);
                output.writeUInt32NoTag(pengCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < pengCards_.size(); i++) {
                output.writeInt32NoTag(pengCards_.get(i));
            }
            if (getGangCardsList().size() > 0) {
                output.writeUInt32NoTag(50);
                output.writeUInt32NoTag(gangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < gangCards_.size(); i++) {
                output.writeInt32NoTag(gangCards_.get(i));
            }
            if (getChiCardsList().size() > 0) {
                output.writeUInt32NoTag(58);
                output.writeUInt32NoTag(chiCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < chiCards_.size(); i++) {
                output.writeInt32NoTag(chiCards_.get(i));
            }
            if (getPlayedCardsList().size() > 0) {
                output.writeUInt32NoTag(66);
                output.writeUInt32NoTag(playedCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < playedCards_.size(); i++) {
                output.writeInt32NoTag(playedCards_.get(i));
            }
            if (isRobot_ != false) {
                output.writeBool(9, isRobot_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < initialCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(initialCards_.get(i));
                }
                size += dataSize;
                if (!getInitialCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                initialCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < cards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(cards_.get(i));
                }
                size += dataSize;
                if (!getCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                cardsMemoizedSerializedSize = dataSize;
            }
            if (cardsSize_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, cardsSize_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < pengCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(pengCards_.get(i));
                }
                size += dataSize;
                if (!getPengCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                pengCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < gangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(gangCards_.get(i));
                }
                size += dataSize;
                if (!getGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                gangCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < chiCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(chiCards_.get(i));
                }
                size += dataSize;
                if (!getChiCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                chiCardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < playedCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(playedCards_.get(i));
                }
                size += dataSize;
                if (!getPlayedCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                playedCardsMemoizedSerializedSize = dataSize;
            }
            if (isRobot_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(9, isRobot_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningMahjongSeatGameInfo)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningMahjongSeatGameInfo other = (mahjong.mode.Xingning.XingningMahjongSeatGameInfo) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && getInitialCardsList()
                    .equals(other.getInitialCardsList());
            result = result && getCardsList()
                    .equals(other.getCardsList());
            result = result && (getCardsSize()
                    == other.getCardsSize());
            result = result && getPengCardsList()
                    .equals(other.getPengCardsList());
            result = result && getGangCardsList()
                    .equals(other.getGangCardsList());
            result = result && getChiCardsList()
                    .equals(other.getChiCardsList());
            result = result && getPlayedCardsList()
                    .equals(other.getPlayedCardsList());
            result = result && (getIsRobot()
                    == other.getIsRobot());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            if (getInitialCardsCount() > 0) {
                hash = (37 * hash) + INITIALCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getInitialCardsList().hashCode();
            }
            if (getCardsCount() > 0) {
                hash = (37 * hash) + CARDS_FIELD_NUMBER;
                hash = (53 * hash) + getCardsList().hashCode();
            }
            hash = (37 * hash) + CARDSSIZE_FIELD_NUMBER;
            hash = (53 * hash) + getCardsSize();
            if (getPengCardsCount() > 0) {
                hash = (37 * hash) + PENGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getPengCardsList().hashCode();
            }
            if (getGangCardsCount() > 0) {
                hash = (37 * hash) + GANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getGangCardsList().hashCode();
            }
            if (getChiCardsCount() > 0) {
                hash = (37 * hash) + CHICARDS_FIELD_NUMBER;
                hash = (53 * hash) + getChiCardsList().hashCode();
            }
            if (getPlayedCardsCount() > 0) {
                hash = (37 * hash) + PLAYEDCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getPlayedCardsList().hashCode();
            }
            hash = (37 * hash) + ISROBOT_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getIsRobot());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningMahjongSeatGameInfo> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningMahjongSeatGameInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 玩家游戏信息
         * </pre>
         * <p>
         * Protobuf type {@code XingningMahjongSeatGameInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningMahjongSeatGameInfo)
                mahjong.mode.Xingning.XingningMahjongSeatGameInfoOrBuilder {
            private int bitField0_;
            private int iD_;
            private java.util.List<java.lang.Integer> initialCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
            private int cardsSize_;
            private java.util.List<java.lang.Integer> pengCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> gangCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> chiCards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> playedCards_ = java.util.Collections.emptyList();
            private boolean isRobot_;

            // Construct using mahjong.mode.Xingning.XingningMahjongSeatGameInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameInfo_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningMahjongSeatGameInfo.class, mahjong.mode.Xingning.XingningMahjongSeatGameInfo.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                initialCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                cardsSize_ = 0;

                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000010);
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                playedCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                isRobot_ = false;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameInfo_descriptor;
            }

            public mahjong.mode.Xingning.XingningMahjongSeatGameInfo getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningMahjongSeatGameInfo.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningMahjongSeatGameInfo build() {
                mahjong.mode.Xingning.XingningMahjongSeatGameInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningMahjongSeatGameInfo buildPartial() {
                mahjong.mode.Xingning.XingningMahjongSeatGameInfo result = new mahjong.mode.Xingning.XingningMahjongSeatGameInfo(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.iD_ = iD_;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.initialCards_ = initialCards_;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.cards_ = cards_;
                result.cardsSize_ = cardsSize_;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
                    bitField0_ = (bitField0_ & ~0x00000010);
                }
                result.pengCards_ = pengCards_;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                    bitField0_ = (bitField0_ & ~0x00000020);
                }
                result.gangCards_ = gangCards_;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
                    bitField0_ = (bitField0_ & ~0x00000040);
                }
                result.chiCards_ = chiCards_;
                if (((bitField0_ & 0x00000080) == 0x00000080)) {
                    playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
                    bitField0_ = (bitField0_ & ~0x00000080);
                }
                result.playedCards_ = playedCards_;
                result.isRobot_ = isRobot_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningMahjongSeatGameInfo) {
                    return mergeFrom((mahjong.mode.Xingning.XingningMahjongSeatGameInfo) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningMahjongSeatGameInfo other) {
                if (other == mahjong.mode.Xingning.XingningMahjongSeatGameInfo.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (!other.initialCards_.isEmpty()) {
                    if (initialCards_.isEmpty()) {
                        initialCards_ = other.initialCards_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureInitialCardsIsMutable();
                        initialCards_.addAll(other.initialCards_);
                    }
                    onChanged();
                }
                if (!other.cards_.isEmpty()) {
                    if (cards_.isEmpty()) {
                        cards_ = other.cards_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureCardsIsMutable();
                        cards_.addAll(other.cards_);
                    }
                    onChanged();
                }
                if (other.getCardsSize() != 0) {
                    setCardsSize(other.getCardsSize());
                }
                if (!other.pengCards_.isEmpty()) {
                    if (pengCards_.isEmpty()) {
                        pengCards_ = other.pengCards_;
                        bitField0_ = (bitField0_ & ~0x00000010);
                    } else {
                        ensurePengCardsIsMutable();
                        pengCards_.addAll(other.pengCards_);
                    }
                    onChanged();
                }
                if (!other.gangCards_.isEmpty()) {
                    if (gangCards_.isEmpty()) {
                        gangCards_ = other.gangCards_;
                        bitField0_ = (bitField0_ & ~0x00000020);
                    } else {
                        ensureGangCardsIsMutable();
                        gangCards_.addAll(other.gangCards_);
                    }
                    onChanged();
                }
                if (!other.chiCards_.isEmpty()) {
                    if (chiCards_.isEmpty()) {
                        chiCards_ = other.chiCards_;
                        bitField0_ = (bitField0_ & ~0x00000040);
                    } else {
                        ensureChiCardsIsMutable();
                        chiCards_.addAll(other.chiCards_);
                    }
                    onChanged();
                }
                if (!other.playedCards_.isEmpty()) {
                    if (playedCards_.isEmpty()) {
                        playedCards_ = other.playedCards_;
                        bitField0_ = (bitField0_ & ~0x00000080);
                    } else {
                        ensurePlayedCardsIsMutable();
                        playedCards_.addAll(other.playedCards_);
                    }
                    onChanged();
                }
                if (other.getIsRobot() != false) {
                    setIsRobot(other.getIsRobot());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningMahjongSeatGameInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningMahjongSeatGameInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *ID
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            private void ensureInitialCardsIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    initialCards_ = new java.util.ArrayList<java.lang.Integer>(initialCards_);
                    bitField0_ |= 0x00000002;
                }
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public java.util.List<java.lang.Integer>
            getInitialCardsList() {
                return java.util.Collections.unmodifiableList(initialCards_);
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public int getInitialCardsCount() {
                return initialCards_.size();
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public int getInitialCards(int index) {
                return initialCards_.get(index);
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder setInitialCards(
                    int index, int value) {
                ensureInitialCardsIsMutable();
                initialCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder addInitialCards(int value) {
                ensureInitialCardsIsMutable();
                initialCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder addAllInitialCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureInitialCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, initialCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *初始手牌
             * </pre>
             *
             * <code>repeated int32 initialCards = 2;</code>
             */
            public Builder clearInitialCards() {
                initialCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
                return this;
            }

            private void ensureCardsIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
                    bitField0_ |= 0x00000004;
                }
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public java.util.List<java.lang.Integer>
            getCardsList() {
                return java.util.Collections.unmodifiableList(cards_);
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public int getCardsCount() {
                return cards_.size();
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public int getCards(int index) {
                return cards_.get(index);
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder setCards(
                    int index, int value) {
                ensureCardsIsMutable();
                cards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder addCards(int value) {
                ensureCardsIsMutable();
                cards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder addAllCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, cards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *当前手牌(如果是其他玩家的,就没有)
             * </pre>
             *
             * <code>repeated int32 cards = 3;</code>
             */
            public Builder clearCards() {
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *其他玩家手牌数量
             * </pre>
             *
             * <code>uint32 cardsSize = 4;</code>
             */
            public int getCardsSize() {
                return cardsSize_;
            }

            /**
             * <pre>
             *其他玩家手牌数量
             * </pre>
             *
             * <code>uint32 cardsSize = 4;</code>
             */
            public Builder setCardsSize(int value) {

                cardsSize_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *其他玩家手牌数量
             * </pre>
             *
             * <code>uint32 cardsSize = 4;</code>
             */
            public Builder clearCardsSize() {

                cardsSize_ = 0;
                onChanged();
                return this;
            }

            private void ensurePengCardsIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    pengCards_ = new java.util.ArrayList<java.lang.Integer>(pengCards_);
                    bitField0_ |= 0x00000010;
                }
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 5;</code>
             */
            public java.util.List<java.lang.Integer>
            getPengCardsList() {
                return java.util.Collections.unmodifiableList(pengCards_);
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 5;</code>
             */
            public int getPengCardsCount() {
                return pengCards_.size();
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 5;</code>
             */
            public int getPengCards(int index) {
                return pengCards_.get(index);
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder setPengCards(
                    int index, int value) {
                ensurePengCardsIsMutable();
                pengCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder addPengCards(int value) {
                ensurePengCardsIsMutable();
                pengCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder addAllPengCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensurePengCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, pengCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *碰的牌
             * </pre>
             *
             * <code>repeated int32 pengCards = 5;</code>
             */
            public Builder clearPengCards() {
                pengCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000010);
                onChanged();
                return this;
            }

            private void ensureGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    gangCards_ = new java.util.ArrayList<java.lang.Integer>(gangCards_);
                    bitField0_ |= 0x00000020;
                }
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 6;</code>
             */
            public java.util.List<java.lang.Integer>
            getGangCardsList() {
                return java.util.Collections.unmodifiableList(gangCards_);
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 6;</code>
             */
            public int getGangCardsCount() {
                return gangCards_.size();
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 6;</code>
             */
            public int getGangCards(int index) {
                return gangCards_.get(index);
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 6;</code>
             */
            public Builder setGangCards(
                    int index, int value) {
                ensureGangCardsIsMutable();
                gangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 6;</code>
             */
            public Builder addGangCards(int value) {
                ensureGangCardsIsMutable();
                gangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 6;</code>
             */
            public Builder addAllGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, gangCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 6;</code>
             */
            public Builder clearGangCards() {
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                onChanged();
                return this;
            }

            private void ensureChiCardsIsMutable() {
                if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                    chiCards_ = new java.util.ArrayList<java.lang.Integer>(chiCards_);
                    bitField0_ |= 0x00000040;
                }
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public java.util.List<java.lang.Integer>
            getChiCardsList() {
                return java.util.Collections.unmodifiableList(chiCards_);
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public int getChiCardsCount() {
                return chiCards_.size();
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public int getChiCards(int index) {
                return chiCards_.get(index);
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder setChiCards(
                    int index, int value) {
                ensureChiCardsIsMutable();
                chiCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder addChiCards(int value) {
                ensureChiCardsIsMutable();
                chiCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder addAllChiCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureChiCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, chiCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *吃的牌
             * </pre>
             *
             * <code>repeated int32 chiCards = 7;</code>
             */
            public Builder clearChiCards() {
                chiCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                onChanged();
                return this;
            }

            private void ensurePlayedCardsIsMutable() {
                if (!((bitField0_ & 0x00000080) == 0x00000080)) {
                    playedCards_ = new java.util.ArrayList<java.lang.Integer>(playedCards_);
                    bitField0_ |= 0x00000080;
                }
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 8;</code>
             */
            public java.util.List<java.lang.Integer>
            getPlayedCardsList() {
                return java.util.Collections.unmodifiableList(playedCards_);
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 8;</code>
             */
            public int getPlayedCardsCount() {
                return playedCards_.size();
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 8;</code>
             */
            public int getPlayedCards(int index) {
                return playedCards_.get(index);
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 8;</code>
             */
            public Builder setPlayedCards(
                    int index, int value) {
                ensurePlayedCardsIsMutable();
                playedCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *出过的牌
             * </pre>
             *
             * <code>repeated int32 playedCards = 8;</code>
             */
            public Builder addPlayedCards(int value) {
                ensurePlayedCardsIsMutable();
                playedCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 出过的牌
             * </pre>
             * <p>
             * <code>repeated int32 playedCards = 8;</code>
             */
            public Builder addAllPlayedCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensurePlayedCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, playedCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 出过的牌
             * </pre>
             * <p>
             * <code>repeated int32 playedCards = 8;</code>
             */
            public Builder clearPlayedCards() {
                playedCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000080);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 是否托管
             * </pre>
             * <p>
             * <code>bool isRobot = 9;</code>
             */
            public boolean getIsRobot() {
                return isRobot_;
            }

            /**
             * <pre>
             * 是否托管
             * </pre>
             * <p>
             * <code>bool isRobot = 9;</code>
             */
            public Builder setIsRobot(boolean value) {

                isRobot_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 是否托管
             * </pre>
             * <p>
             * <code>bool isRobot = 9;</code>
             */
            public Builder clearIsRobot() {

                isRobot_ = false;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:XingningMahjongSeatGameInfo)
        }

    }

    /**
     * <pre>
     * 当局游戏结果 RESULT
     * </pre>
     * <p>
     * Protobuf type {@code XingningMahjongResultResponse}
     */
    public static final class XingningMahjongResultResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningMahjongResultResponse)
            XingningMahjongResultResponseOrBuilder {
        public static final int USERRESULT_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningMahjongResultResponse)
        private static final mahjong.mode.Xingning.XingningMahjongResultResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningMahjongResultResponse>
                PARSER = new com.google.protobuf.AbstractParser<XingningMahjongResultResponse>() {
            public XingningMahjongResultResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningMahjongResultResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningMahjongResultResponse();
        }

        private java.util.List<mahjong.mode.Xingning.XingningMahjongUserResult> userResult_;
        private byte memoizedIsInitialized = -1;

        // Use XingningMahjongResultResponse.newBuilder() to construct.
        private XingningMahjongResultResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private XingningMahjongResultResponse() {
            userResult_ = java.util.Collections.emptyList();
        }

        private XingningMahjongResultResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                userResult_ = new java.util.ArrayList<mahjong.mode.Xingning.XingningMahjongUserResult>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            userResult_.add(
                                    input.readMessage(mahjong.mode.Xingning.XingningMahjongUserResult.parser(), extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
      } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    userResult_ = java.util.Collections.unmodifiableList(userResult_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongResultResponse_descriptor;
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningMahjongResultResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningMahjongResultResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningMahjongResultResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongResultResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningMahjongResultResponse.class, mahjong.mode.Xingning.XingningMahjongResultResponse.Builder.class);
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        public java.util.List<mahjong.mode.Xingning.XingningMahjongUserResult> getUserResultList() {
            return userResult_;
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        public java.util.List<? extends mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder>
        getUserResultOrBuilderList() {
            return userResult_;
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        public int getUserResultCount() {
            return userResult_.size();
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongUserResult getUserResult(int index) {
            return userResult_.get(index);
        }

        /**
         * <pre>
         * 用户结算
         * </pre>
         * <p>
         * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder getUserResultOrBuilder(
                int index) {
            return userResult_.get(index);
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < userResult_.size(); i++) {
                output.writeMessage(1, userResult_.get(i));
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < userResult_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, userResult_.get(i));
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningMahjongResultResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningMahjongResultResponse other = (mahjong.mode.Xingning.XingningMahjongResultResponse) obj;

            boolean result = true;
            result = result && getUserResultList()
                    .equals(other.getUserResultList());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getUserResultCount() > 0) {
                hash = (37 * hash) + USERRESULT_FIELD_NUMBER;
                hash = (53 * hash) + getUserResultList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningMahjongResultResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningMahjongResultResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 当局游戏结果 RESULT
         * </pre>
         * <p>
         * Protobuf type {@code XingningMahjongResultResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningMahjongResultResponse)
                mahjong.mode.Xingning.XingningMahjongResultResponseOrBuilder {
            private int bitField0_;
            private java.util.List<mahjong.mode.Xingning.XingningMahjongUserResult> userResult_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.XingningMahjongUserResult, mahjong.mode.Xingning.XingningMahjongUserResult.Builder, mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder> userResultBuilder_;

            // Construct using mahjong.mode.Xingning.XingningMahjongResultResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongResultResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongResultResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningMahjongResultResponse.class, mahjong.mode.Xingning.XingningMahjongResultResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getUserResultFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (userResultBuilder_ == null) {
                    userResult_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    userResultBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongResultResponse_descriptor;
            }

            public mahjong.mode.Xingning.XingningMahjongResultResponse getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningMahjongResultResponse.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningMahjongResultResponse build() {
                mahjong.mode.Xingning.XingningMahjongResultResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningMahjongResultResponse buildPartial() {
                mahjong.mode.Xingning.XingningMahjongResultResponse result = new mahjong.mode.Xingning.XingningMahjongResultResponse(this);
                int from_bitField0_ = bitField0_;
                if (userResultBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        userResult_ = java.util.Collections.unmodifiableList(userResult_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.userResult_ = userResult_;
                } else {
                    result.userResult_ = userResultBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningMahjongResultResponse) {
                    return mergeFrom((mahjong.mode.Xingning.XingningMahjongResultResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningMahjongResultResponse other) {
                if (other == mahjong.mode.Xingning.XingningMahjongResultResponse.getDefaultInstance()) return this;
                if (userResultBuilder_ == null) {
                    if (!other.userResult_.isEmpty()) {
                        if (userResult_.isEmpty()) {
                            userResult_ = other.userResult_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureUserResultIsMutable();
                            userResult_.addAll(other.userResult_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.userResult_.isEmpty()) {
                        if (userResultBuilder_.isEmpty()) {
                            userResultBuilder_.dispose();
                            userResultBuilder_ = null;
                            userResult_ = other.userResult_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            userResultBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getUserResultFieldBuilder() : null;
                        } else {
                            userResultBuilder_.addAllMessages(other.userResult_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningMahjongResultResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningMahjongResultResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureUserResultIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    userResult_ = new java.util.ArrayList<mahjong.mode.Xingning.XingningMahjongUserResult>(userResult_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.XingningMahjongUserResult> getUserResultList() {
                if (userResultBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(userResult_);
                } else {
                    return userResultBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public int getUserResultCount() {
                if (userResultBuilder_ == null) {
                    return userResult_.size();
                } else {
                    return userResultBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongUserResult getUserResult(int index) {
                if (userResultBuilder_ == null) {
                    return userResult_.get(index);
                } else {
                    return userResultBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder setUserResult(
                    int index, mahjong.mode.Xingning.XingningMahjongUserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.set(index, value);
                    onChanged();
                } else {
                    userResultBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder setUserResult(
                    int index, mahjong.mode.Xingning.XingningMahjongUserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(mahjong.mode.Xingning.XingningMahjongUserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.add(value);
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    int index, mahjong.mode.Xingning.XingningMahjongUserResult value) {
                if (userResultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureUserResultIsMutable();
                    userResult_.add(index, value);
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    mahjong.mode.Xingning.XingningMahjongUserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.add(builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder addUserResult(
                    int index, mahjong.mode.Xingning.XingningMahjongUserResult.Builder builderForValue) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    userResultBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder addAllUserResult(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.XingningMahjongUserResult> values) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, userResult_);
                    onChanged();
                } else {
                    userResultBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder clearUserResult() {
                if (userResultBuilder_ == null) {
                    userResult_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    userResultBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public Builder removeUserResult(int index) {
                if (userResultBuilder_ == null) {
                    ensureUserResultIsMutable();
                    userResult_.remove(index);
                    onChanged();
                } else {
                    userResultBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongUserResult.Builder getUserResultBuilder(
                    int index) {
                return getUserResultFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder getUserResultOrBuilder(
                    int index) {
                if (userResultBuilder_ == null) {
                    return userResult_.get(index);
                } else {
                    return userResultBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public java.util.List<? extends mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder>
            getUserResultOrBuilderList() {
                if (userResultBuilder_ != null) {
                    return userResultBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(userResult_);
                }
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongUserResult.Builder addUserResultBuilder() {
                return getUserResultFieldBuilder().addBuilder(
                        mahjong.mode.Xingning.XingningMahjongUserResult.getDefaultInstance());
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongUserResult.Builder addUserResultBuilder(
                    int index) {
                return getUserResultFieldBuilder().addBuilder(
                        index, mahjong.mode.Xingning.XingningMahjongUserResult.getDefaultInstance());
            }

            /**
             * <pre>
             * 用户结算
             * </pre>
             * <p>
             * <code>repeated .XingningMahjongUserResult userResult = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.XingningMahjongUserResult.Builder>
            getUserResultBuilderList() {
                return getUserResultFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.XingningMahjongUserResult, mahjong.mode.Xingning.XingningMahjongUserResult.Builder, mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder>
            getUserResultFieldBuilder() {
                if (userResultBuilder_ == null) {
                    userResultBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Xingning.XingningMahjongUserResult, mahjong.mode.Xingning.XingningMahjongUserResult.Builder, mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder>(
                            userResult_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    userResult_ = null;
                }
                return userResultBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:XingningMahjongResultResponse)
        }

    }

    /**
     * <pre>
     * 单个人结算
     * </pre>
     * <p>
     * Protobuf type {@code XingningMahjongUserResult}
     */
    public static final class XingningMahjongUserResult extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningMahjongUserResult)
            XingningMahjongUserResultOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int CARDSCORE_FIELD_NUMBER = 2;
        public static final int SCORETYPES_FIELD_NUMBER = 3;
        public static final int GANGSCORE_FIELD_NUMBER = 4;
        public static final int MASCORE_FIELD_NUMBER = 5;
        public static final int CARDS_FIELD_NUMBER = 6;
        public static final int GANGCARDS_FIELD_NUMBER = 7;
        public static final int WINORLOSE_FIELD_NUMBER = 8;
        public static final int SCORE_FIELD_NUMBER = 9;
        private static final com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, mahjong.mode.Xingning.ScoreType> scoreTypes_converter_ =
                new com.google.protobuf.Internal.ListAdapter.Converter<
                        java.lang.Integer, mahjong.mode.Xingning.ScoreType>() {
                    public mahjong.mode.Xingning.ScoreType convert(java.lang.Integer from) {
                        mahjong.mode.Xingning.ScoreType result = mahjong.mode.Xingning.ScoreType.valueOf(from);
                        return result == null ? mahjong.mode.Xingning.ScoreType.UNRECOGNIZED : result;
                    }
                };
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningMahjongUserResult)
        private static final mahjong.mode.Xingning.XingningMahjongUserResult DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningMahjongUserResult>
                PARSER = new com.google.protobuf.AbstractParser<XingningMahjongUserResult>() {
            public XingningMahjongUserResult parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningMahjongUserResult(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningMahjongUserResult();
        }

        private int bitField0_;
        private int iD_;
        private int cardScore_;
        private java.util.List<java.lang.Integer> scoreTypes_;
        private int scoreTypesMemoizedSerializedSize;
        private int gangScore_;
        private int maScore_;
        private java.util.List<java.lang.Integer> cards_;
        private int cardsMemoizedSerializedSize = -1;
        private java.util.List<java.lang.Integer> gangCards_;
        private int gangCardsMemoizedSerializedSize = -1;
        private int winOrLose_;
        private int score_;
        private byte memoizedIsInitialized = -1;

        // Use XingningMahjongUserResult.newBuilder() to construct.
        private XingningMahjongUserResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private XingningMahjongUserResult() {
            iD_ = 0;
            cardScore_ = 0;
            scoreTypes_ = java.util.Collections.emptyList();
            gangScore_ = 0;
            maScore_ = 0;
            cards_ = java.util.Collections.emptyList();
            gangCards_ = java.util.Collections.emptyList();
            winOrLose_ = 0;
            score_ = 0;
        }

        private XingningMahjongUserResult(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {

                            cardScore_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            scoreTypes_.add(rawValue);
                            break;
                        }
                        case 26: {
                            int length = input.readRawVarint32();
                            int oldLimit = input.pushLimit(length);
                            while (input.getBytesUntilLimit() > 0) {
                                int rawValue = input.readEnum();
                                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                    scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                                    mutable_bitField0_ |= 0x00000004;
                                }
                                scoreTypes_.add(rawValue);
                            }
                            input.popLimit(oldLimit);
                            break;
                        }
                        case 32: {

                            gangScore_ = input.readInt32();
                            break;
                        }
                        case 40: {

                            maScore_ = input.readInt32();
                            break;
                        }
                        case 48: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            cards_.add(input.readInt32());
                            break;
                        }
                        case 50: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                                cards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 56: {
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            gangCards_.add(input.readInt32());
                            break;
                        }
                        case 58: {
                            int length = input.readRawVarint32();
                            int limit = input.pushLimit(length);
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                                gangCards_ = new java.util.ArrayList<java.lang.Integer>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            while (input.getBytesUntilLimit() > 0) {
                                gangCards_.add(input.readInt32());
                            }
                            input.popLimit(limit);
                            break;
                        }
                        case 64: {

                            winOrLose_ = input.readInt32();
                            break;
                        }
                        case 72: {

                            score_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                }
                if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongUserResult_descriptor;
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
        java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningMahjongUserResult prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningMahjongUserResult getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningMahjongUserResult> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongUserResult_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningMahjongUserResult.class, mahjong.mode.Xingning.XingningMahjongUserResult.Builder.class);
        }

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         * 牌型输赢
         * </pre>
         * <p>
         * <code>int32 cardScore = 2;</code>
         */
        public int getCardScore() {
            return cardScore_;
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public java.util.List<mahjong.mode.Xingning.ScoreType> getScoreTypesList() {
            return new com.google.protobuf.Internal.ListAdapter<
                    java.lang.Integer, mahjong.mode.Xingning.ScoreType>(scoreTypes_, scoreTypes_converter_);
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public int getScoreTypesCount() {
            return scoreTypes_.size();
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public mahjong.mode.Xingning.ScoreType getScoreTypes(int index) {
            return scoreTypes_converter_.convert(scoreTypes_.get(index));
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public java.util.List<java.lang.Integer>
        getScoreTypesValueList() {
            return scoreTypes_;
        }

        /**
         * <pre>
         * 牌型
         * </pre>
         * <p>
         * <code>repeated .ScoreType scoreTypes = 3;</code>
         */
        public int getScoreTypesValue(int index) {
            return scoreTypes_.get(index);
        }

        /**
         * <pre>
         * 杠牌输赢
         * </pre>
         * <p>
         * <code>int32 gangScore = 4;</code>
         */
        public int getGangScore() {
            return gangScore_;
        }

        /**
         * <pre>
         * 卖马输赢
         * </pre>
         * <p>
         * <code>int32 maScore = 5;</code>
         */
        public int getMaScore() {
            return maScore_;
        }

        /**
         * <code>repeated int32 cards = 6;</code>
         */
        public java.util.List<java.lang.Integer>
        getCardsList() {
            return cards_;
        }

        /**
         * <code>repeated int32 cards = 6;</code>
         */
        public int getCardsCount() {
            return cards_.size();
        }

        /**
         * <code>repeated int32 cards = 6;</code>
         */
        public int getCards(int index) {
            return cards_.get(index);
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 7;</code>
         */
        public java.util.List<java.lang.Integer>
        getGangCardsList() {
            return gangCards_;
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 7;</code>
         */
        public int getGangCardsCount() {
            return gangCards_.size();
        }

        /**
         * <pre>
         * 暗杠的牌
         * </pre>
         * <p>
         * <code>repeated int32 gangCards = 7;</code>
         */
        public int getGangCards(int index) {
            return gangCards_.get(index);
        }

        /**
         * <pre>
         * 当局输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 8;</code>
         */
        public int getWinOrLose() {
            return winOrLose_;
        }

        /**
         * <pre>
         * 总输赢分数
         * </pre>
         * <p>
         * <code>int32 score = 9;</code>
         */
        public int getScore() {
            return score_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (cardScore_ != 0) {
                output.writeInt32(2, cardScore_);
            }
            if (getScoreTypesList().size() > 0) {
                output.writeUInt32NoTag(26);
                output.writeUInt32NoTag(scoreTypesMemoizedSerializedSize);
            }
            for (int i = 0; i < scoreTypes_.size(); i++) {
                output.writeEnumNoTag(scoreTypes_.get(i));
            }
            if (gangScore_ != 0) {
                output.writeInt32(4, gangScore_);
            }
            if (maScore_ != 0) {
                output.writeInt32(5, maScore_);
            }
            if (getCardsList().size() > 0) {
                output.writeUInt32NoTag(50);
                output.writeUInt32NoTag(cardsMemoizedSerializedSize);
            }
            for (int i = 0; i < cards_.size(); i++) {
                output.writeInt32NoTag(cards_.get(i));
            }
            if (getGangCardsList().size() > 0) {
                output.writeUInt32NoTag(58);
                output.writeUInt32NoTag(gangCardsMemoizedSerializedSize);
            }
            for (int i = 0; i < gangCards_.size(); i++) {
                output.writeInt32NoTag(gangCards_.get(i));
            }
            if (winOrLose_ != 0) {
                output.writeInt32(8, winOrLose_);
            }
            if (score_ != 0) {
                output.writeInt32(9, score_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            if (cardScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, cardScore_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < scoreTypes_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeEnumSizeNoTag(scoreTypes_.get(i));
                }
                size += dataSize;
                if (!getScoreTypesList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeUInt32SizeNoTag(dataSize);
                }
                scoreTypesMemoizedSerializedSize = dataSize;
            }
            if (gangScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, gangScore_);
            }
            if (maScore_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(5, maScore_);
            }
            {
                int dataSize = 0;
                for (int i = 0; i < cards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(cards_.get(i));
                }
                size += dataSize;
                if (!getCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                cardsMemoizedSerializedSize = dataSize;
            }
            {
                int dataSize = 0;
                for (int i = 0; i < gangCards_.size(); i++) {
                    dataSize += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(gangCards_.get(i));
                }
                size += dataSize;
                if (!getGangCardsList().isEmpty()) {
                    size += 1;
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32SizeNoTag(dataSize);
                }
                gangCardsMemoizedSerializedSize = dataSize;
            }
            if (winOrLose_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(8, winOrLose_);
            }
            if (score_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(9, score_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningMahjongUserResult)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningMahjongUserResult other = (mahjong.mode.Xingning.XingningMahjongUserResult) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && (getCardScore()
                    == other.getCardScore());
            result = result && scoreTypes_.equals(other.scoreTypes_);
            result = result && (getGangScore()
                    == other.getGangScore());
            result = result && (getMaScore()
                    == other.getMaScore());
            result = result && getCardsList()
                    .equals(other.getCardsList());
            result = result && getGangCardsList()
                    .equals(other.getGangCardsList());
            result = result && (getWinOrLose()
                    == other.getWinOrLose());
            result = result && (getScore()
                    == other.getScore());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            hash = (37 * hash) + CARDSCORE_FIELD_NUMBER;
            hash = (53 * hash) + getCardScore();
            if (getScoreTypesCount() > 0) {
                hash = (37 * hash) + SCORETYPES_FIELD_NUMBER;
                hash = (53 * hash) + scoreTypes_.hashCode();
            }
            hash = (37 * hash) + GANGSCORE_FIELD_NUMBER;
            hash = (53 * hash) + getGangScore();
            hash = (37 * hash) + MASCORE_FIELD_NUMBER;
            hash = (53 * hash) + getMaScore();
            if (getCardsCount() > 0) {
                hash = (37 * hash) + CARDS_FIELD_NUMBER;
                hash = (53 * hash) + getCardsList().hashCode();
            }
            if (getGangCardsCount() > 0) {
                hash = (37 * hash) + GANGCARDS_FIELD_NUMBER;
                hash = (53 * hash) + getGangCardsList().hashCode();
            }
            hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
            hash = (53 * hash) + getWinOrLose();
            hash = (37 * hash) + SCORE_FIELD_NUMBER;
            hash = (53 * hash) + getScore();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningMahjongUserResult> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningMahjongUserResult getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 单个人结算
         * </pre>
         * <p>
         * Protobuf type {@code XingningMahjongUserResult}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningMahjongUserResult)
                mahjong.mode.Xingning.XingningMahjongUserResultOrBuilder {
            private int bitField0_;
            private int iD_;
            private int cardScore_;
            private java.util.List<java.lang.Integer> scoreTypes_ =
                    java.util.Collections.emptyList();
            private int gangScore_;
            private int maScore_;
            private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
            private java.util.List<java.lang.Integer> gangCards_ = java.util.Collections.emptyList();
            private int winOrLose_;
            private int score_;

            // Construct using mahjong.mode.Xingning.XingningMahjongUserResult.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongUserResult_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongUserResult_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningMahjongUserResult.class, mahjong.mode.Xingning.XingningMahjongUserResult.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                cardScore_ = 0;

                scoreTypes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                gangScore_ = 0;

                maScore_ = 0;

                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                winOrLose_ = 0;

                score_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongUserResult_descriptor;
            }

            public mahjong.mode.Xingning.XingningMahjongUserResult getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningMahjongUserResult.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningMahjongUserResult build() {
                mahjong.mode.Xingning.XingningMahjongUserResult result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningMahjongUserResult buildPartial() {
                mahjong.mode.Xingning.XingningMahjongUserResult result = new mahjong.mode.Xingning.XingningMahjongUserResult(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.iD_ = iD_;
                result.cardScore_ = cardScore_;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
                    bitField0_ = (bitField0_ & ~0x00000004);
                }
                result.scoreTypes_ = scoreTypes_;
                result.gangScore_ = gangScore_;
                result.maScore_ = maScore_;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = java.util.Collections.unmodifiableList(cards_);
                    bitField0_ = (bitField0_ & ~0x00000020);
                }
                result.cards_ = cards_;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    gangCards_ = java.util.Collections.unmodifiableList(gangCards_);
                    bitField0_ = (bitField0_ & ~0x00000040);
                }
                result.gangCards_ = gangCards_;
                result.winOrLose_ = winOrLose_;
                result.score_ = score_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningMahjongUserResult) {
                    return mergeFrom((mahjong.mode.Xingning.XingningMahjongUserResult) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningMahjongUserResult other) {
                if (other == mahjong.mode.Xingning.XingningMahjongUserResult.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (other.getCardScore() != 0) {
                    setCardScore(other.getCardScore());
                }
                if (!other.scoreTypes_.isEmpty()) {
                    if (scoreTypes_.isEmpty()) {
                        scoreTypes_ = other.scoreTypes_;
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        ensureScoreTypesIsMutable();
                        scoreTypes_.addAll(other.scoreTypes_);
                    }
                    onChanged();
                }
                if (other.getGangScore() != 0) {
                    setGangScore(other.getGangScore());
                }
                if (other.getMaScore() != 0) {
                    setMaScore(other.getMaScore());
                }
                if (!other.cards_.isEmpty()) {
                    if (cards_.isEmpty()) {
                        cards_ = other.cards_;
                        bitField0_ = (bitField0_ & ~0x00000020);
                    } else {
                        ensureCardsIsMutable();
                        cards_.addAll(other.cards_);
                    }
                    onChanged();
                }
                if (!other.gangCards_.isEmpty()) {
                    if (gangCards_.isEmpty()) {
                        gangCards_ = other.gangCards_;
                        bitField0_ = (bitField0_ & ~0x00000040);
                    } else {
                        ensureGangCardsIsMutable();
                        gangCards_.addAll(other.gangCards_);
                    }
                    onChanged();
                }
                if (other.getWinOrLose() != 0) {
                    setWinOrLose(other.getWinOrLose());
                }
                if (other.getScore() != 0) {
                    setScore(other.getScore());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningMahjongUserResult parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningMahjongUserResult) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public int getCardScore() {
                return cardScore_;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public Builder setCardScore(int value) {

                cardScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型输赢
             * </pre>
             *
             * <code>int32 cardScore = 2;</code>
             */
            public Builder clearCardScore() {

                cardScore_ = 0;
                onChanged();
                return this;
            }

            private void ensureScoreTypesIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    scoreTypes_ = new java.util.ArrayList<java.lang.Integer>(scoreTypes_);
                    bitField0_ |= 0x00000004;
                }
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public java.util.List<mahjong.mode.Xingning.ScoreType> getScoreTypesList() {
                return new com.google.protobuf.Internal.ListAdapter<
                        java.lang.Integer, mahjong.mode.Xingning.ScoreType>(scoreTypes_, scoreTypes_converter_);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public int getScoreTypesCount() {
                return scoreTypes_.size();
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public mahjong.mode.Xingning.ScoreType getScoreTypes(int index) {
                return scoreTypes_converter_.convert(scoreTypes_.get(index));
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder setScoreTypes(
                    int index, mahjong.mode.Xingning.ScoreType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureScoreTypesIsMutable();
                scoreTypes_.set(index, value.getNumber());
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addScoreTypes(mahjong.mode.Xingning.ScoreType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureScoreTypesIsMutable();
                scoreTypes_.add(value.getNumber());
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addAllScoreTypes(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.ScoreType> values) {
                ensureScoreTypesIsMutable();
                for (mahjong.mode.Xingning.ScoreType value : values) {
                    scoreTypes_.add(value.getNumber());
                }
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder clearScoreTypes() {
                scoreTypes_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000004);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public java.util.List<java.lang.Integer>
            getScoreTypesValueList() {
                return java.util.Collections.unmodifiableList(scoreTypes_);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public int getScoreTypesValue(int index) {
                return scoreTypes_.get(index);
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder setScoreTypesValue(
                    int index, int value) {
                ensureScoreTypesIsMutable();
                scoreTypes_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addScoreTypesValue(int value) {
                ensureScoreTypesIsMutable();
                scoreTypes_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             *牌型
             * </pre>
             *
             * <code>repeated .ScoreType scoreTypes = 3;</code>
             */
            public Builder addAllScoreTypesValue(
                    java.lang.Iterable<java.lang.Integer> values) {
                ensureScoreTypesIsMutable();
                for (int value : values) {
                    scoreTypes_.add(value);
                }
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public int getGangScore() {
                return gangScore_;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public Builder setGangScore(int value) {

                gangScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *杠牌输赢
             * </pre>
             *
             * <code>int32 gangScore = 4;</code>
             */
            public Builder clearGangScore() {

                gangScore_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public int getMaScore() {
                return maScore_;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public Builder setMaScore(int value) {

                maScore_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *卖马输赢
             * </pre>
             *
             * <code>int32 maScore = 5;</code>
             */
            public Builder clearMaScore() {

                maScore_ = 0;
                onChanged();
                return this;
            }

            private void ensureCardsIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
                    bitField0_ |= 0x00000020;
                }
            }

            /**
             * <code>repeated int32 cards = 6;</code>
             */
            public java.util.List<java.lang.Integer>
            getCardsList() {
                return java.util.Collections.unmodifiableList(cards_);
            }

            /**
             * <code>repeated int32 cards = 6;</code>
             */
            public int getCardsCount() {
                return cards_.size();
            }

            /**
             * <code>repeated int32 cards = 6;</code>
             */
            public int getCards(int index) {
                return cards_.get(index);
            }

            /**
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder setCards(
                    int index, int value) {
                ensureCardsIsMutable();
                cards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder addCards(int value) {
                ensureCardsIsMutable();
                cards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder addAllCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, cards_);
                onChanged();
                return this;
            }

            /**
             * <code>repeated int32 cards = 6;</code>
             */
            public Builder clearCards() {
                cards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000020);
                onChanged();
                return this;
            }

            private void ensureGangCardsIsMutable() {
                if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                    gangCards_ = new java.util.ArrayList<java.lang.Integer>(gangCards_);
                    bitField0_ |= 0x00000040;
                }
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 gangCards = 7;</code>
       */
      public java.util.List<java.lang.Integer>
      getGangCardsList() {
          return java.util.Collections.unmodifiableList(gangCards_);
      }

            /**
             * <pre>
             *暗杠的牌
             * </pre>
             *
             * <code>repeated int32 gangCards = 7;</code>
             */
            public int getGangCardsCount() {
                return gangCards_.size();
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 gangCards = 7;</code>
             */
            public int getGangCards(int index) {
                return gangCards_.get(index);
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 gangCards = 7;</code>
             */
            public Builder setGangCards(
                    int index, int value) {
                ensureGangCardsIsMutable();
                gangCards_.set(index, value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 gangCards = 7;</code>
             */
            public Builder addGangCards(int value) {
                ensureGangCardsIsMutable();
                gangCards_.add(value);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 gangCards = 7;</code>
             */
            public Builder addAllGangCards(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                ensureGangCardsIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, gangCards_);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠的牌
             * </pre>
             * <p>
             * <code>repeated int32 gangCards = 7;</code>
             */
            public Builder clearGangCards() {
                gangCards_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000040);
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 8;</code>
             */
            public int getWinOrLose() {
                return winOrLose_;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 8;</code>
             */
            public Builder setWinOrLose(int value) {

                winOrLose_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 当局输赢
             * </pre>
             * <p>
             * <code>int32 winOrLose = 8;</code>
             */
            public Builder clearWinOrLose() {

                winOrLose_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 9;</code>
             */
            public int getScore() {
                return score_;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 9;</code>
             */
            public Builder setScore(int value) {

                score_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 总输赢分数
             * </pre>
             * <p>
             * <code>int32 score = 9;</code>
             */
            public Builder clearScore() {

                score_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:XingningMahjongUserResult)
        }

    }

    /**
     * <pre>
     * 结束 OVER
     * </pre>
     * <p>
     * Protobuf type {@code XingningMahjongOverResponse}
     */
    public static final class XingningMahjongOverResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningMahjongOverResponse)
            XingningMahjongOverResponseOrBuilder {
        public static final int GAMEOVER_FIELD_NUMBER = 1;
        public static final int BACKKEY_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningMahjongOverResponse)
        private static final mahjong.mode.Xingning.XingningMahjongOverResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningMahjongOverResponse>
                PARSER = new com.google.protobuf.AbstractParser<XingningMahjongOverResponse>() {
            public XingningMahjongOverResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningMahjongOverResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningMahjongOverResponse();
        }

        private int bitField0_;
    private java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameOver> gameOver_;
        private volatile java.lang.Object backKey_;
        private byte memoizedIsInitialized = -1;

        // Use XingningMahjongOverResponse.newBuilder() to construct.
        private XingningMahjongOverResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private XingningMahjongOverResponse() {
            gameOver_ = java.util.Collections.emptyList();
            backKey_ = "";
        }

        private XingningMahjongOverResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                gameOver_ = new java.util.ArrayList<mahjong.mode.Xingning.XingningMahjongSeatGameOver>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            gameOver_.add(
                                    input.readMessage(mahjong.mode.Xingning.XingningMahjongSeatGameOver.parser(), extensionRegistry));
                            break;
                        }
                        case 18: {
                            java.lang.String s = input.readStringRequireUtf8();

                            backKey_ = s;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    gameOver_ = java.util.Collections.unmodifiableList(gameOver_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongOverResponse_descriptor;
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningMahjongOverResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningMahjongOverResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningMahjongOverResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongOverResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningMahjongOverResponse.class, mahjong.mode.Xingning.XingningMahjongOverResponse.Builder.class);
        }

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        public java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameOver> getGameOverList() {
            return gameOver_;
        }

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        public java.util.List<? extends mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder>
        getGameOverOrBuilderList() {
            return gameOver_;
        }

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        public int getGameOverCount() {
            return gameOver_.size();
        }

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongSeatGameOver getGameOver(int index) {
            return gameOver_.get(index);
        }

        /**
         * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder getGameOverOrBuilder(
                int index) {
            return gameOver_.get(index);
        }

        /**
         * <pre>
         * 回到大厅的码
         * </pre>
         * <p>
         * <code>string backKey = 2;</code>
         */
        public java.lang.String getBackKey() {
            java.lang.Object ref = backKey_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                backKey_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * 回到大厅的码
         * </pre>
         * <p>
         * <code>string backKey = 2;</code>
         */
        public com.google.protobuf.ByteString
        getBackKeyBytes() {
            java.lang.Object ref = backKey_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                backKey_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (int i = 0; i < gameOver_.size(); i++) {
                output.writeMessage(1, gameOver_.get(i));
            }
            if (!getBackKeyBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, backKey_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < gameOver_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, gameOver_.get(i));
            }
            if (!getBackKeyBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, backKey_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningMahjongOverResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningMahjongOverResponse other = (mahjong.mode.Xingning.XingningMahjongOverResponse) obj;

            boolean result = true;
            result = result && getGameOverList()
                    .equals(other.getGameOverList());
            result = result && getBackKey()
                    .equals(other.getBackKey());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (getGameOverCount() > 0) {
                hash = (37 * hash) + GAMEOVER_FIELD_NUMBER;
                hash = (53 * hash) + getGameOverList().hashCode();
            }
            hash = (37 * hash) + BACKKEY_FIELD_NUMBER;
            hash = (53 * hash) + getBackKey().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningMahjongOverResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningMahjongOverResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 结束 OVER
         * </pre>
         * <p>
         * Protobuf type {@code XingningMahjongOverResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningMahjongOverResponse)
                mahjong.mode.Xingning.XingningMahjongOverResponseOrBuilder {
            private int bitField0_;
            private java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameOver> gameOver_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.XingningMahjongSeatGameOver, mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder, mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder> gameOverBuilder_;
            private java.lang.Object backKey_ = "";

            // Construct using mahjong.mode.Xingning.XingningMahjongOverResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongOverResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongOverResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningMahjongOverResponse.class, mahjong.mode.Xingning.XingningMahjongOverResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getGameOverFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (gameOverBuilder_ == null) {
                    gameOver_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    gameOverBuilder_.clear();
                }
                backKey_ = "";

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongOverResponse_descriptor;
            }

            public mahjong.mode.Xingning.XingningMahjongOverResponse getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningMahjongOverResponse.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningMahjongOverResponse build() {
                mahjong.mode.Xingning.XingningMahjongOverResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningMahjongOverResponse buildPartial() {
                mahjong.mode.Xingning.XingningMahjongOverResponse result = new mahjong.mode.Xingning.XingningMahjongOverResponse(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (gameOverBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        gameOver_ = java.util.Collections.unmodifiableList(gameOver_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.gameOver_ = gameOver_;
                } else {
                    result.gameOver_ = gameOverBuilder_.build();
                }
                result.backKey_ = backKey_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningMahjongOverResponse) {
                    return mergeFrom((mahjong.mode.Xingning.XingningMahjongOverResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningMahjongOverResponse other) {
                if (other == mahjong.mode.Xingning.XingningMahjongOverResponse.getDefaultInstance()) return this;
                if (gameOverBuilder_ == null) {
                    if (!other.gameOver_.isEmpty()) {
                        if (gameOver_.isEmpty()) {
                            gameOver_ = other.gameOver_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureGameOverIsMutable();
                            gameOver_.addAll(other.gameOver_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.gameOver_.isEmpty()) {
                        if (gameOverBuilder_.isEmpty()) {
                            gameOverBuilder_.dispose();
                            gameOverBuilder_ = null;
                            gameOver_ = other.gameOver_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            gameOverBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getGameOverFieldBuilder() : null;
                        } else {
                            gameOverBuilder_.addAllMessages(other.gameOver_);
                        }
                    }
                }
                if (!other.getBackKey().isEmpty()) {
                    backKey_ = other.backKey_;
                    onChanged();
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningMahjongOverResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningMahjongOverResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureGameOverIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    gameOver_ = new java.util.ArrayList<mahjong.mode.Xingning.XingningMahjongSeatGameOver>(gameOver_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameOver> getGameOverList() {
                if (gameOverBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(gameOver_);
                } else {
                    return gameOverBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public int getGameOverCount() {
                if (gameOverBuilder_ == null) {
                    return gameOver_.size();
                } else {
                    return gameOverBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameOver getGameOver(int index) {
                if (gameOverBuilder_ == null) {
                    return gameOver_.get(index);
                } else {
                    return gameOverBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder setGameOver(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.set(index, value);
                    onChanged();
                } else {
                    gameOverBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder setGameOver(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(mahjong.mode.Xingning.XingningMahjongSeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.add(value);
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameOver value) {
                if (gameOverBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureGameOverIsMutable();
                    gameOver_.add(index, value);
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.add(builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addGameOver(
                    int index, mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder builderForValue) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    gameOverBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder addAllGameOver(
                    java.lang.Iterable<? extends mahjong.mode.Xingning.XingningMahjongSeatGameOver> values) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, gameOver_);
                    onChanged();
                } else {
                    gameOverBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder clearGameOver() {
                if (gameOverBuilder_ == null) {
                    gameOver_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    gameOverBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public Builder removeGameOver(int index) {
                if (gameOverBuilder_ == null) {
                    ensureGameOverIsMutable();
                    gameOver_.remove(index);
                    onChanged();
                } else {
                    gameOverBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder getGameOverBuilder(
                    int index) {
                return getGameOverFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder getGameOverOrBuilder(
                    int index) {
                if (gameOverBuilder_ == null) {
                    return gameOver_.get(index);
                } else {
                    return gameOverBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public java.util.List<? extends mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder>
            getGameOverOrBuilderList() {
                if (gameOverBuilder_ != null) {
                    return gameOverBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(gameOver_);
                }
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder addGameOverBuilder() {
                return getGameOverFieldBuilder().addBuilder(
                        mahjong.mode.Xingning.XingningMahjongSeatGameOver.getDefaultInstance());
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder addGameOverBuilder(
                    int index) {
                return getGameOverFieldBuilder().addBuilder(
                        index, mahjong.mode.Xingning.XingningMahjongSeatGameOver.getDefaultInstance());
            }

            /**
             * <code>repeated .XingningMahjongSeatGameOver gameOver = 1;</code>
             */
            public java.util.List<mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder>
            getGameOverBuilderList() {
                return getGameOverFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.Xingning.XingningMahjongSeatGameOver, mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder, mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder>
            getGameOverFieldBuilder() {
                if (gameOverBuilder_ == null) {
                    gameOverBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            mahjong.mode.Xingning.XingningMahjongSeatGameOver, mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder, mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder>(
                            gameOver_,
                            ((bitField0_ & 0x00000001) == 0x00000001),
                            getParentForChildren(),
                            isClean());
                    gameOver_ = null;
                }
                return gameOverBuilder_;
            }

            /**
             * <pre>
             * 回到大厅的码
             * </pre>
             * <p>
             * <code>string backKey = 2;</code>
             */
            public java.lang.String getBackKey() {
                java.lang.Object ref = backKey_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    backKey_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <pre>
             * 回到大厅的码
             * </pre>
             * <p>
             * <code>string backKey = 2;</code>
             */
            public Builder setBackKey(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                backKey_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 回到大厅的码
             * </pre>
             * <p>
             * <code>string backKey = 2;</code>
             */
            public com.google.protobuf.ByteString
            getBackKeyBytes() {
                java.lang.Object ref = backKey_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    backKey_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * 回到大厅的码
             * </pre>
             * <p>
             * <code>string backKey = 2;</code>
             */
            public Builder setBackKeyBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                backKey_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 回到大厅的码
             * </pre>
             * <p>
             * <code>string backKey = 2;</code>
             */
            public Builder clearBackKey() {

                backKey_ = getDefaultInstance().getBackKey();
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:XingningMahjongOverResponse)
        }

    }

    /**
     * Protobuf type {@code XingningMahjongSeatGameOver}
     */
    public static final class XingningMahjongSeatGameOver extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningMahjongSeatGameOver)
            XingningMahjongSeatGameOverOrBuilder {
        public static final int ID_FIELD_NUMBER = 1;
        public static final int WINORLOSE_FIELD_NUMBER = 2;
        public static final int HUCOUNT_FIELD_NUMBER = 3;
        public static final int ZIMOCOUNT_FIELD_NUMBER = 4;
        public static final int DIANPAOCOUNT_FIELD_NUMBER = 5;
        public static final int ANGANG_FIELD_NUMBER = 6;
        public static final int MINGGANG_FIELD_NUMBER = 7;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningMahjongSeatGameOver)
        private static final mahjong.mode.Xingning.XingningMahjongSeatGameOver DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningMahjongSeatGameOver>
                PARSER = new com.google.protobuf.AbstractParser<XingningMahjongSeatGameOver>() {
            public XingningMahjongSeatGameOver parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningMahjongSeatGameOver(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningMahjongSeatGameOver();
        }

        private int iD_;
        private int winOrLose_;
        private int huCount_;
        private int zimoCount_;
        private int dianpaoCount_;
        private int angang_;
        private int minggang_;
        private byte memoizedIsInitialized = -1;

        // Use XingningMahjongSeatGameOver.newBuilder() to construct.
        private XingningMahjongSeatGameOver(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private XingningMahjongSeatGameOver() {
            iD_ = 0;
            winOrLose_ = 0;
            huCount_ = 0;
            zimoCount_ = 0;
            dianpaoCount_ = 0;
            angang_ = 0;
            minggang_ = 0;
        }

        private XingningMahjongSeatGameOver(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            iD_ = input.readUInt32();
                            break;
                        }
                        case 16: {

                            winOrLose_ = input.readInt32();
                            break;
                        }
                        case 24: {

                            huCount_ = input.readUInt32();
                            break;
                        }
                        case 32: {

                            zimoCount_ = input.readUInt32();
                            break;
                        }
                        case 40: {

                            dianpaoCount_ = input.readUInt32();
                            break;
                        }
                        case 48: {

                            angang_ = input.readUInt32();
                            break;
                        }
                        case 56: {

                            minggang_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameOver_descriptor;
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningMahjongSeatGameOver prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningMahjongSeatGameOver getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningMahjongSeatGameOver> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameOver_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningMahjongSeatGameOver.class, mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder.class);
        }

        /**
         * <pre>
         * 人
         * </pre>
         * <p>
         * <code>uint32 ID = 1;</code>
         */
        public int getID() {
            return iD_;
        }

        /**
         * <pre>
         * 总输赢
         * </pre>
         * <p>
         * <code>int32 winOrLose = 2;</code>
         */
        public int getWinOrLose() {
            return winOrLose_;
        }

        /**
         * <pre>
         * 胡牌次数
         * </pre>
         * <p>
         * <code>uint32 huCount = 3;</code>
         */
        public int getHuCount() {
            return huCount_;
        }

        /**
         * <pre>
         * 自摸次数
         * </pre>
         * <p>
         * <code>uint32 zimoCount = 4;</code>
         */
        public int getZimoCount() {
            return zimoCount_;
        }

        /**
         * <pre>
         * 点炮次数
         * </pre>
         * <p>
         * <code>uint32 dianpaoCount = 5;</code>
         */
        public int getDianpaoCount() {
            return dianpaoCount_;
        }

        /**
         * <pre>
         * 暗杠次数
         * </pre>
         * <p>
         * <code>uint32 angang = 6;</code>
         */
        public int getAngang() {
            return angang_;
        }

        /**
         * <pre>
         * 明杠次数
         * </pre>
         * <p>
         * <code>uint32 minggang = 7;</code>
         */
        public int getMinggang() {
            return minggang_;
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (iD_ != 0) {
                output.writeUInt32(1, iD_);
            }
            if (winOrLose_ != 0) {
                output.writeInt32(2, winOrLose_);
            }
            if (huCount_ != 0) {
                output.writeUInt32(3, huCount_);
            }
            if (zimoCount_ != 0) {
                output.writeUInt32(4, zimoCount_);
            }
            if (dianpaoCount_ != 0) {
                output.writeUInt32(5, dianpaoCount_);
            }
            if (angang_ != 0) {
                output.writeUInt32(6, angang_);
            }
            if (minggang_ != 0) {
                output.writeUInt32(7, minggang_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (iD_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, iD_);
            }
            if (winOrLose_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, winOrLose_);
            }
            if (huCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(3, huCount_);
            }
            if (zimoCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, zimoCount_);
            }
            if (dianpaoCount_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, dianpaoCount_);
            }
            if (angang_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(6, angang_);
            }
            if (minggang_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(7, minggang_);
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningMahjongSeatGameOver)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningMahjongSeatGameOver other = (mahjong.mode.Xingning.XingningMahjongSeatGameOver) obj;

            boolean result = true;
            result = result && (getID()
                    == other.getID());
            result = result && (getWinOrLose()
                    == other.getWinOrLose());
            result = result && (getHuCount()
                    == other.getHuCount());
            result = result && (getZimoCount()
                    == other.getZimoCount());
            result = result && (getDianpaoCount()
                    == other.getDianpaoCount());
            result = result && (getAngang()
                    == other.getAngang());
            result = result && (getMinggang()
                    == other.getMinggang());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getID();
            hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
            hash = (53 * hash) + getWinOrLose();
            hash = (37 * hash) + HUCOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getHuCount();
            hash = (37 * hash) + ZIMOCOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getZimoCount();
            hash = (37 * hash) + DIANPAOCOUNT_FIELD_NUMBER;
            hash = (53 * hash) + getDianpaoCount();
            hash = (37 * hash) + ANGANG_FIELD_NUMBER;
            hash = (53 * hash) + getAngang();
            hash = (37 * hash) + MINGGANG_FIELD_NUMBER;
            hash = (53 * hash) + getMinggang();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningMahjongSeatGameOver> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningMahjongSeatGameOver getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * Protobuf type {@code XingningMahjongSeatGameOver}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningMahjongSeatGameOver)
                mahjong.mode.Xingning.XingningMahjongSeatGameOverOrBuilder {
            private int iD_;
            private int winOrLose_;
            private int huCount_;
            private int zimoCount_;
            private int dianpaoCount_;
            private int angang_;
            private int minggang_;

            // Construct using mahjong.mode.Xingning.XingningMahjongSeatGameOver.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameOver_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameOver_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningMahjongSeatGameOver.class, mahjong.mode.Xingning.XingningMahjongSeatGameOver.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                iD_ = 0;

                winOrLose_ = 0;

                huCount_ = 0;

                zimoCount_ = 0;

                dianpaoCount_ = 0;

                angang_ = 0;

                minggang_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongSeatGameOver_descriptor;
            }

            public mahjong.mode.Xingning.XingningMahjongSeatGameOver getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningMahjongSeatGameOver.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningMahjongSeatGameOver build() {
                mahjong.mode.Xingning.XingningMahjongSeatGameOver result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningMahjongSeatGameOver buildPartial() {
                mahjong.mode.Xingning.XingningMahjongSeatGameOver result = new mahjong.mode.Xingning.XingningMahjongSeatGameOver(this);
                result.iD_ = iD_;
                result.winOrLose_ = winOrLose_;
                result.huCount_ = huCount_;
                result.zimoCount_ = zimoCount_;
                result.dianpaoCount_ = dianpaoCount_;
                result.angang_ = angang_;
                result.minggang_ = minggang_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningMahjongSeatGameOver) {
                    return mergeFrom((mahjong.mode.Xingning.XingningMahjongSeatGameOver) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningMahjongSeatGameOver other) {
                if (other == mahjong.mode.Xingning.XingningMahjongSeatGameOver.getDefaultInstance()) return this;
                if (other.getID() != 0) {
                    setID(other.getID());
                }
                if (other.getWinOrLose() != 0) {
                    setWinOrLose(other.getWinOrLose());
                }
                if (other.getHuCount() != 0) {
                    setHuCount(other.getHuCount());
                }
                if (other.getZimoCount() != 0) {
                    setZimoCount(other.getZimoCount());
                }
                if (other.getDianpaoCount() != 0) {
                    setDianpaoCount(other.getDianpaoCount());
                }
                if (other.getAngang() != 0) {
                    setAngang(other.getAngang());
                }
                if (other.getMinggang() != 0) {
                    setMinggang(other.getMinggang());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningMahjongSeatGameOver parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningMahjongSeatGameOver) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public int getID() {
                return iD_;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder setID(int value) {

                iD_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *人
             * </pre>
             *
             * <code>uint32 ID = 1;</code>
             */
            public Builder clearID() {

                iD_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *总输赢
             * </pre>
             *
             * <code>int32 winOrLose = 2;</code>
             */
            public int getWinOrLose() {
                return winOrLose_;
            }

            /**
             * <pre>
             *总输赢
             * </pre>
             *
             * <code>int32 winOrLose = 2;</code>
             */
            public Builder setWinOrLose(int value) {

                winOrLose_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *总输赢
             * </pre>
             *
             * <code>int32 winOrLose = 2;</code>
             */
            public Builder clearWinOrLose() {

                winOrLose_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             *胡牌次数
             * </pre>
             *
             * <code>uint32 huCount = 3;</code>
             */
            public int getHuCount() {
                return huCount_;
            }

            /**
             * <pre>
             *胡牌次数
             * </pre>
             *
             * <code>uint32 huCount = 3;</code>
             */
            public Builder setHuCount(int value) {

                huCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 胡牌次数
             * </pre>
             * <p>
             * <code>uint32 huCount = 3;</code>
             */
            public Builder clearHuCount() {

                huCount_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 自摸次数
             * </pre>
             * <p>
             * <code>uint32 zimoCount = 4;</code>
             */
            public int getZimoCount() {
                return zimoCount_;
            }

            /**
             * <pre>
             * 自摸次数
             * </pre>
             * <p>
             * <code>uint32 zimoCount = 4;</code>
             */
            public Builder setZimoCount(int value) {

                zimoCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 自摸次数
             * </pre>
             * <p>
             * <code>uint32 zimoCount = 4;</code>
             */
            public Builder clearZimoCount() {

                zimoCount_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 点炮次数
             * </pre>
             * <p>
             * <code>uint32 dianpaoCount = 5;</code>
             */
            public int getDianpaoCount() {
                return dianpaoCount_;
            }

            /**
             * <pre>
             * 点炮次数
             * </pre>
             * <p>
             * <code>uint32 dianpaoCount = 5;</code>
             */
            public Builder setDianpaoCount(int value) {

                dianpaoCount_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 点炮次数
             * </pre>
             * <p>
             * <code>uint32 dianpaoCount = 5;</code>
             */
            public Builder clearDianpaoCount() {

                dianpaoCount_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠次数
             * </pre>
             * <p>
             * <code>uint32 angang = 6;</code>
             */
            public int getAngang() {
                return angang_;
            }

            /**
             * <pre>
             * 暗杠次数
             * </pre>
             * <p>
             * <code>uint32 angang = 6;</code>
             */
            public Builder setAngang(int value) {

                angang_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 暗杠次数
             * </pre>
             * <p>
             * <code>uint32 angang = 6;</code>
             */
            public Builder clearAngang() {

                angang_ = 0;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 明杠次数
             * </pre>
             * <p>
             * <code>uint32 minggang = 7;</code>
             */
            public int getMinggang() {
                return minggang_;
            }

            /**
             * <pre>
             * 明杠次数
             * </pre>
             * <p>
             * <code>uint32 minggang = 7;</code>
             */
            public Builder setMinggang(int value) {

                minggang_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 明杠次数
             * </pre>
             * <p>
             * <code>uint32 minggang = 7;</code>
             */
            public Builder clearMinggang() {

                minggang_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:XingningMahjongSeatGameOver)
        }

    }

    /**
     * <pre>
     * 回放    REPLAY
     * </pre>
     * <p>
     * Protobuf type {@code XingningMahjongReplayResponse}
     */
    public static final class XingningMahjongReplayResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:XingningMahjongReplayResponse)
            XingningMahjongReplayResponseOrBuilder {
        public static final int START_FIELD_NUMBER = 1;
        public static final int HISTORY_FIELD_NUMBER = 2;
        public static final int RESULT_FIELD_NUMBER = 3;
        private static final long serialVersionUID = 0L;
        // @@protoc_insertion_point(class_scope:XingningMahjongReplayResponse)
        private static final mahjong.mode.Xingning.XingningMahjongReplayResponse DEFAULT_INSTANCE;
        private static final com.google.protobuf.Parser<XingningMahjongReplayResponse>
                PARSER = new com.google.protobuf.AbstractParser<XingningMahjongReplayResponse>() {
            public XingningMahjongReplayResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new XingningMahjongReplayResponse(input, extensionRegistry);
            }
        };

        static {
            DEFAULT_INSTANCE = new mahjong.mode.Xingning.XingningMahjongReplayResponse();
        }

        private int bitField0_;
        private mahjong.mode.Mahjong.MahjongStartResponse start_;
        private java.util.List<mahjong.mode.GameBase.OperationHistory> history_;
        private mahjong.mode.Xingning.XingningMahjongResultResponse result_;
        private byte memoizedIsInitialized = -1;

        // Use XingningMahjongReplayResponse.newBuilder() to construct.
        private XingningMahjongReplayResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
    private XingningMahjongReplayResponse() {
        history_ = java.util.Collections.emptyList();
    }

        private XingningMahjongReplayResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            mahjong.mode.Mahjong.MahjongStartResponse.Builder subBuilder = null;
                            if (start_ != null) {
                                subBuilder = start_.toBuilder();
                            }
                            start_ = input.readMessage(mahjong.mode.Mahjong.MahjongStartResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(start_);
                                start_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                history_ = new java.util.ArrayList<mahjong.mode.GameBase.OperationHistory>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            history_.add(
                                    input.readMessage(mahjong.mode.GameBase.OperationHistory.parser(), extensionRegistry));
                            break;
                        }
                        case 26: {
                            mahjong.mode.Xingning.XingningMahjongResultResponse.Builder subBuilder = null;
                            if (result_ != null) {
                                subBuilder = result_.toBuilder();
                            }
                            result_ = input.readMessage(mahjong.mode.Xingning.XingningMahjongResultResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(result_);
                                result_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    history_ = java.util.Collections.unmodifiableList(history_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongReplayResponse_descriptor;
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(mahjong.mode.Xingning.XingningMahjongReplayResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public static mahjong.mode.Xingning.XingningMahjongReplayResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static com.google.protobuf.Parser<XingningMahjongReplayResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return mahjong.mode.Xingning.internal_static_XingningMahjongReplayResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            mahjong.mode.Xingning.XingningMahjongReplayResponse.class, mahjong.mode.Xingning.XingningMahjongReplayResponse.Builder.class);
        }

        /**
         * <code>.MahjongStartResponse start = 1;</code>
         */
        public boolean hasStart() {
            return start_ != null;
        }

        /**
         * <code>.MahjongStartResponse start = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongStartResponse getStart() {
            return start_ == null ? mahjong.mode.Mahjong.MahjongStartResponse.getDefaultInstance() : start_;
        }

        /**
         * <code>.MahjongStartResponse start = 1;</code>
         */
        public mahjong.mode.Mahjong.MahjongStartResponseOrBuilder getStartOrBuilder() {
            return getStart();
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public java.util.List<mahjong.mode.GameBase.OperationHistory> getHistoryList() {
            return history_;
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public java.util.List<? extends mahjong.mode.GameBase.OperationHistoryOrBuilder>
        getHistoryOrBuilderList() {
            return history_;
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public int getHistoryCount() {
            return history_.size();
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public mahjong.mode.GameBase.OperationHistory getHistory(int index) {
            return history_.get(index);
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .OperationHistory history = 2;</code>
         */
        public mahjong.mode.GameBase.OperationHistoryOrBuilder getHistoryOrBuilder(
                int index) {
            return history_.get(index);
        }

        /**
         * <code>.XingningMahjongResultResponse result = 3;</code>
         */
        public boolean hasResult() {
            return result_ != null;
        }

        /**
         * <code>.XingningMahjongResultResponse result = 3;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongResultResponse getResult() {
            return result_ == null ? mahjong.mode.Xingning.XingningMahjongResultResponse.getDefaultInstance() : result_;
        }

        /**
         * <code>.XingningMahjongResultResponse result = 3;</code>
         */
        public mahjong.mode.Xingning.XingningMahjongResultResponseOrBuilder getResultOrBuilder() {
            return getResult();
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (start_ != null) {
                output.writeMessage(1, getStart());
            }
            for (int i = 0; i < history_.size(); i++) {
                output.writeMessage(2, history_.get(i));
            }
            if (result_ != null) {
                output.writeMessage(3, getResult());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (start_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getStart());
            }
            for (int i = 0; i < history_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, history_.get(i));
            }
            if (result_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, getResult());
            }
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof mahjong.mode.Xingning.XingningMahjongReplayResponse)) {
                return super.equals(obj);
            }
            mahjong.mode.Xingning.XingningMahjongReplayResponse other = (mahjong.mode.Xingning.XingningMahjongReplayResponse) obj;

            boolean result = true;
            result = result && (hasStart() == other.hasStart());
            if (hasStart()) {
                result = result && getStart()
                        .equals(other.getStart());
            }
            result = result && getHistoryList()
                    .equals(other.getHistoryList());
            result = result && (hasResult() == other.hasResult());
            if (hasResult()) {
                result = result && getResult()
                        .equals(other.getResult());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasStart()) {
                hash = (37 * hash) + START_FIELD_NUMBER;
                hash = (53 * hash) + getStart().hashCode();
            }
            if (getHistoryCount() > 0) {
                hash = (37 * hash) + HISTORY_FIELD_NUMBER;
                hash = (53 * hash) + getHistoryList().hashCode();
            }
            if (hasResult()) {
                hash = (37 * hash) + RESULT_FIELD_NUMBER;
                hash = (53 * hash) + getResult().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<XingningMahjongReplayResponse> getParserForType() {
            return PARSER;
        }

        public mahjong.mode.Xingning.XingningMahjongReplayResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        /**
         * <pre>
         * 回放    REPLAY
         * </pre>
         * <p>
         * Protobuf type {@code XingningMahjongReplayResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:XingningMahjongReplayResponse)
                mahjong.mode.Xingning.XingningMahjongReplayResponseOrBuilder {
            private int bitField0_;
            private mahjong.mode.Mahjong.MahjongStartResponse start_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    mahjong.mode.Mahjong.MahjongStartResponse, mahjong.mode.Mahjong.MahjongStartResponse.Builder, mahjong.mode.Mahjong.MahjongStartResponseOrBuilder> startBuilder_;
            private java.util.List<mahjong.mode.GameBase.OperationHistory> history_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilderV3<
                    mahjong.mode.GameBase.OperationHistory, mahjong.mode.GameBase.OperationHistory.Builder, mahjong.mode.GameBase.OperationHistoryOrBuilder> historyBuilder_;
            private mahjong.mode.Xingning.XingningMahjongResultResponse result_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    mahjong.mode.Xingning.XingningMahjongResultResponse, mahjong.mode.Xingning.XingningMahjongResultResponse.Builder, mahjong.mode.Xingning.XingningMahjongResultResponseOrBuilder> resultBuilder_;

            // Construct using mahjong.mode.Xingning.XingningMahjongReplayResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongReplayResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongReplayResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                mahjong.mode.Xingning.XingningMahjongReplayResponse.class, mahjong.mode.Xingning.XingningMahjongReplayResponse.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getHistoryFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (startBuilder_ == null) {
                    start_ = null;
                } else {
                    start_ = null;
                    startBuilder_ = null;
                }
                if (historyBuilder_ == null) {
                    history_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                } else {
                    historyBuilder_.clear();
                }
                if (resultBuilder_ == null) {
                    result_ = null;
                } else {
                    result_ = null;
                    resultBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return mahjong.mode.Xingning.internal_static_XingningMahjongReplayResponse_descriptor;
            }

            public mahjong.mode.Xingning.XingningMahjongReplayResponse getDefaultInstanceForType() {
                return mahjong.mode.Xingning.XingningMahjongReplayResponse.getDefaultInstance();
            }

            public mahjong.mode.Xingning.XingningMahjongReplayResponse build() {
                mahjong.mode.Xingning.XingningMahjongReplayResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public mahjong.mode.Xingning.XingningMahjongReplayResponse buildPartial() {
                mahjong.mode.Xingning.XingningMahjongReplayResponse result = new mahjong.mode.Xingning.XingningMahjongReplayResponse(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (startBuilder_ == null) {
                    result.start_ = start_;
                } else {
                    result.start_ = startBuilder_.build();
                }
                if (historyBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002)) {
                        history_ = java.util.Collections.unmodifiableList(history_);
                        bitField0_ = (bitField0_ & ~0x00000002);
                    }
                    result.history_ = history_;
                } else {
                    result.history_ = historyBuilder_.build();
                }
                if (resultBuilder_ == null) {
                    result.result_ = result_;
                } else {
                    result.result_ = resultBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof mahjong.mode.Xingning.XingningMahjongReplayResponse) {
                    return mergeFrom((mahjong.mode.Xingning.XingningMahjongReplayResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(mahjong.mode.Xingning.XingningMahjongReplayResponse other) {
                if (other == mahjong.mode.Xingning.XingningMahjongReplayResponse.getDefaultInstance()) return this;
                if (other.hasStart()) {
                    mergeStart(other.getStart());
                }
                if (historyBuilder_ == null) {
                    if (!other.history_.isEmpty()) {
                        if (history_.isEmpty()) {
                            history_ = other.history_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                        } else {
                            ensureHistoryIsMutable();
                            history_.addAll(other.history_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.history_.isEmpty()) {
                        if (historyBuilder_.isEmpty()) {
                            historyBuilder_.dispose();
                            historyBuilder_ = null;
                            history_ = other.history_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                            historyBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getHistoryFieldBuilder() : null;
                        } else {
                            historyBuilder_.addAllMessages(other.history_);
                        }
                    }
                }
                if (other.hasResult()) {
                    mergeResult(other.getResult());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                mahjong.mode.Xingning.XingningMahjongReplayResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (mahjong.mode.Xingning.XingningMahjongReplayResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public boolean hasStart() {
                return startBuilder_ != null || start_ != null;
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongStartResponse getStart() {
                if (startBuilder_ == null) {
                    return start_ == null ? mahjong.mode.Mahjong.MahjongStartResponse.getDefaultInstance() : start_;
                } else {
                    return startBuilder_.getMessage();
                }
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public Builder setStart(
                    mahjong.mode.Mahjong.MahjongStartResponse.Builder builderForValue) {
                if (startBuilder_ == null) {
                    start_ = builderForValue.build();
                    onChanged();
                } else {
                    startBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public Builder setStart(mahjong.mode.Mahjong.MahjongStartResponse value) {
                if (startBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    start_ = value;
                    onChanged();
                } else {
                    startBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public Builder mergeStart(mahjong.mode.Mahjong.MahjongStartResponse value) {
                if (startBuilder_ == null) {
                    if (start_ != null) {
                        start_ =
                                mahjong.mode.Mahjong.MahjongStartResponse.newBuilder(start_).mergeFrom(value).buildPartial();
                    } else {
                        start_ = value;
                    }
                    onChanged();
                } else {
                    startBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public Builder clearStart() {
                if (startBuilder_ == null) {
                    start_ = null;
                    onChanged();
                } else {
                    start_ = null;
                    startBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongStartResponse.Builder getStartBuilder() {

                onChanged();
                return getStartFieldBuilder().getBuilder();
            }

            /**
             * <code>.MahjongStartResponse start = 1;</code>
             */
            public mahjong.mode.Mahjong.MahjongStartResponseOrBuilder getStartOrBuilder() {
                if (startBuilder_ != null) {
                    return startBuilder_.getMessageOrBuilder();
        } else {
          return start_ == null ?
              mahjong.mode.Mahjong.MahjongStartResponse.getDefaultInstance() : start_;
        }
      }

      /**
       * <code>.MahjongStartResponse start = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mahjong.mode.Mahjong.MahjongStartResponse, mahjong.mode.Mahjong.MahjongStartResponse.Builder, mahjong.mode.Mahjong.MahjongStartResponseOrBuilder>
          getStartFieldBuilder() {
        if (startBuilder_ == null) {
          startBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mahjong.mode.Mahjong.MahjongStartResponse, mahjong.mode.Mahjong.MahjongStartResponse.Builder, mahjong.mode.Mahjong.MahjongStartResponseOrBuilder>(
                  getStart(),
                  getParentForChildren(),
                  isClean());
          start_ = null;
        }
        return startBuilder_;
      }

      private void ensureHistoryIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          history_ = new java.util.ArrayList<mahjong.mode.GameBase.OperationHistory>(history_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public java.util.List<mahjong.mode.GameBase.OperationHistory> getHistoryList() {
        if (historyBuilder_ == null) {
            return java.util.Collections.unmodifiableList(history_);
        } else {
            return historyBuilder_.getMessageList();
        }
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public int getHistoryCount() {
        if (historyBuilder_ == null) {
          return history_.size();
        } else {
            return historyBuilder_.getCount();
        }
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public mahjong.mode.GameBase.OperationHistory getHistory(int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessage(index);
        }
      }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder setHistory(
          int index, mahjong.mode.GameBase.OperationHistory value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.set(index, value);
            onChanged();
        } else {
            historyBuilder_.setMessage(index, value);
        }
          return this;
      }

            /**
             * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
             */
            public Builder setHistory(
                    int index, mahjong.mode.GameBase.OperationHistory.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.set(index, builderForValue.build());
          onChanged();
        } else {
            historyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder addHistory(mahjong.mode.GameBase.OperationHistory value) {
          if (historyBuilder_ == null) {
              if (value == null) {
                  throw new NullPointerException();
              }
              ensureHistoryIsMutable();
          history_.add(value);
          onChanged();
        } else {
          historyBuilder_.addMessage(value);
          }
          return this;
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder addHistory(
          int index, mahjong.mode.GameBase.OperationHistory value) {
        if (historyBuilder_ == null) {
            if (value == null) {
                throw new NullPointerException();
          }
            ensureHistoryIsMutable();
            history_.add(index, value);
            onChanged();
        } else {
          historyBuilder_.addMessage(index, value);
        }
          return this;
      }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder addHistory(
          mahjong.mode.GameBase.OperationHistory.Builder builderForValue) {
        if (historyBuilder_ == null) {
            ensureHistoryIsMutable();
            history_.add(builderForValue.build());
            onChanged();
        } else {
            historyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder addHistory(
          int index, mahjong.mode.GameBase.OperationHistory.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(index, builderForValue.build());
          onChanged();
        } else {
            historyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder addAllHistory(
          java.lang.Iterable<? extends mahjong.mode.GameBase.OperationHistory> values) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, history_);
          onChanged();
        } else {
          historyBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder clearHistory() {
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          historyBuilder_.clear();
        }
        return this;
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public Builder removeHistory(int index) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.remove(index);
          onChanged();
        } else {
          historyBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public mahjong.mode.GameBase.OperationHistory.Builder getHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public mahjong.mode.GameBase.OperationHistory.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
            mahjong.mode.GameBase.OperationHistory.getDefaultInstance());
      }
      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public mahjong.mode.GameBase.OperationHistory.Builder addHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().addBuilder(
            index, mahjong.mode.GameBase.OperationHistory.getDefaultInstance());
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public mahjong.mode.GameBase.OperationHistoryOrBuilder getHistoryOrBuilder(
          int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);  } else {
          return historyBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public java.util.List<? extends mahjong.mode.GameBase.OperationHistoryOrBuilder>
           getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }

      /**
       * <pre>
       *操作记录
       * </pre>
       *
       * <code>repeated .OperationHistory history = 2;</code>
       */
      public java.util.List<mahjong.mode.GameBase.OperationHistory.Builder>
           getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          mahjong.mode.GameBase.OperationHistory, mahjong.mode.GameBase.OperationHistory.Builder, mahjong.mode.GameBase.OperationHistoryOrBuilder>
          getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              mahjong.mode.GameBase.OperationHistory, mahjong.mode.GameBase.OperationHistory.Builder, mahjong.mode.GameBase.OperationHistoryOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public boolean hasResult() {
        return resultBuilder_ != null || result_ != null;
      }
      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public mahjong.mode.Xingning.XingningMahjongResultResponse getResult() {
        if (resultBuilder_ == null) {
          return result_ == null ? mahjong.mode.Xingning.XingningMahjongResultResponse.getDefaultInstance() : result_;
        } else {
          return resultBuilder_.getMessage();
        }
      }

      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public Builder setResult(
          mahjong.mode.Xingning.XingningMahjongResultResponse.Builder builderForValue) {
        if (resultBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          resultBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }

      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public Builder setResult(mahjong.mode.Xingning.XingningMahjongResultResponse value) {
        if (resultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          resultBuilder_.setMessage(value);
        }

        return this;
      }

      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public Builder mergeResult(mahjong.mode.Xingning.XingningMahjongResultResponse value) {
        if (resultBuilder_ == null) {
          if (result_ != null) {
            result_ =
              mahjong.mode.Xingning.XingningMahjongResultResponse.newBuilder(result_).mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          resultBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public Builder clearResult() {
        if (resultBuilder_ == null) {
          result_ = null;
          onChanged();
        } else {
          result_ = null;
          resultBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public mahjong.mode.Xingning.XingningMahjongResultResponse.Builder getResultBuilder() {

        onChanged();
        return getResultFieldBuilder().getBuilder();
      }
      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      public mahjong.mode.Xingning.XingningMahjongResultResponseOrBuilder getResultOrBuilder() {
        if (resultBuilder_ != null) {
          return resultBuilder_.getMessageOrBuilder();
        } else {
          return result_ == null ?
              mahjong.mode.Xingning.XingningMahjongResultResponse.getDefaultInstance() : result_;
        }
      }
      /**
       * <code>.XingningMahjongResultResponse result = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mahjong.mode.Xingning.XingningMahjongResultResponse, mahjong.mode.Xingning.XingningMahjongResultResponse.Builder, mahjong.mode.Xingning.XingningMahjongResultResponseOrBuilder>
          getResultFieldBuilder() {
        if (resultBuilder_ == null) {
          resultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mahjong.mode.Xingning.XingningMahjongResultResponse, mahjong.mode.Xingning.XingningMahjongResultResponse.Builder, mahjong.mode.Xingning.XingningMahjongResultResponseOrBuilder>(
                  getResult(),
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        return resultBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:XingningMahjongReplayResponse)
    }

  }

  // @@protoc_insertion_point(outer_class_scope)
}
